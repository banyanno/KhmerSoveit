'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.4927
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DS_KSPAYMENT"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DS_KSPAYMENT
    Inherits Global.System.Data.DataSet
    
    Private tableS_TEM_LISTPAYMENT As S_TEM_LISTPAYMENTDataTable
    
    Private tableS_EXCHANGE_RATE As S_EXCHANGE_RATEDataTable
    
    Private tableS_INVOICE_KS As S_INVOICE_KSDataTable
    
    Private tableS_INVOICE_DETAIL As S_INVOICE_DETAILDataTable
    
    Private tableS_INVOICE_KSR_VIEW As S_INVOICE_KSR_VIEWDataTable
    
    Private tableS_TEM_LISTMEDICINE_PAYMENT As S_TEM_LISTMEDICINE_PAYMENTDataTable
    
    Private tabletblItem As tblItemDataTable
    
    Private tableS_PRESCRIPTION As S_PRESCRIPTIONDataTable
    
    Private tableS_COUNT_MEDICINE_AND_GLASSES As S_COUNT_MEDICINE_AND_GLASSESDataTable
    
    Private tableS_COUNT_GLASSESS As S_COUNT_GLASSESSDataTable
    
    Private tableV_EYE_PRESCRIPTION As V_EYE_PRESCRIPTIONDataTable
    
    Private tableS_VIEW_COUNT_MEDICINE As S_VIEW_COUNT_MEDICINEDataTable
    
    Private relationS_INVOICE_KS_S_INVOICE_DETAIL As Global.System.Data.DataRelation
    
    Private relationS_INVOICE_KS_S_PRESCRIPTION As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("S_TEM_LISTPAYMENT")) Is Nothing) Then
                MyBase.Tables.Add(New S_TEM_LISTPAYMENTDataTable(ds.Tables("S_TEM_LISTPAYMENT")))
            End If
            If (Not (ds.Tables("S_EXCHANGE_RATE")) Is Nothing) Then
                MyBase.Tables.Add(New S_EXCHANGE_RATEDataTable(ds.Tables("S_EXCHANGE_RATE")))
            End If
            If (Not (ds.Tables("S_INVOICE_KS")) Is Nothing) Then
                MyBase.Tables.Add(New S_INVOICE_KSDataTable(ds.Tables("S_INVOICE_KS")))
            End If
            If (Not (ds.Tables("S_INVOICE_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New S_INVOICE_DETAILDataTable(ds.Tables("S_INVOICE_DETAIL")))
            End If
            If (Not (ds.Tables("S_INVOICE_KSR_VIEW")) Is Nothing) Then
                MyBase.Tables.Add(New S_INVOICE_KSR_VIEWDataTable(ds.Tables("S_INVOICE_KSR_VIEW")))
            End If
            If (Not (ds.Tables("S_TEM_LISTMEDICINE_PAYMENT")) Is Nothing) Then
                MyBase.Tables.Add(New S_TEM_LISTMEDICINE_PAYMENTDataTable(ds.Tables("S_TEM_LISTMEDICINE_PAYMENT")))
            End If
            If (Not (ds.Tables("tblItem")) Is Nothing) Then
                MyBase.Tables.Add(New tblItemDataTable(ds.Tables("tblItem")))
            End If
            If (Not (ds.Tables("S_PRESCRIPTION")) Is Nothing) Then
                MyBase.Tables.Add(New S_PRESCRIPTIONDataTable(ds.Tables("S_PRESCRIPTION")))
            End If
            If (Not (ds.Tables("S_COUNT_MEDICINE_AND_GLASSES")) Is Nothing) Then
                MyBase.Tables.Add(New S_COUNT_MEDICINE_AND_GLASSESDataTable(ds.Tables("S_COUNT_MEDICINE_AND_GLASSES")))
            End If
            If (Not (ds.Tables("S_COUNT_GLASSESS")) Is Nothing) Then
                MyBase.Tables.Add(New S_COUNT_GLASSESSDataTable(ds.Tables("S_COUNT_GLASSESS")))
            End If
            If (Not (ds.Tables("V_EYE_PRESCRIPTION")) Is Nothing) Then
                MyBase.Tables.Add(New V_EYE_PRESCRIPTIONDataTable(ds.Tables("V_EYE_PRESCRIPTION")))
            End If
            If (Not (ds.Tables("S_VIEW_COUNT_MEDICINE")) Is Nothing) Then
                MyBase.Tables.Add(New S_VIEW_COUNT_MEDICINEDataTable(ds.Tables("S_VIEW_COUNT_MEDICINE")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property S_TEM_LISTPAYMENT() As S_TEM_LISTPAYMENTDataTable
        Get
            Return Me.tableS_TEM_LISTPAYMENT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property S_EXCHANGE_RATE() As S_EXCHANGE_RATEDataTable
        Get
            Return Me.tableS_EXCHANGE_RATE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property S_INVOICE_KS() As S_INVOICE_KSDataTable
        Get
            Return Me.tableS_INVOICE_KS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property S_INVOICE_DETAIL() As S_INVOICE_DETAILDataTable
        Get
            Return Me.tableS_INVOICE_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property S_INVOICE_KSR_VIEW() As S_INVOICE_KSR_VIEWDataTable
        Get
            Return Me.tableS_INVOICE_KSR_VIEW
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property S_TEM_LISTMEDICINE_PAYMENT() As S_TEM_LISTMEDICINE_PAYMENTDataTable
        Get
            Return Me.tableS_TEM_LISTMEDICINE_PAYMENT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblItem() As tblItemDataTable
        Get
            Return Me.tabletblItem
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property S_PRESCRIPTION() As S_PRESCRIPTIONDataTable
        Get
            Return Me.tableS_PRESCRIPTION
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property S_COUNT_MEDICINE_AND_GLASSES() As S_COUNT_MEDICINE_AND_GLASSESDataTable
        Get
            Return Me.tableS_COUNT_MEDICINE_AND_GLASSES
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property S_COUNT_GLASSESS() As S_COUNT_GLASSESSDataTable
        Get
            Return Me.tableS_COUNT_GLASSESS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property V_EYE_PRESCRIPTION() As V_EYE_PRESCRIPTIONDataTable
        Get
            Return Me.tableV_EYE_PRESCRIPTION
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property S_VIEW_COUNT_MEDICINE() As S_VIEW_COUNT_MEDICINEDataTable
        Get
            Return Me.tableS_VIEW_COUNT_MEDICINE
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DS_KSPAYMENT = CType(MyBase.Clone,DS_KSPAYMENT)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("S_TEM_LISTPAYMENT")) Is Nothing) Then
                MyBase.Tables.Add(New S_TEM_LISTPAYMENTDataTable(ds.Tables("S_TEM_LISTPAYMENT")))
            End If
            If (Not (ds.Tables("S_EXCHANGE_RATE")) Is Nothing) Then
                MyBase.Tables.Add(New S_EXCHANGE_RATEDataTable(ds.Tables("S_EXCHANGE_RATE")))
            End If
            If (Not (ds.Tables("S_INVOICE_KS")) Is Nothing) Then
                MyBase.Tables.Add(New S_INVOICE_KSDataTable(ds.Tables("S_INVOICE_KS")))
            End If
            If (Not (ds.Tables("S_INVOICE_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New S_INVOICE_DETAILDataTable(ds.Tables("S_INVOICE_DETAIL")))
            End If
            If (Not (ds.Tables("S_INVOICE_KSR_VIEW")) Is Nothing) Then
                MyBase.Tables.Add(New S_INVOICE_KSR_VIEWDataTable(ds.Tables("S_INVOICE_KSR_VIEW")))
            End If
            If (Not (ds.Tables("S_TEM_LISTMEDICINE_PAYMENT")) Is Nothing) Then
                MyBase.Tables.Add(New S_TEM_LISTMEDICINE_PAYMENTDataTable(ds.Tables("S_TEM_LISTMEDICINE_PAYMENT")))
            End If
            If (Not (ds.Tables("tblItem")) Is Nothing) Then
                MyBase.Tables.Add(New tblItemDataTable(ds.Tables("tblItem")))
            End If
            If (Not (ds.Tables("S_PRESCRIPTION")) Is Nothing) Then
                MyBase.Tables.Add(New S_PRESCRIPTIONDataTable(ds.Tables("S_PRESCRIPTION")))
            End If
            If (Not (ds.Tables("S_COUNT_MEDICINE_AND_GLASSES")) Is Nothing) Then
                MyBase.Tables.Add(New S_COUNT_MEDICINE_AND_GLASSESDataTable(ds.Tables("S_COUNT_MEDICINE_AND_GLASSES")))
            End If
            If (Not (ds.Tables("S_COUNT_GLASSESS")) Is Nothing) Then
                MyBase.Tables.Add(New S_COUNT_GLASSESSDataTable(ds.Tables("S_COUNT_GLASSESS")))
            End If
            If (Not (ds.Tables("V_EYE_PRESCRIPTION")) Is Nothing) Then
                MyBase.Tables.Add(New V_EYE_PRESCRIPTIONDataTable(ds.Tables("V_EYE_PRESCRIPTION")))
            End If
            If (Not (ds.Tables("S_VIEW_COUNT_MEDICINE")) Is Nothing) Then
                MyBase.Tables.Add(New S_VIEW_COUNT_MEDICINEDataTable(ds.Tables("S_VIEW_COUNT_MEDICINE")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableS_TEM_LISTPAYMENT = CType(MyBase.Tables("S_TEM_LISTPAYMENT"),S_TEM_LISTPAYMENTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableS_TEM_LISTPAYMENT) Is Nothing) Then
                Me.tableS_TEM_LISTPAYMENT.InitVars
            End If
        End If
        Me.tableS_EXCHANGE_RATE = CType(MyBase.Tables("S_EXCHANGE_RATE"),S_EXCHANGE_RATEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableS_EXCHANGE_RATE) Is Nothing) Then
                Me.tableS_EXCHANGE_RATE.InitVars
            End If
        End If
        Me.tableS_INVOICE_KS = CType(MyBase.Tables("S_INVOICE_KS"),S_INVOICE_KSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableS_INVOICE_KS) Is Nothing) Then
                Me.tableS_INVOICE_KS.InitVars
            End If
        End If
        Me.tableS_INVOICE_DETAIL = CType(MyBase.Tables("S_INVOICE_DETAIL"),S_INVOICE_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tableS_INVOICE_DETAIL) Is Nothing) Then
                Me.tableS_INVOICE_DETAIL.InitVars
            End If
        End If
        Me.tableS_INVOICE_KSR_VIEW = CType(MyBase.Tables("S_INVOICE_KSR_VIEW"),S_INVOICE_KSR_VIEWDataTable)
        If (initTable = true) Then
            If (Not (Me.tableS_INVOICE_KSR_VIEW) Is Nothing) Then
                Me.tableS_INVOICE_KSR_VIEW.InitVars
            End If
        End If
        Me.tableS_TEM_LISTMEDICINE_PAYMENT = CType(MyBase.Tables("S_TEM_LISTMEDICINE_PAYMENT"),S_TEM_LISTMEDICINE_PAYMENTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableS_TEM_LISTMEDICINE_PAYMENT) Is Nothing) Then
                Me.tableS_TEM_LISTMEDICINE_PAYMENT.InitVars
            End If
        End If
        Me.tabletblItem = CType(MyBase.Tables("tblItem"),tblItemDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblItem) Is Nothing) Then
                Me.tabletblItem.InitVars
            End If
        End If
        Me.tableS_PRESCRIPTION = CType(MyBase.Tables("S_PRESCRIPTION"),S_PRESCRIPTIONDataTable)
        If (initTable = true) Then
            If (Not (Me.tableS_PRESCRIPTION) Is Nothing) Then
                Me.tableS_PRESCRIPTION.InitVars
            End If
        End If
        Me.tableS_COUNT_MEDICINE_AND_GLASSES = CType(MyBase.Tables("S_COUNT_MEDICINE_AND_GLASSES"),S_COUNT_MEDICINE_AND_GLASSESDataTable)
        If (initTable = true) Then
            If (Not (Me.tableS_COUNT_MEDICINE_AND_GLASSES) Is Nothing) Then
                Me.tableS_COUNT_MEDICINE_AND_GLASSES.InitVars
            End If
        End If
        Me.tableS_COUNT_GLASSESS = CType(MyBase.Tables("S_COUNT_GLASSESS"),S_COUNT_GLASSESSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableS_COUNT_GLASSESS) Is Nothing) Then
                Me.tableS_COUNT_GLASSESS.InitVars
            End If
        End If
        Me.tableV_EYE_PRESCRIPTION = CType(MyBase.Tables("V_EYE_PRESCRIPTION"),V_EYE_PRESCRIPTIONDataTable)
        If (initTable = true) Then
            If (Not (Me.tableV_EYE_PRESCRIPTION) Is Nothing) Then
                Me.tableV_EYE_PRESCRIPTION.InitVars
            End If
        End If
        Me.tableS_VIEW_COUNT_MEDICINE = CType(MyBase.Tables("S_VIEW_COUNT_MEDICINE"),S_VIEW_COUNT_MEDICINEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableS_VIEW_COUNT_MEDICINE) Is Nothing) Then
                Me.tableS_VIEW_COUNT_MEDICINE.InitVars
            End If
        End If
        Me.relationS_INVOICE_KS_S_INVOICE_DETAIL = Me.Relations("S_INVOICE_KS_S_INVOICE_DETAIL")
        Me.relationS_INVOICE_KS_S_PRESCRIPTION = Me.Relations("S_INVOICE_KS_S_PRESCRIPTION")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DS_KSPAYMENT"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DS_KSPAYMENT.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableS_TEM_LISTPAYMENT = New S_TEM_LISTPAYMENTDataTable
        MyBase.Tables.Add(Me.tableS_TEM_LISTPAYMENT)
        Me.tableS_EXCHANGE_RATE = New S_EXCHANGE_RATEDataTable
        MyBase.Tables.Add(Me.tableS_EXCHANGE_RATE)
        Me.tableS_INVOICE_KS = New S_INVOICE_KSDataTable
        MyBase.Tables.Add(Me.tableS_INVOICE_KS)
        Me.tableS_INVOICE_DETAIL = New S_INVOICE_DETAILDataTable
        MyBase.Tables.Add(Me.tableS_INVOICE_DETAIL)
        Me.tableS_INVOICE_KSR_VIEW = New S_INVOICE_KSR_VIEWDataTable
        MyBase.Tables.Add(Me.tableS_INVOICE_KSR_VIEW)
        Me.tableS_TEM_LISTMEDICINE_PAYMENT = New S_TEM_LISTMEDICINE_PAYMENTDataTable
        MyBase.Tables.Add(Me.tableS_TEM_LISTMEDICINE_PAYMENT)
        Me.tabletblItem = New tblItemDataTable
        MyBase.Tables.Add(Me.tabletblItem)
        Me.tableS_PRESCRIPTION = New S_PRESCRIPTIONDataTable
        MyBase.Tables.Add(Me.tableS_PRESCRIPTION)
        Me.tableS_COUNT_MEDICINE_AND_GLASSES = New S_COUNT_MEDICINE_AND_GLASSESDataTable
        MyBase.Tables.Add(Me.tableS_COUNT_MEDICINE_AND_GLASSES)
        Me.tableS_COUNT_GLASSESS = New S_COUNT_GLASSESSDataTable
        MyBase.Tables.Add(Me.tableS_COUNT_GLASSESS)
        Me.tableV_EYE_PRESCRIPTION = New V_EYE_PRESCRIPTIONDataTable
        MyBase.Tables.Add(Me.tableV_EYE_PRESCRIPTION)
        Me.tableS_VIEW_COUNT_MEDICINE = New S_VIEW_COUNT_MEDICINEDataTable
        MyBase.Tables.Add(Me.tableS_VIEW_COUNT_MEDICINE)
        Me.relationS_INVOICE_KS_S_INVOICE_DETAIL = New Global.System.Data.DataRelation("S_INVOICE_KS_S_INVOICE_DETAIL", New Global.System.Data.DataColumn() {Me.tableS_INVOICE_KS.INVOICE_IDColumn}, New Global.System.Data.DataColumn() {Me.tableS_INVOICE_DETAIL.INVOICE_NOColumn}, false)
        Me.Relations.Add(Me.relationS_INVOICE_KS_S_INVOICE_DETAIL)
        Me.relationS_INVOICE_KS_S_PRESCRIPTION = New Global.System.Data.DataRelation("S_INVOICE_KS_S_PRESCRIPTION", New Global.System.Data.DataColumn() {Me.tableS_INVOICE_KS.WAITING_IDColumn}, New Global.System.Data.DataColumn() {Me.tableS_PRESCRIPTION.WAITING_IDColumn}, false)
        Me.Relations.Add(Me.relationS_INVOICE_KS_S_PRESCRIPTION)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeS_TEM_LISTPAYMENT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeS_EXCHANGE_RATE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeS_INVOICE_KS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeS_INVOICE_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeS_INVOICE_KSR_VIEW() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeS_TEM_LISTMEDICINE_PAYMENT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetblItem() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeS_PRESCRIPTION() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeS_COUNT_MEDICINE_AND_GLASSES() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeS_COUNT_GLASSESS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeV_EYE_PRESCRIPTION() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeS_VIEW_COUNT_MEDICINE() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DS_KSPAYMENT = New DS_KSPAYMENT
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub S_TEM_LISTPAYMENTRowChangeEventHandler(ByVal sender As Object, ByVal e As S_TEM_LISTPAYMENTRowChangeEvent)
    
    Public Delegate Sub S_EXCHANGE_RATERowChangeEventHandler(ByVal sender As Object, ByVal e As S_EXCHANGE_RATERowChangeEvent)
    
    Public Delegate Sub S_INVOICE_KSRowChangeEventHandler(ByVal sender As Object, ByVal e As S_INVOICE_KSRowChangeEvent)
    
    Public Delegate Sub S_INVOICE_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As S_INVOICE_DETAILRowChangeEvent)
    
    Public Delegate Sub S_INVOICE_KSR_VIEWRowChangeEventHandler(ByVal sender As Object, ByVal e As S_INVOICE_KSR_VIEWRowChangeEvent)
    
    Public Delegate Sub S_TEM_LISTMEDICINE_PAYMENTRowChangeEventHandler(ByVal sender As Object, ByVal e As S_TEM_LISTMEDICINE_PAYMENTRowChangeEvent)
    
    Public Delegate Sub tblItemRowChangeEventHandler(ByVal sender As Object, ByVal e As tblItemRowChangeEvent)
    
    Public Delegate Sub S_PRESCRIPTIONRowChangeEventHandler(ByVal sender As Object, ByVal e As S_PRESCRIPTIONRowChangeEvent)
    
    Public Delegate Sub S_COUNT_MEDICINE_AND_GLASSESRowChangeEventHandler(ByVal sender As Object, ByVal e As S_COUNT_MEDICINE_AND_GLASSESRowChangeEvent)
    
    Public Delegate Sub S_COUNT_GLASSESSRowChangeEventHandler(ByVal sender As Object, ByVal e As S_COUNT_GLASSESSRowChangeEvent)
    
    Public Delegate Sub V_EYE_PRESCRIPTIONRowChangeEventHandler(ByVal sender As Object, ByVal e As V_EYE_PRESCRIPTIONRowChangeEvent)
    
    Public Delegate Sub S_VIEW_COUNT_MEDICINERowChangeEventHandler(ByVal sender As Object, ByVal e As S_VIEW_COUNT_MEDICINERowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class S_TEM_LISTPAYMENTDataTable
        Inherits Global.System.Data.TypedTableBase(Of S_TEM_LISTPAYMENTRow)
        
        Private columnWAIT_PAY_NO As Global.System.Data.DataColumn
        
        Private columnWAITING_NO As Global.System.Data.DataColumn
        
        Private columnPAY_ON As Global.System.Data.DataColumn
        
        Private columnPRICE_PAY As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "S_TEM_LISTPAYMENT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WAIT_PAY_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWAIT_PAY_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WAITING_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWAITING_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PAY_ONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPAY_ON
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRICE_PAYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRICE_PAY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As S_TEM_LISTPAYMENTRow
            Get
                Return CType(Me.Rows(index),S_TEM_LISTPAYMENTRow)
            End Get
        End Property
        
        Public Event S_TEM_LISTPAYMENTRowChanging As S_TEM_LISTPAYMENTRowChangeEventHandler
        
        Public Event S_TEM_LISTPAYMENTRowChanged As S_TEM_LISTPAYMENTRowChangeEventHandler
        
        Public Event S_TEM_LISTPAYMENTRowDeleting As S_TEM_LISTPAYMENTRowChangeEventHandler
        
        Public Event S_TEM_LISTPAYMENTRowDeleted As S_TEM_LISTPAYMENTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddS_TEM_LISTPAYMENTRow(ByVal row As S_TEM_LISTPAYMENTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddS_TEM_LISTPAYMENTRow(ByVal WAITING_NO As Decimal, ByVal PAY_ON As String, ByVal PRICE_PAY As Decimal) As S_TEM_LISTPAYMENTRow
            Dim rowS_TEM_LISTPAYMENTRow As S_TEM_LISTPAYMENTRow = CType(Me.NewRow,S_TEM_LISTPAYMENTRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, WAITING_NO, PAY_ON, PRICE_PAY}
            rowS_TEM_LISTPAYMENTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowS_TEM_LISTPAYMENTRow)
            Return rowS_TEM_LISTPAYMENTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByWAIT_PAY_NO(ByVal WAIT_PAY_NO As Decimal) As S_TEM_LISTPAYMENTRow
            Return CType(Me.Rows.Find(New Object() {WAIT_PAY_NO}),S_TEM_LISTPAYMENTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As S_TEM_LISTPAYMENTDataTable = CType(MyBase.Clone,S_TEM_LISTPAYMENTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New S_TEM_LISTPAYMENTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnWAIT_PAY_NO = MyBase.Columns("WAIT_PAY_NO")
            Me.columnWAITING_NO = MyBase.Columns("WAITING_NO")
            Me.columnPAY_ON = MyBase.Columns("PAY_ON")
            Me.columnPRICE_PAY = MyBase.Columns("PRICE_PAY")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnWAIT_PAY_NO = New Global.System.Data.DataColumn("WAIT_PAY_NO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWAIT_PAY_NO)
            Me.columnWAITING_NO = New Global.System.Data.DataColumn("WAITING_NO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWAITING_NO)
            Me.columnPAY_ON = New Global.System.Data.DataColumn("PAY_ON", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPAY_ON)
            Me.columnPRICE_PAY = New Global.System.Data.DataColumn("PRICE_PAY", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRICE_PAY)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnWAIT_PAY_NO}, true))
            Me.columnWAIT_PAY_NO.AutoIncrement = true
            Me.columnWAIT_PAY_NO.AutoIncrementSeed = -1
            Me.columnWAIT_PAY_NO.AutoIncrementStep = -1
            Me.columnWAIT_PAY_NO.AllowDBNull = false
            Me.columnWAIT_PAY_NO.ReadOnly = true
            Me.columnWAIT_PAY_NO.Unique = true
            Me.columnPAY_ON.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewS_TEM_LISTPAYMENTRow() As S_TEM_LISTPAYMENTRow
            Return CType(Me.NewRow,S_TEM_LISTPAYMENTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New S_TEM_LISTPAYMENTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(S_TEM_LISTPAYMENTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.S_TEM_LISTPAYMENTRowChangedEvent) Is Nothing) Then
                RaiseEvent S_TEM_LISTPAYMENTRowChanged(Me, New S_TEM_LISTPAYMENTRowChangeEvent(CType(e.Row,S_TEM_LISTPAYMENTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.S_TEM_LISTPAYMENTRowChangingEvent) Is Nothing) Then
                RaiseEvent S_TEM_LISTPAYMENTRowChanging(Me, New S_TEM_LISTPAYMENTRowChangeEvent(CType(e.Row,S_TEM_LISTPAYMENTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.S_TEM_LISTPAYMENTRowDeletedEvent) Is Nothing) Then
                RaiseEvent S_TEM_LISTPAYMENTRowDeleted(Me, New S_TEM_LISTPAYMENTRowChangeEvent(CType(e.Row,S_TEM_LISTPAYMENTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.S_TEM_LISTPAYMENTRowDeletingEvent) Is Nothing) Then
                RaiseEvent S_TEM_LISTPAYMENTRowDeleting(Me, New S_TEM_LISTPAYMENTRowChangeEvent(CType(e.Row,S_TEM_LISTPAYMENTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveS_TEM_LISTPAYMENTRow(ByVal row As S_TEM_LISTPAYMENTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS_KSPAYMENT = New DS_KSPAYMENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "S_TEM_LISTPAYMENTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class S_EXCHANGE_RATEDataTable
        Inherits Global.System.Data.TypedTableBase(Of S_EXCHANGE_RATERow)
        
        Private columnExchangeRate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "S_EXCHANGE_RATE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ExchangeRateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExchangeRate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As S_EXCHANGE_RATERow
            Get
                Return CType(Me.Rows(index),S_EXCHANGE_RATERow)
            End Get
        End Property
        
        Public Event S_EXCHANGE_RATERowChanging As S_EXCHANGE_RATERowChangeEventHandler
        
        Public Event S_EXCHANGE_RATERowChanged As S_EXCHANGE_RATERowChangeEventHandler
        
        Public Event S_EXCHANGE_RATERowDeleting As S_EXCHANGE_RATERowChangeEventHandler
        
        Public Event S_EXCHANGE_RATERowDeleted As S_EXCHANGE_RATERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddS_EXCHANGE_RATERow(ByVal row As S_EXCHANGE_RATERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddS_EXCHANGE_RATERow(ByVal ExchangeRate As Decimal) As S_EXCHANGE_RATERow
            Dim rowS_EXCHANGE_RATERow As S_EXCHANGE_RATERow = CType(Me.NewRow,S_EXCHANGE_RATERow)
            Dim columnValuesArray() As Object = New Object() {ExchangeRate}
            rowS_EXCHANGE_RATERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowS_EXCHANGE_RATERow)
            Return rowS_EXCHANGE_RATERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As S_EXCHANGE_RATEDataTable = CType(MyBase.Clone,S_EXCHANGE_RATEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New S_EXCHANGE_RATEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnExchangeRate = MyBase.Columns("ExchangeRate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnExchangeRate = New Global.System.Data.DataColumn("ExchangeRate", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExchangeRate)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewS_EXCHANGE_RATERow() As S_EXCHANGE_RATERow
            Return CType(Me.NewRow,S_EXCHANGE_RATERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New S_EXCHANGE_RATERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(S_EXCHANGE_RATERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.S_EXCHANGE_RATERowChangedEvent) Is Nothing) Then
                RaiseEvent S_EXCHANGE_RATERowChanged(Me, New S_EXCHANGE_RATERowChangeEvent(CType(e.Row,S_EXCHANGE_RATERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.S_EXCHANGE_RATERowChangingEvent) Is Nothing) Then
                RaiseEvent S_EXCHANGE_RATERowChanging(Me, New S_EXCHANGE_RATERowChangeEvent(CType(e.Row,S_EXCHANGE_RATERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.S_EXCHANGE_RATERowDeletedEvent) Is Nothing) Then
                RaiseEvent S_EXCHANGE_RATERowDeleted(Me, New S_EXCHANGE_RATERowChangeEvent(CType(e.Row,S_EXCHANGE_RATERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.S_EXCHANGE_RATERowDeletingEvent) Is Nothing) Then
                RaiseEvent S_EXCHANGE_RATERowDeleting(Me, New S_EXCHANGE_RATERowChangeEvent(CType(e.Row,S_EXCHANGE_RATERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveS_EXCHANGE_RATERow(ByVal row As S_EXCHANGE_RATERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS_KSPAYMENT = New DS_KSPAYMENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "S_EXCHANGE_RATEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class S_INVOICE_KSDataTable
        Inherits Global.System.Data.TypedTableBase(Of S_INVOICE_KSRow)
        
        Private columnINVOICE_ID As Global.System.Data.DataColumn
        
        Private columnWAITING_ID As Global.System.Data.DataColumn
        
        Private columnINVOICE_DATE As Global.System.Data.DataColumn
        
        Private columnPATIENT_NO As Global.System.Data.DataColumn
        
        Private columnTOTAL As Global.System.Data.DataColumn
        
        Private columnSUB_TOTAL As Global.System.Data.DataColumn
        
        Private columnEXCHANGE_RATE As Global.System.Data.DataColumn
        
        Private columnCASH_RECEIVED As Global.System.Data.DataColumn
        
        Private columnCHANG As Global.System.Data.DataColumn
        
        Private columnRECEIVED_BY As Global.System.Data.DataColumn
        
        Private columnTOTAL_DISCOUNT As Global.System.Data.DataColumn
        
        Private columnDIS_CONSULT As Global.System.Data.DataColumn
        
        Private columnDIS_OPERATION As Global.System.Data.DataColumn
        
        Private columnDIS_MEDICINE As Global.System.Data.DataColumn
        
        Private columnIS_DELETE As Global.System.Data.DataColumn
        
        Private columnPATIENT_NAME_ENG As Global.System.Data.DataColumn
        
        Private columnPATIENT_NAME_KH As Global.System.Data.DataColumn
        
        Private columnPATIENT_SEX As Global.System.Data.DataColumn
        
        Private columnPATIENT_AGE As Global.System.Data.DataColumn
        
        Private columnBY_DOCTOR As Global.System.Data.DataColumn
        
        Private columnDIAGNOSIS As Global.System.Data.DataColumn
        
        Private columnTOTAL_CONSULT As Global.System.Data.DataColumn
        
        Private columnTOTAL_MEDICINCE As Global.System.Data.DataColumn
        
        Private columnDEPOSIT As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "S_INVOICE_KS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVOICE_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVOICE_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WAITING_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWAITING_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVOICE_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVOICE_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PATIENT_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPATIENT_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUB_TOTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUB_TOTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EXCHANGE_RATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXCHANGE_RATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CASH_RECEIVEDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCASH_RECEIVED
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CHANGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCHANG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RECEIVED_BYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECEIVED_BY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTAL_DISCOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTAL_DISCOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DIS_CONSULTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIS_CONSULT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DIS_OPERATIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIS_OPERATION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DIS_MEDICINEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIS_MEDICINE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IS_DELETEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIS_DELETE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PATIENT_NAME_ENGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPATIENT_NAME_ENG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PATIENT_NAME_KHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPATIENT_NAME_KH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PATIENT_SEXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPATIENT_SEX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PATIENT_AGEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPATIENT_AGE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BY_DOCTORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBY_DOCTOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DIAGNOSISColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIAGNOSIS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTAL_CONSULTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTAL_CONSULT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTAL_MEDICINCEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTAL_MEDICINCE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DEPOSITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEPOSIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As S_INVOICE_KSRow
            Get
                Return CType(Me.Rows(index),S_INVOICE_KSRow)
            End Get
        End Property
        
        Public Event S_INVOICE_KSRowChanging As S_INVOICE_KSRowChangeEventHandler
        
        Public Event S_INVOICE_KSRowChanged As S_INVOICE_KSRowChangeEventHandler
        
        Public Event S_INVOICE_KSRowDeleting As S_INVOICE_KSRowChangeEventHandler
        
        Public Event S_INVOICE_KSRowDeleted As S_INVOICE_KSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddS_INVOICE_KSRow(ByVal row As S_INVOICE_KSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddS_INVOICE_KSRow( _
                    ByVal WAITING_ID As Decimal,  _
                    ByVal INVOICE_DATE As Date,  _
                    ByVal PATIENT_NO As Decimal,  _
                    ByVal TOTAL As Decimal,  _
                    ByVal SUB_TOTAL As Decimal,  _
                    ByVal EXCHANGE_RATE As Decimal,  _
                    ByVal CASH_RECEIVED As Decimal,  _
                    ByVal CHANG As Decimal,  _
                    ByVal RECEIVED_BY As String,  _
                    ByVal TOTAL_DISCOUNT As Decimal,  _
                    ByVal DIS_CONSULT As Decimal,  _
                    ByVal DIS_OPERATION As Decimal,  _
                    ByVal DIS_MEDICINE As Decimal,  _
                    ByVal IS_DELETE As String,  _
                    ByVal PATIENT_NAME_ENG As String,  _
                    ByVal PATIENT_NAME_KH As String,  _
                    ByVal PATIENT_SEX As String,  _
                    ByVal PATIENT_AGE As Decimal,  _
                    ByVal BY_DOCTOR As String,  _
                    ByVal DIAGNOSIS As String,  _
                    ByVal TOTAL_CONSULT As Decimal,  _
                    ByVal TOTAL_MEDICINCE As Decimal,  _
                    ByVal DEPOSIT As Decimal) As S_INVOICE_KSRow
            Dim rowS_INVOICE_KSRow As S_INVOICE_KSRow = CType(Me.NewRow,S_INVOICE_KSRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, WAITING_ID, INVOICE_DATE, PATIENT_NO, TOTAL, SUB_TOTAL, EXCHANGE_RATE, CASH_RECEIVED, CHANG, RECEIVED_BY, TOTAL_DISCOUNT, DIS_CONSULT, DIS_OPERATION, DIS_MEDICINE, IS_DELETE, PATIENT_NAME_ENG, PATIENT_NAME_KH, PATIENT_SEX, PATIENT_AGE, BY_DOCTOR, DIAGNOSIS, TOTAL_CONSULT, TOTAL_MEDICINCE, DEPOSIT}
            rowS_INVOICE_KSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowS_INVOICE_KSRow)
            Return rowS_INVOICE_KSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByINVOICE_ID(ByVal INVOICE_ID As Decimal) As S_INVOICE_KSRow
            Return CType(Me.Rows.Find(New Object() {INVOICE_ID}),S_INVOICE_KSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As S_INVOICE_KSDataTable = CType(MyBase.Clone,S_INVOICE_KSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New S_INVOICE_KSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnINVOICE_ID = MyBase.Columns("INVOICE_ID")
            Me.columnWAITING_ID = MyBase.Columns("WAITING_ID")
            Me.columnINVOICE_DATE = MyBase.Columns("INVOICE_DATE")
            Me.columnPATIENT_NO = MyBase.Columns("PATIENT_NO")
            Me.columnTOTAL = MyBase.Columns("TOTAL")
            Me.columnSUB_TOTAL = MyBase.Columns("SUB_TOTAL")
            Me.columnEXCHANGE_RATE = MyBase.Columns("EXCHANGE_RATE")
            Me.columnCASH_RECEIVED = MyBase.Columns("CASH_RECEIVED")
            Me.columnCHANG = MyBase.Columns("CHANG")
            Me.columnRECEIVED_BY = MyBase.Columns("RECEIVED_BY")
            Me.columnTOTAL_DISCOUNT = MyBase.Columns("TOTAL_DISCOUNT")
            Me.columnDIS_CONSULT = MyBase.Columns("DIS_CONSULT")
            Me.columnDIS_OPERATION = MyBase.Columns("DIS_OPERATION")
            Me.columnDIS_MEDICINE = MyBase.Columns("DIS_MEDICINE")
            Me.columnIS_DELETE = MyBase.Columns("IS_DELETE")
            Me.columnPATIENT_NAME_ENG = MyBase.Columns("PATIENT_NAME_ENG")
            Me.columnPATIENT_NAME_KH = MyBase.Columns("PATIENT_NAME_KH")
            Me.columnPATIENT_SEX = MyBase.Columns("PATIENT_SEX")
            Me.columnPATIENT_AGE = MyBase.Columns("PATIENT_AGE")
            Me.columnBY_DOCTOR = MyBase.Columns("BY_DOCTOR")
            Me.columnDIAGNOSIS = MyBase.Columns("DIAGNOSIS")
            Me.columnTOTAL_CONSULT = MyBase.Columns("TOTAL_CONSULT")
            Me.columnTOTAL_MEDICINCE = MyBase.Columns("TOTAL_MEDICINCE")
            Me.columnDEPOSIT = MyBase.Columns("DEPOSIT")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnINVOICE_ID = New Global.System.Data.DataColumn("INVOICE_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVOICE_ID)
            Me.columnWAITING_ID = New Global.System.Data.DataColumn("WAITING_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWAITING_ID)
            Me.columnINVOICE_DATE = New Global.System.Data.DataColumn("INVOICE_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVOICE_DATE)
            Me.columnPATIENT_NO = New Global.System.Data.DataColumn("PATIENT_NO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPATIENT_NO)
            Me.columnTOTAL = New Global.System.Data.DataColumn("TOTAL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTAL)
            Me.columnSUB_TOTAL = New Global.System.Data.DataColumn("SUB_TOTAL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUB_TOTAL)
            Me.columnEXCHANGE_RATE = New Global.System.Data.DataColumn("EXCHANGE_RATE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXCHANGE_RATE)
            Me.columnCASH_RECEIVED = New Global.System.Data.DataColumn("CASH_RECEIVED", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCASH_RECEIVED)
            Me.columnCHANG = New Global.System.Data.DataColumn("CHANG", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCHANG)
            Me.columnRECEIVED_BY = New Global.System.Data.DataColumn("RECEIVED_BY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECEIVED_BY)
            Me.columnTOTAL_DISCOUNT = New Global.System.Data.DataColumn("TOTAL_DISCOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTAL_DISCOUNT)
            Me.columnDIS_CONSULT = New Global.System.Data.DataColumn("DIS_CONSULT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIS_CONSULT)
            Me.columnDIS_OPERATION = New Global.System.Data.DataColumn("DIS_OPERATION", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIS_OPERATION)
            Me.columnDIS_MEDICINE = New Global.System.Data.DataColumn("DIS_MEDICINE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIS_MEDICINE)
            Me.columnIS_DELETE = New Global.System.Data.DataColumn("IS_DELETE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIS_DELETE)
            Me.columnPATIENT_NAME_ENG = New Global.System.Data.DataColumn("PATIENT_NAME_ENG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPATIENT_NAME_ENG)
            Me.columnPATIENT_NAME_KH = New Global.System.Data.DataColumn("PATIENT_NAME_KH", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPATIENT_NAME_KH)
            Me.columnPATIENT_SEX = New Global.System.Data.DataColumn("PATIENT_SEX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPATIENT_SEX)
            Me.columnPATIENT_AGE = New Global.System.Data.DataColumn("PATIENT_AGE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPATIENT_AGE)
            Me.columnBY_DOCTOR = New Global.System.Data.DataColumn("BY_DOCTOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBY_DOCTOR)
            Me.columnDIAGNOSIS = New Global.System.Data.DataColumn("DIAGNOSIS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIAGNOSIS)
            Me.columnTOTAL_CONSULT = New Global.System.Data.DataColumn("TOTAL_CONSULT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTAL_CONSULT)
            Me.columnTOTAL_MEDICINCE = New Global.System.Data.DataColumn("TOTAL_MEDICINCE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTAL_MEDICINCE)
            Me.columnDEPOSIT = New Global.System.Data.DataColumn("DEPOSIT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEPOSIT)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnINVOICE_ID}, true))
            Me.columnINVOICE_ID.AutoIncrement = true
            Me.columnINVOICE_ID.AutoIncrementSeed = -1
            Me.columnINVOICE_ID.AutoIncrementStep = -1
            Me.columnINVOICE_ID.AllowDBNull = false
            Me.columnINVOICE_ID.ReadOnly = true
            Me.columnINVOICE_ID.Unique = true
            Me.columnRECEIVED_BY.MaxLength = 50
            Me.columnIS_DELETE.MaxLength = 1
            Me.columnPATIENT_NAME_ENG.MaxLength = 50
            Me.columnPATIENT_NAME_KH.MaxLength = 50
            Me.columnPATIENT_SEX.MaxLength = 1
            Me.columnBY_DOCTOR.MaxLength = 50
            Me.columnDIAGNOSIS.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewS_INVOICE_KSRow() As S_INVOICE_KSRow
            Return CType(Me.NewRow,S_INVOICE_KSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New S_INVOICE_KSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(S_INVOICE_KSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.S_INVOICE_KSRowChangedEvent) Is Nothing) Then
                RaiseEvent S_INVOICE_KSRowChanged(Me, New S_INVOICE_KSRowChangeEvent(CType(e.Row,S_INVOICE_KSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.S_INVOICE_KSRowChangingEvent) Is Nothing) Then
                RaiseEvent S_INVOICE_KSRowChanging(Me, New S_INVOICE_KSRowChangeEvent(CType(e.Row,S_INVOICE_KSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.S_INVOICE_KSRowDeletedEvent) Is Nothing) Then
                RaiseEvent S_INVOICE_KSRowDeleted(Me, New S_INVOICE_KSRowChangeEvent(CType(e.Row,S_INVOICE_KSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.S_INVOICE_KSRowDeletingEvent) Is Nothing) Then
                RaiseEvent S_INVOICE_KSRowDeleting(Me, New S_INVOICE_KSRowChangeEvent(CType(e.Row,S_INVOICE_KSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveS_INVOICE_KSRow(ByVal row As S_INVOICE_KSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS_KSPAYMENT = New DS_KSPAYMENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "S_INVOICE_KSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class S_INVOICE_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of S_INVOICE_DETAILRow)
        
        Private columnIN_DETAIL_ID As Global.System.Data.DataColumn
        
        Private columnINVOICE_NO As Global.System.Data.DataColumn
        
        Private columnDESCRIPTION As Global.System.Data.DataColumn
        
        Private columnQTY As Global.System.Data.DataColumn
        
        Private columnUNIT As Global.System.Data.DataColumn
        
        Private columnPRICE As Global.System.Data.DataColumn
        
        Private columnSUB_TOTAL As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "S_INVOICE_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IN_DETAIL_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIN_DETAIL_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVOICE_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVOICE_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESCRIPTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCRIPTION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UNITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRICEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRICE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUB_TOTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUB_TOTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As S_INVOICE_DETAILRow
            Get
                Return CType(Me.Rows(index),S_INVOICE_DETAILRow)
            End Get
        End Property
        
        Public Event S_INVOICE_DETAILRowChanging As S_INVOICE_DETAILRowChangeEventHandler
        
        Public Event S_INVOICE_DETAILRowChanged As S_INVOICE_DETAILRowChangeEventHandler
        
        Public Event S_INVOICE_DETAILRowDeleting As S_INVOICE_DETAILRowChangeEventHandler
        
        Public Event S_INVOICE_DETAILRowDeleted As S_INVOICE_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddS_INVOICE_DETAILRow(ByVal row As S_INVOICE_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddS_INVOICE_DETAILRow(ByVal parentS_INVOICE_KSRowByS_INVOICE_KS_S_INVOICE_DETAIL As S_INVOICE_KSRow, ByVal DESCRIPTION As String, ByVal QTY As String, ByVal UNIT As String, ByVal PRICE As Decimal, ByVal SUB_TOTAL As Decimal) As S_INVOICE_DETAILRow
            Dim rowS_INVOICE_DETAILRow As S_INVOICE_DETAILRow = CType(Me.NewRow,S_INVOICE_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, DESCRIPTION, QTY, UNIT, PRICE, SUB_TOTAL}
            If (Not (parentS_INVOICE_KSRowByS_INVOICE_KS_S_INVOICE_DETAIL) Is Nothing) Then
                columnValuesArray(1) = parentS_INVOICE_KSRowByS_INVOICE_KS_S_INVOICE_DETAIL(0)
            End If
            rowS_INVOICE_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowS_INVOICE_DETAILRow)
            Return rowS_INVOICE_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByIN_DETAIL_ID(ByVal IN_DETAIL_ID As Decimal) As S_INVOICE_DETAILRow
            Return CType(Me.Rows.Find(New Object() {IN_DETAIL_ID}),S_INVOICE_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As S_INVOICE_DETAILDataTable = CType(MyBase.Clone,S_INVOICE_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New S_INVOICE_DETAILDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIN_DETAIL_ID = MyBase.Columns("IN_DETAIL_ID")
            Me.columnINVOICE_NO = MyBase.Columns("INVOICE_NO")
            Me.columnDESCRIPTION = MyBase.Columns("DESCRIPTION")
            Me.columnQTY = MyBase.Columns("QTY")
            Me.columnUNIT = MyBase.Columns("UNIT")
            Me.columnPRICE = MyBase.Columns("PRICE")
            Me.columnSUB_TOTAL = MyBase.Columns("SUB_TOTAL")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIN_DETAIL_ID = New Global.System.Data.DataColumn("IN_DETAIL_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIN_DETAIL_ID)
            Me.columnINVOICE_NO = New Global.System.Data.DataColumn("INVOICE_NO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVOICE_NO)
            Me.columnDESCRIPTION = New Global.System.Data.DataColumn("DESCRIPTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCRIPTION)
            Me.columnQTY = New Global.System.Data.DataColumn("QTY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQTY)
            Me.columnUNIT = New Global.System.Data.DataColumn("UNIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNIT)
            Me.columnPRICE = New Global.System.Data.DataColumn("PRICE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRICE)
            Me.columnSUB_TOTAL = New Global.System.Data.DataColumn("SUB_TOTAL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUB_TOTAL)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIN_DETAIL_ID}, true))
            Me.columnIN_DETAIL_ID.AutoIncrement = true
            Me.columnIN_DETAIL_ID.AutoIncrementSeed = -1
            Me.columnIN_DETAIL_ID.AutoIncrementStep = -1
            Me.columnIN_DETAIL_ID.AllowDBNull = false
            Me.columnIN_DETAIL_ID.ReadOnly = true
            Me.columnIN_DETAIL_ID.Unique = true
            Me.columnDESCRIPTION.MaxLength = 150
            Me.columnQTY.MaxLength = 50
            Me.columnUNIT.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewS_INVOICE_DETAILRow() As S_INVOICE_DETAILRow
            Return CType(Me.NewRow,S_INVOICE_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New S_INVOICE_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(S_INVOICE_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.S_INVOICE_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent S_INVOICE_DETAILRowChanged(Me, New S_INVOICE_DETAILRowChangeEvent(CType(e.Row,S_INVOICE_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.S_INVOICE_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent S_INVOICE_DETAILRowChanging(Me, New S_INVOICE_DETAILRowChangeEvent(CType(e.Row,S_INVOICE_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.S_INVOICE_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent S_INVOICE_DETAILRowDeleted(Me, New S_INVOICE_DETAILRowChangeEvent(CType(e.Row,S_INVOICE_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.S_INVOICE_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent S_INVOICE_DETAILRowDeleting(Me, New S_INVOICE_DETAILRowChangeEvent(CType(e.Row,S_INVOICE_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveS_INVOICE_DETAILRow(ByVal row As S_INVOICE_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS_KSPAYMENT = New DS_KSPAYMENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "S_INVOICE_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class S_INVOICE_KSR_VIEWDataTable
        Inherits Global.System.Data.TypedTableBase(Of S_INVOICE_KSR_VIEWRow)
        
        Private columnINVOICE_ID As Global.System.Data.DataColumn
        
        Private columnWAITING_ID As Global.System.Data.DataColumn
        
        Private columnINVOICE_DATE As Global.System.Data.DataColumn
        
        Private columnPATIENT_NO As Global.System.Data.DataColumn
        
        Private columnPATIENT_NAME_ENG As Global.System.Data.DataColumn
        
        Private columnPATIENT_NAME_KH As Global.System.Data.DataColumn
        
        Private columnPATIENT_SEX As Global.System.Data.DataColumn
        
        Private columnPATIENT_AGE As Global.System.Data.DataColumn
        
        Private columnTOTAL As Global.System.Data.DataColumn
        
        Private columnSUB_TOTAL As Global.System.Data.DataColumn
        
        Private columnEXCHANGE_RATE As Global.System.Data.DataColumn
        
        Private columnCASH_RECEIVED As Global.System.Data.DataColumn
        
        Private columnCHANG As Global.System.Data.DataColumn
        
        Private columnRECEIVED_BY As Global.System.Data.DataColumn
        
        Private columnTOTAL_DISCOUNT As Global.System.Data.DataColumn
        
        Private columnDIS_CONSULT As Global.System.Data.DataColumn
        
        Private columnDIS_OPERATION As Global.System.Data.DataColumn
        
        Private columnDIS_MEDICINE As Global.System.Data.DataColumn
        
        Private columnIS_DELETE As Global.System.Data.DataColumn
        
        Private columnIN_DETAIL_ID As Global.System.Data.DataColumn
        
        Private columnDESCRIPTION As Global.System.Data.DataColumn
        
        Private columnQTY As Global.System.Data.DataColumn
        
        Private columnUNIT As Global.System.Data.DataColumn
        
        Private columnPRICE As Global.System.Data.DataColumn
        
        Private columnExpr1 As Global.System.Data.DataColumn
        
        Private columnIS_GLASSES As Global.System.Data.DataColumn
        
        Private columnTOTAL_CONSULT As Global.System.Data.DataColumn
        
        Private columnTOTAL_MEDICINCE As Global.System.Data.DataColumn
        
        Private columnDEPOSIT As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "S_INVOICE_KSR_VIEW"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVOICE_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVOICE_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WAITING_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWAITING_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVOICE_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVOICE_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PATIENT_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPATIENT_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PATIENT_NAME_ENGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPATIENT_NAME_ENG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PATIENT_NAME_KHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPATIENT_NAME_KH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PATIENT_SEXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPATIENT_SEX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PATIENT_AGEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPATIENT_AGE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUB_TOTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUB_TOTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EXCHANGE_RATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXCHANGE_RATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CASH_RECEIVEDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCASH_RECEIVED
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CHANGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCHANG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RECEIVED_BYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRECEIVED_BY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTAL_DISCOUNTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTAL_DISCOUNT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DIS_CONSULTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIS_CONSULT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DIS_OPERATIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIS_OPERATION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DIS_MEDICINEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIS_MEDICINE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IS_DELETEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIS_DELETE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IN_DETAIL_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIN_DETAIL_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESCRIPTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCRIPTION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UNITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRICEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRICE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Expr1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnExpr1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IS_GLASSESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIS_GLASSES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTAL_CONSULTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTAL_CONSULT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTAL_MEDICINCEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTAL_MEDICINCE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DEPOSITColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEPOSIT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As S_INVOICE_KSR_VIEWRow
            Get
                Return CType(Me.Rows(index),S_INVOICE_KSR_VIEWRow)
            End Get
        End Property
        
        Public Event S_INVOICE_KSR_VIEWRowChanging As S_INVOICE_KSR_VIEWRowChangeEventHandler
        
        Public Event S_INVOICE_KSR_VIEWRowChanged As S_INVOICE_KSR_VIEWRowChangeEventHandler
        
        Public Event S_INVOICE_KSR_VIEWRowDeleting As S_INVOICE_KSR_VIEWRowChangeEventHandler
        
        Public Event S_INVOICE_KSR_VIEWRowDeleted As S_INVOICE_KSR_VIEWRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddS_INVOICE_KSR_VIEWRow(ByVal row As S_INVOICE_KSR_VIEWRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddS_INVOICE_KSR_VIEWRow( _
                    ByVal INVOICE_ID As Decimal,  _
                    ByVal WAITING_ID As Decimal,  _
                    ByVal INVOICE_DATE As Date,  _
                    ByVal PATIENT_NO As Decimal,  _
                    ByVal PATIENT_NAME_ENG As String,  _
                    ByVal PATIENT_NAME_KH As String,  _
                    ByVal PATIENT_SEX As String,  _
                    ByVal PATIENT_AGE As Decimal,  _
                    ByVal TOTAL As Decimal,  _
                    ByVal SUB_TOTAL As Decimal,  _
                    ByVal EXCHANGE_RATE As Decimal,  _
                    ByVal CASH_RECEIVED As Decimal,  _
                    ByVal CHANG As Decimal,  _
                    ByVal RECEIVED_BY As String,  _
                    ByVal TOTAL_DISCOUNT As Decimal,  _
                    ByVal DIS_CONSULT As Decimal,  _
                    ByVal DIS_OPERATION As Decimal,  _
                    ByVal DIS_MEDICINE As Decimal,  _
                    ByVal IS_DELETE As String,  _
                    ByVal IN_DETAIL_ID As Decimal,  _
                    ByVal DESCRIPTION As String,  _
                    ByVal QTY As String,  _
                    ByVal UNIT As String,  _
                    ByVal PRICE As Decimal,  _
                    ByVal Expr1 As Decimal,  _
                    ByVal IS_GLASSES As Boolean,  _
                    ByVal TOTAL_CONSULT As Decimal,  _
                    ByVal TOTAL_MEDICINCE As Decimal,  _
                    ByVal DEPOSIT As Decimal) As S_INVOICE_KSR_VIEWRow
            Dim rowS_INVOICE_KSR_VIEWRow As S_INVOICE_KSR_VIEWRow = CType(Me.NewRow,S_INVOICE_KSR_VIEWRow)
            Dim columnValuesArray() As Object = New Object() {INVOICE_ID, WAITING_ID, INVOICE_DATE, PATIENT_NO, PATIENT_NAME_ENG, PATIENT_NAME_KH, PATIENT_SEX, PATIENT_AGE, TOTAL, SUB_TOTAL, EXCHANGE_RATE, CASH_RECEIVED, CHANG, RECEIVED_BY, TOTAL_DISCOUNT, DIS_CONSULT, DIS_OPERATION, DIS_MEDICINE, IS_DELETE, IN_DETAIL_ID, DESCRIPTION, QTY, UNIT, PRICE, Expr1, IS_GLASSES, TOTAL_CONSULT, TOTAL_MEDICINCE, DEPOSIT}
            rowS_INVOICE_KSR_VIEWRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowS_INVOICE_KSR_VIEWRow)
            Return rowS_INVOICE_KSR_VIEWRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As S_INVOICE_KSR_VIEWDataTable = CType(MyBase.Clone,S_INVOICE_KSR_VIEWDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New S_INVOICE_KSR_VIEWDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnINVOICE_ID = MyBase.Columns("INVOICE_ID")
            Me.columnWAITING_ID = MyBase.Columns("WAITING_ID")
            Me.columnINVOICE_DATE = MyBase.Columns("INVOICE_DATE")
            Me.columnPATIENT_NO = MyBase.Columns("PATIENT_NO")
            Me.columnPATIENT_NAME_ENG = MyBase.Columns("PATIENT_NAME_ENG")
            Me.columnPATIENT_NAME_KH = MyBase.Columns("PATIENT_NAME_KH")
            Me.columnPATIENT_SEX = MyBase.Columns("PATIENT_SEX")
            Me.columnPATIENT_AGE = MyBase.Columns("PATIENT_AGE")
            Me.columnTOTAL = MyBase.Columns("TOTAL")
            Me.columnSUB_TOTAL = MyBase.Columns("SUB_TOTAL")
            Me.columnEXCHANGE_RATE = MyBase.Columns("EXCHANGE_RATE")
            Me.columnCASH_RECEIVED = MyBase.Columns("CASH_RECEIVED")
            Me.columnCHANG = MyBase.Columns("CHANG")
            Me.columnRECEIVED_BY = MyBase.Columns("RECEIVED_BY")
            Me.columnTOTAL_DISCOUNT = MyBase.Columns("TOTAL_DISCOUNT")
            Me.columnDIS_CONSULT = MyBase.Columns("DIS_CONSULT")
            Me.columnDIS_OPERATION = MyBase.Columns("DIS_OPERATION")
            Me.columnDIS_MEDICINE = MyBase.Columns("DIS_MEDICINE")
            Me.columnIS_DELETE = MyBase.Columns("IS_DELETE")
            Me.columnIN_DETAIL_ID = MyBase.Columns("IN_DETAIL_ID")
            Me.columnDESCRIPTION = MyBase.Columns("DESCRIPTION")
            Me.columnQTY = MyBase.Columns("QTY")
            Me.columnUNIT = MyBase.Columns("UNIT")
            Me.columnPRICE = MyBase.Columns("PRICE")
            Me.columnExpr1 = MyBase.Columns("Expr1")
            Me.columnIS_GLASSES = MyBase.Columns("IS_GLASSES")
            Me.columnTOTAL_CONSULT = MyBase.Columns("TOTAL_CONSULT")
            Me.columnTOTAL_MEDICINCE = MyBase.Columns("TOTAL_MEDICINCE")
            Me.columnDEPOSIT = MyBase.Columns("DEPOSIT")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnINVOICE_ID = New Global.System.Data.DataColumn("INVOICE_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVOICE_ID)
            Me.columnWAITING_ID = New Global.System.Data.DataColumn("WAITING_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWAITING_ID)
            Me.columnINVOICE_DATE = New Global.System.Data.DataColumn("INVOICE_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVOICE_DATE)
            Me.columnPATIENT_NO = New Global.System.Data.DataColumn("PATIENT_NO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPATIENT_NO)
            Me.columnPATIENT_NAME_ENG = New Global.System.Data.DataColumn("PATIENT_NAME_ENG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPATIENT_NAME_ENG)
            Me.columnPATIENT_NAME_KH = New Global.System.Data.DataColumn("PATIENT_NAME_KH", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPATIENT_NAME_KH)
            Me.columnPATIENT_SEX = New Global.System.Data.DataColumn("PATIENT_SEX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPATIENT_SEX)
            Me.columnPATIENT_AGE = New Global.System.Data.DataColumn("PATIENT_AGE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPATIENT_AGE)
            Me.columnTOTAL = New Global.System.Data.DataColumn("TOTAL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTAL)
            Me.columnSUB_TOTAL = New Global.System.Data.DataColumn("SUB_TOTAL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUB_TOTAL)
            Me.columnEXCHANGE_RATE = New Global.System.Data.DataColumn("EXCHANGE_RATE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXCHANGE_RATE)
            Me.columnCASH_RECEIVED = New Global.System.Data.DataColumn("CASH_RECEIVED", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCASH_RECEIVED)
            Me.columnCHANG = New Global.System.Data.DataColumn("CHANG", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCHANG)
            Me.columnRECEIVED_BY = New Global.System.Data.DataColumn("RECEIVED_BY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRECEIVED_BY)
            Me.columnTOTAL_DISCOUNT = New Global.System.Data.DataColumn("TOTAL_DISCOUNT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTAL_DISCOUNT)
            Me.columnDIS_CONSULT = New Global.System.Data.DataColumn("DIS_CONSULT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIS_CONSULT)
            Me.columnDIS_OPERATION = New Global.System.Data.DataColumn("DIS_OPERATION", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIS_OPERATION)
            Me.columnDIS_MEDICINE = New Global.System.Data.DataColumn("DIS_MEDICINE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIS_MEDICINE)
            Me.columnIS_DELETE = New Global.System.Data.DataColumn("IS_DELETE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIS_DELETE)
            Me.columnIN_DETAIL_ID = New Global.System.Data.DataColumn("IN_DETAIL_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIN_DETAIL_ID)
            Me.columnDESCRIPTION = New Global.System.Data.DataColumn("DESCRIPTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCRIPTION)
            Me.columnQTY = New Global.System.Data.DataColumn("QTY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQTY)
            Me.columnUNIT = New Global.System.Data.DataColumn("UNIT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNIT)
            Me.columnPRICE = New Global.System.Data.DataColumn("PRICE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRICE)
            Me.columnExpr1 = New Global.System.Data.DataColumn("Expr1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExpr1)
            Me.columnIS_GLASSES = New Global.System.Data.DataColumn("IS_GLASSES", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIS_GLASSES)
            Me.columnTOTAL_CONSULT = New Global.System.Data.DataColumn("TOTAL_CONSULT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTAL_CONSULT)
            Me.columnTOTAL_MEDICINCE = New Global.System.Data.DataColumn("TOTAL_MEDICINCE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTAL_MEDICINCE)
            Me.columnDEPOSIT = New Global.System.Data.DataColumn("DEPOSIT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEPOSIT)
            Me.columnINVOICE_ID.AllowDBNull = false
            Me.columnPATIENT_NAME_ENG.MaxLength = 50
            Me.columnPATIENT_NAME_KH.MaxLength = 50
            Me.columnPATIENT_SEX.MaxLength = 1
            Me.columnRECEIVED_BY.MaxLength = 50
            Me.columnIS_DELETE.MaxLength = 1
            Me.columnIN_DETAIL_ID.AllowDBNull = false
            Me.columnDESCRIPTION.MaxLength = 150
            Me.columnQTY.MaxLength = 50
            Me.columnUNIT.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewS_INVOICE_KSR_VIEWRow() As S_INVOICE_KSR_VIEWRow
            Return CType(Me.NewRow,S_INVOICE_KSR_VIEWRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New S_INVOICE_KSR_VIEWRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(S_INVOICE_KSR_VIEWRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.S_INVOICE_KSR_VIEWRowChangedEvent) Is Nothing) Then
                RaiseEvent S_INVOICE_KSR_VIEWRowChanged(Me, New S_INVOICE_KSR_VIEWRowChangeEvent(CType(e.Row,S_INVOICE_KSR_VIEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.S_INVOICE_KSR_VIEWRowChangingEvent) Is Nothing) Then
                RaiseEvent S_INVOICE_KSR_VIEWRowChanging(Me, New S_INVOICE_KSR_VIEWRowChangeEvent(CType(e.Row,S_INVOICE_KSR_VIEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.S_INVOICE_KSR_VIEWRowDeletedEvent) Is Nothing) Then
                RaiseEvent S_INVOICE_KSR_VIEWRowDeleted(Me, New S_INVOICE_KSR_VIEWRowChangeEvent(CType(e.Row,S_INVOICE_KSR_VIEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.S_INVOICE_KSR_VIEWRowDeletingEvent) Is Nothing) Then
                RaiseEvent S_INVOICE_KSR_VIEWRowDeleting(Me, New S_INVOICE_KSR_VIEWRowChangeEvent(CType(e.Row,S_INVOICE_KSR_VIEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveS_INVOICE_KSR_VIEWRow(ByVal row As S_INVOICE_KSR_VIEWRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS_KSPAYMENT = New DS_KSPAYMENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "S_INVOICE_KSR_VIEWDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class S_TEM_LISTMEDICINE_PAYMENTDataTable
        Inherits Global.System.Data.TypedTableBase(Of S_TEM_LISTMEDICINE_PAYMENTRow)
        
        Private columnWAITING_NO_MEDICINE As Global.System.Data.DataColumn
        
        Private columnWAITING_NO As Global.System.Data.DataColumn
        
        Private columnMEDICINE_ID As Global.System.Data.DataColumn
        
        Private columnMEDICINE_NAME As Global.System.Data.DataColumn
        
        Private columnMEDICINE_PRICE As Global.System.Data.DataColumn
        
        Private columnMEDICINE_QTY As Global.System.Data.DataColumn
        
        Private columnMEDICINE_TOTAL_PRICE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "S_TEM_LISTMEDICINE_PAYMENT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WAITING_NO_MEDICINEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWAITING_NO_MEDICINE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WAITING_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWAITING_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MEDICINE_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMEDICINE_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MEDICINE_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMEDICINE_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MEDICINE_PRICEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMEDICINE_PRICE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MEDICINE_QTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMEDICINE_QTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MEDICINE_TOTAL_PRICEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMEDICINE_TOTAL_PRICE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As S_TEM_LISTMEDICINE_PAYMENTRow
            Get
                Return CType(Me.Rows(index),S_TEM_LISTMEDICINE_PAYMENTRow)
            End Get
        End Property
        
        Public Event S_TEM_LISTMEDICINE_PAYMENTRowChanging As S_TEM_LISTMEDICINE_PAYMENTRowChangeEventHandler
        
        Public Event S_TEM_LISTMEDICINE_PAYMENTRowChanged As S_TEM_LISTMEDICINE_PAYMENTRowChangeEventHandler
        
        Public Event S_TEM_LISTMEDICINE_PAYMENTRowDeleting As S_TEM_LISTMEDICINE_PAYMENTRowChangeEventHandler
        
        Public Event S_TEM_LISTMEDICINE_PAYMENTRowDeleted As S_TEM_LISTMEDICINE_PAYMENTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddS_TEM_LISTMEDICINE_PAYMENTRow(ByVal row As S_TEM_LISTMEDICINE_PAYMENTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddS_TEM_LISTMEDICINE_PAYMENTRow(ByVal WAITING_NO As Decimal, ByVal MEDICINE_ID As Decimal, ByVal MEDICINE_NAME As String, ByVal MEDICINE_PRICE As Decimal, ByVal MEDICINE_QTY As Decimal, ByVal MEDICINE_TOTAL_PRICE As Decimal) As S_TEM_LISTMEDICINE_PAYMENTRow
            Dim rowS_TEM_LISTMEDICINE_PAYMENTRow As S_TEM_LISTMEDICINE_PAYMENTRow = CType(Me.NewRow,S_TEM_LISTMEDICINE_PAYMENTRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, WAITING_NO, MEDICINE_ID, MEDICINE_NAME, MEDICINE_PRICE, MEDICINE_QTY, MEDICINE_TOTAL_PRICE}
            rowS_TEM_LISTMEDICINE_PAYMENTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowS_TEM_LISTMEDICINE_PAYMENTRow)
            Return rowS_TEM_LISTMEDICINE_PAYMENTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByWAITING_NO_MEDICINE(ByVal WAITING_NO_MEDICINE As Decimal) As S_TEM_LISTMEDICINE_PAYMENTRow
            Return CType(Me.Rows.Find(New Object() {WAITING_NO_MEDICINE}),S_TEM_LISTMEDICINE_PAYMENTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As S_TEM_LISTMEDICINE_PAYMENTDataTable = CType(MyBase.Clone,S_TEM_LISTMEDICINE_PAYMENTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New S_TEM_LISTMEDICINE_PAYMENTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnWAITING_NO_MEDICINE = MyBase.Columns("WAITING_NO_MEDICINE")
            Me.columnWAITING_NO = MyBase.Columns("WAITING_NO")
            Me.columnMEDICINE_ID = MyBase.Columns("MEDICINE_ID")
            Me.columnMEDICINE_NAME = MyBase.Columns("MEDICINE_NAME")
            Me.columnMEDICINE_PRICE = MyBase.Columns("MEDICINE_PRICE")
            Me.columnMEDICINE_QTY = MyBase.Columns("MEDICINE_QTY")
            Me.columnMEDICINE_TOTAL_PRICE = MyBase.Columns("MEDICINE_TOTAL_PRICE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnWAITING_NO_MEDICINE = New Global.System.Data.DataColumn("WAITING_NO_MEDICINE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWAITING_NO_MEDICINE)
            Me.columnWAITING_NO = New Global.System.Data.DataColumn("WAITING_NO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWAITING_NO)
            Me.columnMEDICINE_ID = New Global.System.Data.DataColumn("MEDICINE_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMEDICINE_ID)
            Me.columnMEDICINE_NAME = New Global.System.Data.DataColumn("MEDICINE_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMEDICINE_NAME)
            Me.columnMEDICINE_PRICE = New Global.System.Data.DataColumn("MEDICINE_PRICE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMEDICINE_PRICE)
            Me.columnMEDICINE_QTY = New Global.System.Data.DataColumn("MEDICINE_QTY", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMEDICINE_QTY)
            Me.columnMEDICINE_TOTAL_PRICE = New Global.System.Data.DataColumn("MEDICINE_TOTAL_PRICE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMEDICINE_TOTAL_PRICE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnWAITING_NO_MEDICINE}, true))
            Me.columnWAITING_NO_MEDICINE.AutoIncrement = true
            Me.columnWAITING_NO_MEDICINE.AutoIncrementSeed = -1
            Me.columnWAITING_NO_MEDICINE.AutoIncrementStep = -1
            Me.columnWAITING_NO_MEDICINE.AllowDBNull = false
            Me.columnWAITING_NO_MEDICINE.ReadOnly = true
            Me.columnWAITING_NO_MEDICINE.Unique = true
            Me.columnMEDICINE_NAME.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewS_TEM_LISTMEDICINE_PAYMENTRow() As S_TEM_LISTMEDICINE_PAYMENTRow
            Return CType(Me.NewRow,S_TEM_LISTMEDICINE_PAYMENTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New S_TEM_LISTMEDICINE_PAYMENTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(S_TEM_LISTMEDICINE_PAYMENTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.S_TEM_LISTMEDICINE_PAYMENTRowChangedEvent) Is Nothing) Then
                RaiseEvent S_TEM_LISTMEDICINE_PAYMENTRowChanged(Me, New S_TEM_LISTMEDICINE_PAYMENTRowChangeEvent(CType(e.Row,S_TEM_LISTMEDICINE_PAYMENTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.S_TEM_LISTMEDICINE_PAYMENTRowChangingEvent) Is Nothing) Then
                RaiseEvent S_TEM_LISTMEDICINE_PAYMENTRowChanging(Me, New S_TEM_LISTMEDICINE_PAYMENTRowChangeEvent(CType(e.Row,S_TEM_LISTMEDICINE_PAYMENTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.S_TEM_LISTMEDICINE_PAYMENTRowDeletedEvent) Is Nothing) Then
                RaiseEvent S_TEM_LISTMEDICINE_PAYMENTRowDeleted(Me, New S_TEM_LISTMEDICINE_PAYMENTRowChangeEvent(CType(e.Row,S_TEM_LISTMEDICINE_PAYMENTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.S_TEM_LISTMEDICINE_PAYMENTRowDeletingEvent) Is Nothing) Then
                RaiseEvent S_TEM_LISTMEDICINE_PAYMENTRowDeleting(Me, New S_TEM_LISTMEDICINE_PAYMENTRowChangeEvent(CType(e.Row,S_TEM_LISTMEDICINE_PAYMENTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveS_TEM_LISTMEDICINE_PAYMENTRow(ByVal row As S_TEM_LISTMEDICINE_PAYMENTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS_KSPAYMENT = New DS_KSPAYMENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "S_TEM_LISTMEDICINE_PAYMENTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblItemDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblItemRow)
        
        Private columnItemID As Global.System.Data.DataColumn
        
        Private columnItemCode As Global.System.Data.DataColumn
        
        Private columnCateID As Global.System.Data.DataColumn
        
        Private columnItemUnitID As Global.System.Data.DataColumn
        
        Private columnLabourFacID As Global.System.Data.DataColumn
        
        Private columnItemName As Global.System.Data.DataColumn
        
        Private columnItemDescription As Global.System.Data.DataColumn
        
        Private columnItemRegisterDate As Global.System.Data.DataColumn
        
        Private columnBarcode As Global.System.Data.DataColumn
        
        Private columnVendorID As Global.System.Data.DataColumn
        
        Private columnContainerID As Global.System.Data.DataColumn
        
        Private columnUnitPrice As Global.System.Data.DataColumn
        
        Private columnPicture As Global.System.Data.DataColumn
        
        Private columnDonatorID As Global.System.Data.DataColumn
        
        Private columnIsMedicine As Global.System.Data.DataColumn
        
        Private columnCurrencyID As Global.System.Data.DataColumn
        
        Private columnDateExpired As Global.System.Data.DataColumn
        
        Private columnCountryID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblItem"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CateIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCateID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemUnitIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemUnitID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LabourFacIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLabourFacID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemDescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemRegisterDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemRegisterDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BarcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBarcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VendorIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVendorID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ContainerIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContainerID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnitPriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnitPrice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PictureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPicture
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DonatorIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDonatorID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsMedicineColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsMedicine
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CurrencyIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCurrencyID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateExpiredColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateExpired
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CountryIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCountryID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblItemRow
            Get
                Return CType(Me.Rows(index),tblItemRow)
            End Get
        End Property
        
        Public Event tblItemRowChanging As tblItemRowChangeEventHandler
        
        Public Event tblItemRowChanged As tblItemRowChangeEventHandler
        
        Public Event tblItemRowDeleting As tblItemRowChangeEventHandler
        
        Public Event tblItemRowDeleted As tblItemRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtblItemRow(ByVal row As tblItemRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtblItemRow( _
                    ByVal ItemCode As String,  _
                    ByVal CateID As Integer,  _
                    ByVal ItemUnitID As Integer,  _
                    ByVal LabourFacID As Integer,  _
                    ByVal ItemName As String,  _
                    ByVal ItemDescription As String,  _
                    ByVal ItemRegisterDate As Date,  _
                    ByVal Barcode As String,  _
                    ByVal VendorID As Integer,  _
                    ByVal ContainerID As Integer,  _
                    ByVal UnitPrice As Decimal,  _
                    ByVal Picture() As Byte,  _
                    ByVal DonatorID As Integer,  _
                    ByVal IsMedicine As Boolean,  _
                    ByVal CurrencyID As Decimal,  _
                    ByVal DateExpired As Date,  _
                    ByVal CountryID As Decimal) As tblItemRow
            Dim rowtblItemRow As tblItemRow = CType(Me.NewRow,tblItemRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, ItemCode, CateID, ItemUnitID, LabourFacID, ItemName, ItemDescription, ItemRegisterDate, Barcode, VendorID, ContainerID, UnitPrice, Picture, DonatorID, IsMedicine, CurrencyID, DateExpired, CountryID}
            rowtblItemRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblItemRow)
            Return rowtblItemRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByItemID(ByVal ItemID As Integer) As tblItemRow
            Return CType(Me.Rows.Find(New Object() {ItemID}),tblItemRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblItemDataTable = CType(MyBase.Clone,tblItemDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblItemDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnItemID = MyBase.Columns("ItemID")
            Me.columnItemCode = MyBase.Columns("ItemCode")
            Me.columnCateID = MyBase.Columns("CateID")
            Me.columnItemUnitID = MyBase.Columns("ItemUnitID")
            Me.columnLabourFacID = MyBase.Columns("LabourFacID")
            Me.columnItemName = MyBase.Columns("ItemName")
            Me.columnItemDescription = MyBase.Columns("ItemDescription")
            Me.columnItemRegisterDate = MyBase.Columns("ItemRegisterDate")
            Me.columnBarcode = MyBase.Columns("Barcode")
            Me.columnVendorID = MyBase.Columns("VendorID")
            Me.columnContainerID = MyBase.Columns("ContainerID")
            Me.columnUnitPrice = MyBase.Columns("UnitPrice")
            Me.columnPicture = MyBase.Columns("Picture")
            Me.columnDonatorID = MyBase.Columns("DonatorID")
            Me.columnIsMedicine = MyBase.Columns("IsMedicine")
            Me.columnCurrencyID = MyBase.Columns("CurrencyID")
            Me.columnDateExpired = MyBase.Columns("DateExpired")
            Me.columnCountryID = MyBase.Columns("CountryID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnItemID = New Global.System.Data.DataColumn("ItemID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemID)
            Me.columnItemCode = New Global.System.Data.DataColumn("ItemCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemCode)
            Me.columnCateID = New Global.System.Data.DataColumn("CateID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCateID)
            Me.columnItemUnitID = New Global.System.Data.DataColumn("ItemUnitID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemUnitID)
            Me.columnLabourFacID = New Global.System.Data.DataColumn("LabourFacID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLabourFacID)
            Me.columnItemName = New Global.System.Data.DataColumn("ItemName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemName)
            Me.columnItemDescription = New Global.System.Data.DataColumn("ItemDescription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemDescription)
            Me.columnItemRegisterDate = New Global.System.Data.DataColumn("ItemRegisterDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemRegisterDate)
            Me.columnBarcode = New Global.System.Data.DataColumn("Barcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBarcode)
            Me.columnVendorID = New Global.System.Data.DataColumn("VendorID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVendorID)
            Me.columnContainerID = New Global.System.Data.DataColumn("ContainerID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContainerID)
            Me.columnUnitPrice = New Global.System.Data.DataColumn("UnitPrice", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnitPrice)
            Me.columnPicture = New Global.System.Data.DataColumn("Picture", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPicture)
            Me.columnDonatorID = New Global.System.Data.DataColumn("DonatorID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDonatorID)
            Me.columnIsMedicine = New Global.System.Data.DataColumn("IsMedicine", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsMedicine)
            Me.columnCurrencyID = New Global.System.Data.DataColumn("CurrencyID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCurrencyID)
            Me.columnDateExpired = New Global.System.Data.DataColumn("DateExpired", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateExpired)
            Me.columnCountryID = New Global.System.Data.DataColumn("CountryID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCountryID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnItemID}, true))
            Me.columnItemID.AutoIncrement = true
            Me.columnItemID.AutoIncrementSeed = -1
            Me.columnItemID.AutoIncrementStep = -1
            Me.columnItemID.AllowDBNull = false
            Me.columnItemID.ReadOnly = true
            Me.columnItemID.Unique = true
            Me.columnItemCode.MaxLength = 100
            Me.columnItemName.MaxLength = 150
            Me.columnItemDescription.MaxLength = 250
            Me.columnBarcode.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtblItemRow() As tblItemRow
            Return CType(Me.NewRow,tblItemRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblItemRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblItemRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblItemRowChangedEvent) Is Nothing) Then
                RaiseEvent tblItemRowChanged(Me, New tblItemRowChangeEvent(CType(e.Row,tblItemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblItemRowChangingEvent) Is Nothing) Then
                RaiseEvent tblItemRowChanging(Me, New tblItemRowChangeEvent(CType(e.Row,tblItemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblItemRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblItemRowDeleted(Me, New tblItemRowChangeEvent(CType(e.Row,tblItemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblItemRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblItemRowDeleting(Me, New tblItemRowChangeEvent(CType(e.Row,tblItemRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetblItemRow(ByVal row As tblItemRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS_KSPAYMENT = New DS_KSPAYMENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblItemDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class S_PRESCRIPTIONDataTable
        Inherits Global.System.Data.TypedTableBase(Of S_PRESCRIPTIONRow)
        
        Private columnPRES_ID As Global.System.Data.DataColumn
        
        Private columnWAITING_ID As Global.System.Data.DataColumn
        
        Private columnPATIENT_NO As Global.System.Data.DataColumn
        
        Private columnMEDICINCE_ID As Global.System.Data.DataColumn
        
        Private columnMEDICINCE_NAME As Global.System.Data.DataColumn
        
        Private columnORDINANCE As Global.System.Data.DataColumn
        
        Private columnMEDICINCE_QTY As Global.System.Data.DataColumn
        
        Private columnMEDICINCE_PRICE As Global.System.Data.DataColumn
        
        Private columnTOTAL_PRICE As Global.System.Data.DataColumn
        
        Private columnUSAGE As Global.System.Data.DataColumn
        
        Private columnPRESCRIP_DATE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "S_PRESCRIPTION"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRES_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRES_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WAITING_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWAITING_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PATIENT_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPATIENT_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MEDICINCE_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMEDICINCE_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MEDICINCE_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMEDICINCE_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORDINANCEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDINANCE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MEDICINCE_QTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMEDICINCE_QTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MEDICINCE_PRICEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMEDICINCE_PRICE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTAL_PRICEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTAL_PRICE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USAGEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSAGE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRESCRIP_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRESCRIP_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As S_PRESCRIPTIONRow
            Get
                Return CType(Me.Rows(index),S_PRESCRIPTIONRow)
            End Get
        End Property
        
        Public Event S_PRESCRIPTIONRowChanging As S_PRESCRIPTIONRowChangeEventHandler
        
        Public Event S_PRESCRIPTIONRowChanged As S_PRESCRIPTIONRowChangeEventHandler
        
        Public Event S_PRESCRIPTIONRowDeleting As S_PRESCRIPTIONRowChangeEventHandler
        
        Public Event S_PRESCRIPTIONRowDeleted As S_PRESCRIPTIONRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddS_PRESCRIPTIONRow(ByVal row As S_PRESCRIPTIONRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddS_PRESCRIPTIONRow(ByVal parentS_INVOICE_KSRowByS_INVOICE_KS_S_PRESCRIPTION As S_INVOICE_KSRow, ByVal PATIENT_NO As Decimal, ByVal MEDICINCE_ID As Decimal, ByVal MEDICINCE_NAME As String, ByVal ORDINANCE As String, ByVal MEDICINCE_QTY As Decimal, ByVal MEDICINCE_PRICE As Decimal, ByVal TOTAL_PRICE As Decimal, ByVal USAGE As String, ByVal PRESCRIP_DATE As Date) As S_PRESCRIPTIONRow
            Dim rowS_PRESCRIPTIONRow As S_PRESCRIPTIONRow = CType(Me.NewRow,S_PRESCRIPTIONRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, PATIENT_NO, MEDICINCE_ID, MEDICINCE_NAME, ORDINANCE, MEDICINCE_QTY, MEDICINCE_PRICE, TOTAL_PRICE, USAGE, PRESCRIP_DATE}
            If (Not (parentS_INVOICE_KSRowByS_INVOICE_KS_S_PRESCRIPTION) Is Nothing) Then
                columnValuesArray(1) = parentS_INVOICE_KSRowByS_INVOICE_KS_S_PRESCRIPTION(1)
            End If
            rowS_PRESCRIPTIONRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowS_PRESCRIPTIONRow)
            Return rowS_PRESCRIPTIONRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPRES_ID(ByVal PRES_ID As Decimal) As S_PRESCRIPTIONRow
            Return CType(Me.Rows.Find(New Object() {PRES_ID}),S_PRESCRIPTIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As S_PRESCRIPTIONDataTable = CType(MyBase.Clone,S_PRESCRIPTIONDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New S_PRESCRIPTIONDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPRES_ID = MyBase.Columns("PRES_ID")
            Me.columnWAITING_ID = MyBase.Columns("WAITING_ID")
            Me.columnPATIENT_NO = MyBase.Columns("PATIENT_NO")
            Me.columnMEDICINCE_ID = MyBase.Columns("MEDICINCE_ID")
            Me.columnMEDICINCE_NAME = MyBase.Columns("MEDICINCE_NAME")
            Me.columnORDINANCE = MyBase.Columns("ORDINANCE")
            Me.columnMEDICINCE_QTY = MyBase.Columns("MEDICINCE_QTY")
            Me.columnMEDICINCE_PRICE = MyBase.Columns("MEDICINCE_PRICE")
            Me.columnTOTAL_PRICE = MyBase.Columns("TOTAL_PRICE")
            Me.columnUSAGE = MyBase.Columns("USAGE")
            Me.columnPRESCRIP_DATE = MyBase.Columns("PRESCRIP_DATE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPRES_ID = New Global.System.Data.DataColumn("PRES_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRES_ID)
            Me.columnWAITING_ID = New Global.System.Data.DataColumn("WAITING_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWAITING_ID)
            Me.columnPATIENT_NO = New Global.System.Data.DataColumn("PATIENT_NO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPATIENT_NO)
            Me.columnMEDICINCE_ID = New Global.System.Data.DataColumn("MEDICINCE_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMEDICINCE_ID)
            Me.columnMEDICINCE_NAME = New Global.System.Data.DataColumn("MEDICINCE_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMEDICINCE_NAME)
            Me.columnORDINANCE = New Global.System.Data.DataColumn("ORDINANCE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDINANCE)
            Me.columnMEDICINCE_QTY = New Global.System.Data.DataColumn("MEDICINCE_QTY", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMEDICINCE_QTY)
            Me.columnMEDICINCE_PRICE = New Global.System.Data.DataColumn("MEDICINCE_PRICE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMEDICINCE_PRICE)
            Me.columnTOTAL_PRICE = New Global.System.Data.DataColumn("TOTAL_PRICE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTAL_PRICE)
            Me.columnUSAGE = New Global.System.Data.DataColumn("USAGE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSAGE)
            Me.columnPRESCRIP_DATE = New Global.System.Data.DataColumn("PRESCRIP_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRESCRIP_DATE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPRES_ID}, true))
            Me.columnPRES_ID.AutoIncrement = true
            Me.columnPRES_ID.AutoIncrementSeed = -1
            Me.columnPRES_ID.AutoIncrementStep = -1
            Me.columnPRES_ID.AllowDBNull = false
            Me.columnPRES_ID.ReadOnly = true
            Me.columnPRES_ID.Unique = true
            Me.columnMEDICINCE_NAME.MaxLength = 50
            Me.columnORDINANCE.MaxLength = 50
            Me.columnUSAGE.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewS_PRESCRIPTIONRow() As S_PRESCRIPTIONRow
            Return CType(Me.NewRow,S_PRESCRIPTIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New S_PRESCRIPTIONRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(S_PRESCRIPTIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.S_PRESCRIPTIONRowChangedEvent) Is Nothing) Then
                RaiseEvent S_PRESCRIPTIONRowChanged(Me, New S_PRESCRIPTIONRowChangeEvent(CType(e.Row,S_PRESCRIPTIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.S_PRESCRIPTIONRowChangingEvent) Is Nothing) Then
                RaiseEvent S_PRESCRIPTIONRowChanging(Me, New S_PRESCRIPTIONRowChangeEvent(CType(e.Row,S_PRESCRIPTIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.S_PRESCRIPTIONRowDeletedEvent) Is Nothing) Then
                RaiseEvent S_PRESCRIPTIONRowDeleted(Me, New S_PRESCRIPTIONRowChangeEvent(CType(e.Row,S_PRESCRIPTIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.S_PRESCRIPTIONRowDeletingEvent) Is Nothing) Then
                RaiseEvent S_PRESCRIPTIONRowDeleting(Me, New S_PRESCRIPTIONRowChangeEvent(CType(e.Row,S_PRESCRIPTIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveS_PRESCRIPTIONRow(ByVal row As S_PRESCRIPTIONRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS_KSPAYMENT = New DS_KSPAYMENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "S_PRESCRIPTIONDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class S_COUNT_MEDICINE_AND_GLASSESDataTable
        Inherits Global.System.Data.TypedTableBase(Of S_COUNT_MEDICINE_AND_GLASSESRow)
        
        Private columnINVOICE_ID As Global.System.Data.DataColumn
        
        Private columnINVOICE_DATE As Global.System.Data.DataColumn
        
        Private columnPATIENT_NO As Global.System.Data.DataColumn
        
        Private columnPATIENT_NAME_ENG As Global.System.Data.DataColumn
        
        Private columnPATIENT_NAME_KH As Global.System.Data.DataColumn
        
        Private columnPATIENT_SEX As Global.System.Data.DataColumn
        
        Private columnPATIENT_AGE As Global.System.Data.DataColumn
        
        Private columnIS_GLASSES As Global.System.Data.DataColumn
        
        Private columnMEDICINCE_NAME As Global.System.Data.DataColumn
        
        Private columnMEDICINCE_QTY As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "S_COUNT_MEDICINE_AND_GLASSES"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVOICE_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVOICE_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVOICE_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVOICE_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PATIENT_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPATIENT_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PATIENT_NAME_ENGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPATIENT_NAME_ENG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PATIENT_NAME_KHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPATIENT_NAME_KH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PATIENT_SEXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPATIENT_SEX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PATIENT_AGEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPATIENT_AGE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IS_GLASSESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIS_GLASSES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MEDICINCE_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMEDICINCE_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MEDICINCE_QTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMEDICINCE_QTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As S_COUNT_MEDICINE_AND_GLASSESRow
            Get
                Return CType(Me.Rows(index),S_COUNT_MEDICINE_AND_GLASSESRow)
            End Get
        End Property
        
        Public Event S_COUNT_MEDICINE_AND_GLASSESRowChanging As S_COUNT_MEDICINE_AND_GLASSESRowChangeEventHandler
        
        Public Event S_COUNT_MEDICINE_AND_GLASSESRowChanged As S_COUNT_MEDICINE_AND_GLASSESRowChangeEventHandler
        
        Public Event S_COUNT_MEDICINE_AND_GLASSESRowDeleting As S_COUNT_MEDICINE_AND_GLASSESRowChangeEventHandler
        
        Public Event S_COUNT_MEDICINE_AND_GLASSESRowDeleted As S_COUNT_MEDICINE_AND_GLASSESRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddS_COUNT_MEDICINE_AND_GLASSESRow(ByVal row As S_COUNT_MEDICINE_AND_GLASSESRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddS_COUNT_MEDICINE_AND_GLASSESRow(ByVal INVOICE_ID As Decimal, ByVal INVOICE_DATE As Date, ByVal PATIENT_NO As Decimal, ByVal PATIENT_NAME_ENG As String, ByVal PATIENT_NAME_KH As String, ByVal PATIENT_SEX As String, ByVal PATIENT_AGE As Decimal, ByVal IS_GLASSES As Boolean, ByVal MEDICINCE_NAME As String, ByVal MEDICINCE_QTY As Decimal) As S_COUNT_MEDICINE_AND_GLASSESRow
            Dim rowS_COUNT_MEDICINE_AND_GLASSESRow As S_COUNT_MEDICINE_AND_GLASSESRow = CType(Me.NewRow,S_COUNT_MEDICINE_AND_GLASSESRow)
            Dim columnValuesArray() As Object = New Object() {INVOICE_ID, INVOICE_DATE, PATIENT_NO, PATIENT_NAME_ENG, PATIENT_NAME_KH, PATIENT_SEX, PATIENT_AGE, IS_GLASSES, MEDICINCE_NAME, MEDICINCE_QTY}
            rowS_COUNT_MEDICINE_AND_GLASSESRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowS_COUNT_MEDICINE_AND_GLASSESRow)
            Return rowS_COUNT_MEDICINE_AND_GLASSESRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As S_COUNT_MEDICINE_AND_GLASSESDataTable = CType(MyBase.Clone,S_COUNT_MEDICINE_AND_GLASSESDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New S_COUNT_MEDICINE_AND_GLASSESDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnINVOICE_ID = MyBase.Columns("INVOICE_ID")
            Me.columnINVOICE_DATE = MyBase.Columns("INVOICE_DATE")
            Me.columnPATIENT_NO = MyBase.Columns("PATIENT_NO")
            Me.columnPATIENT_NAME_ENG = MyBase.Columns("PATIENT_NAME_ENG")
            Me.columnPATIENT_NAME_KH = MyBase.Columns("PATIENT_NAME_KH")
            Me.columnPATIENT_SEX = MyBase.Columns("PATIENT_SEX")
            Me.columnPATIENT_AGE = MyBase.Columns("PATIENT_AGE")
            Me.columnIS_GLASSES = MyBase.Columns("IS_GLASSES")
            Me.columnMEDICINCE_NAME = MyBase.Columns("MEDICINCE_NAME")
            Me.columnMEDICINCE_QTY = MyBase.Columns("MEDICINCE_QTY")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnINVOICE_ID = New Global.System.Data.DataColumn("INVOICE_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVOICE_ID)
            Me.columnINVOICE_DATE = New Global.System.Data.DataColumn("INVOICE_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVOICE_DATE)
            Me.columnPATIENT_NO = New Global.System.Data.DataColumn("PATIENT_NO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPATIENT_NO)
            Me.columnPATIENT_NAME_ENG = New Global.System.Data.DataColumn("PATIENT_NAME_ENG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPATIENT_NAME_ENG)
            Me.columnPATIENT_NAME_KH = New Global.System.Data.DataColumn("PATIENT_NAME_KH", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPATIENT_NAME_KH)
            Me.columnPATIENT_SEX = New Global.System.Data.DataColumn("PATIENT_SEX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPATIENT_SEX)
            Me.columnPATIENT_AGE = New Global.System.Data.DataColumn("PATIENT_AGE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPATIENT_AGE)
            Me.columnIS_GLASSES = New Global.System.Data.DataColumn("IS_GLASSES", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIS_GLASSES)
            Me.columnMEDICINCE_NAME = New Global.System.Data.DataColumn("MEDICINCE_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMEDICINCE_NAME)
            Me.columnMEDICINCE_QTY = New Global.System.Data.DataColumn("MEDICINCE_QTY", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMEDICINCE_QTY)
            Me.columnINVOICE_ID.AllowDBNull = false
            Me.columnPATIENT_NAME_ENG.MaxLength = 50
            Me.columnPATIENT_NAME_KH.MaxLength = 50
            Me.columnPATIENT_SEX.MaxLength = 1
            Me.columnMEDICINCE_NAME.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewS_COUNT_MEDICINE_AND_GLASSESRow() As S_COUNT_MEDICINE_AND_GLASSESRow
            Return CType(Me.NewRow,S_COUNT_MEDICINE_AND_GLASSESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New S_COUNT_MEDICINE_AND_GLASSESRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(S_COUNT_MEDICINE_AND_GLASSESRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.S_COUNT_MEDICINE_AND_GLASSESRowChangedEvent) Is Nothing) Then
                RaiseEvent S_COUNT_MEDICINE_AND_GLASSESRowChanged(Me, New S_COUNT_MEDICINE_AND_GLASSESRowChangeEvent(CType(e.Row,S_COUNT_MEDICINE_AND_GLASSESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.S_COUNT_MEDICINE_AND_GLASSESRowChangingEvent) Is Nothing) Then
                RaiseEvent S_COUNT_MEDICINE_AND_GLASSESRowChanging(Me, New S_COUNT_MEDICINE_AND_GLASSESRowChangeEvent(CType(e.Row,S_COUNT_MEDICINE_AND_GLASSESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.S_COUNT_MEDICINE_AND_GLASSESRowDeletedEvent) Is Nothing) Then
                RaiseEvent S_COUNT_MEDICINE_AND_GLASSESRowDeleted(Me, New S_COUNT_MEDICINE_AND_GLASSESRowChangeEvent(CType(e.Row,S_COUNT_MEDICINE_AND_GLASSESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.S_COUNT_MEDICINE_AND_GLASSESRowDeletingEvent) Is Nothing) Then
                RaiseEvent S_COUNT_MEDICINE_AND_GLASSESRowDeleting(Me, New S_COUNT_MEDICINE_AND_GLASSESRowChangeEvent(CType(e.Row,S_COUNT_MEDICINE_AND_GLASSESRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveS_COUNT_MEDICINE_AND_GLASSESRow(ByVal row As S_COUNT_MEDICINE_AND_GLASSESRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS_KSPAYMENT = New DS_KSPAYMENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "S_COUNT_MEDICINE_AND_GLASSESDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class S_COUNT_GLASSESSDataTable
        Inherits Global.System.Data.TypedTableBase(Of S_COUNT_GLASSESSRow)
        
        Private columnINVOICE_ID As Global.System.Data.DataColumn
        
        Private columnWAITING_ID As Global.System.Data.DataColumn
        
        Private columnINVOICE_DATE As Global.System.Data.DataColumn
        
        Private columnPATIENT_NO As Global.System.Data.DataColumn
        
        Private columnPATIENT_NAME_ENG As Global.System.Data.DataColumn
        
        Private columnPATIENT_NAME_KH As Global.System.Data.DataColumn
        
        Private columnPATIENT_SEX As Global.System.Data.DataColumn
        
        Private columnPATIENT_AGE As Global.System.Data.DataColumn
        
        Private columnDIAGNOSIS As Global.System.Data.DataColumn
        
        Private columnIS_ON_EYE As Global.System.Data.DataColumn
        
        Private columnIS_GLASSES As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "S_COUNT_GLASSESS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVOICE_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVOICE_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WAITING_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWAITING_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVOICE_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVOICE_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PATIENT_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPATIENT_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PATIENT_NAME_ENGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPATIENT_NAME_ENG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PATIENT_NAME_KHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPATIENT_NAME_KH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PATIENT_SEXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPATIENT_SEX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PATIENT_AGEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPATIENT_AGE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DIAGNOSISColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIAGNOSIS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IS_ON_EYEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIS_ON_EYE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IS_GLASSESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIS_GLASSES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As S_COUNT_GLASSESSRow
            Get
                Return CType(Me.Rows(index),S_COUNT_GLASSESSRow)
            End Get
        End Property
        
        Public Event S_COUNT_GLASSESSRowChanging As S_COUNT_GLASSESSRowChangeEventHandler
        
        Public Event S_COUNT_GLASSESSRowChanged As S_COUNT_GLASSESSRowChangeEventHandler
        
        Public Event S_COUNT_GLASSESSRowDeleting As S_COUNT_GLASSESSRowChangeEventHandler
        
        Public Event S_COUNT_GLASSESSRowDeleted As S_COUNT_GLASSESSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddS_COUNT_GLASSESSRow(ByVal row As S_COUNT_GLASSESSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddS_COUNT_GLASSESSRow(ByVal INVOICE_ID As Decimal, ByVal WAITING_ID As Decimal, ByVal INVOICE_DATE As Date, ByVal PATIENT_NO As Decimal, ByVal PATIENT_NAME_ENG As String, ByVal PATIENT_NAME_KH As String, ByVal PATIENT_SEX As String, ByVal PATIENT_AGE As Decimal, ByVal DIAGNOSIS As String, ByVal IS_ON_EYE As String, ByVal IS_GLASSES As Boolean) As S_COUNT_GLASSESSRow
            Dim rowS_COUNT_GLASSESSRow As S_COUNT_GLASSESSRow = CType(Me.NewRow,S_COUNT_GLASSESSRow)
            Dim columnValuesArray() As Object = New Object() {INVOICE_ID, WAITING_ID, INVOICE_DATE, PATIENT_NO, PATIENT_NAME_ENG, PATIENT_NAME_KH, PATIENT_SEX, PATIENT_AGE, DIAGNOSIS, IS_ON_EYE, IS_GLASSES}
            rowS_COUNT_GLASSESSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowS_COUNT_GLASSESSRow)
            Return rowS_COUNT_GLASSESSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByINVOICE_ID(ByVal INVOICE_ID As Decimal) As S_COUNT_GLASSESSRow
            Return CType(Me.Rows.Find(New Object() {INVOICE_ID}),S_COUNT_GLASSESSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As S_COUNT_GLASSESSDataTable = CType(MyBase.Clone,S_COUNT_GLASSESSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New S_COUNT_GLASSESSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnINVOICE_ID = MyBase.Columns("INVOICE_ID")
            Me.columnWAITING_ID = MyBase.Columns("WAITING_ID")
            Me.columnINVOICE_DATE = MyBase.Columns("INVOICE_DATE")
            Me.columnPATIENT_NO = MyBase.Columns("PATIENT_NO")
            Me.columnPATIENT_NAME_ENG = MyBase.Columns("PATIENT_NAME_ENG")
            Me.columnPATIENT_NAME_KH = MyBase.Columns("PATIENT_NAME_KH")
            Me.columnPATIENT_SEX = MyBase.Columns("PATIENT_SEX")
            Me.columnPATIENT_AGE = MyBase.Columns("PATIENT_AGE")
            Me.columnDIAGNOSIS = MyBase.Columns("DIAGNOSIS")
            Me.columnIS_ON_EYE = MyBase.Columns("IS_ON_EYE")
            Me.columnIS_GLASSES = MyBase.Columns("IS_GLASSES")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnINVOICE_ID = New Global.System.Data.DataColumn("INVOICE_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVOICE_ID)
            Me.columnWAITING_ID = New Global.System.Data.DataColumn("WAITING_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWAITING_ID)
            Me.columnINVOICE_DATE = New Global.System.Data.DataColumn("INVOICE_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVOICE_DATE)
            Me.columnPATIENT_NO = New Global.System.Data.DataColumn("PATIENT_NO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPATIENT_NO)
            Me.columnPATIENT_NAME_ENG = New Global.System.Data.DataColumn("PATIENT_NAME_ENG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPATIENT_NAME_ENG)
            Me.columnPATIENT_NAME_KH = New Global.System.Data.DataColumn("PATIENT_NAME_KH", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPATIENT_NAME_KH)
            Me.columnPATIENT_SEX = New Global.System.Data.DataColumn("PATIENT_SEX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPATIENT_SEX)
            Me.columnPATIENT_AGE = New Global.System.Data.DataColumn("PATIENT_AGE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPATIENT_AGE)
            Me.columnDIAGNOSIS = New Global.System.Data.DataColumn("DIAGNOSIS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIAGNOSIS)
            Me.columnIS_ON_EYE = New Global.System.Data.DataColumn("IS_ON_EYE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIS_ON_EYE)
            Me.columnIS_GLASSES = New Global.System.Data.DataColumn("IS_GLASSES", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIS_GLASSES)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnINVOICE_ID}, true))
            Me.columnINVOICE_ID.AllowDBNull = false
            Me.columnINVOICE_ID.Unique = true
            Me.columnPATIENT_NAME_ENG.MaxLength = 50
            Me.columnPATIENT_NAME_KH.MaxLength = 50
            Me.columnPATIENT_SEX.MaxLength = 1
            Me.columnDIAGNOSIS.MaxLength = 50
            Me.columnIS_ON_EYE.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewS_COUNT_GLASSESSRow() As S_COUNT_GLASSESSRow
            Return CType(Me.NewRow,S_COUNT_GLASSESSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New S_COUNT_GLASSESSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(S_COUNT_GLASSESSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.S_COUNT_GLASSESSRowChangedEvent) Is Nothing) Then
                RaiseEvent S_COUNT_GLASSESSRowChanged(Me, New S_COUNT_GLASSESSRowChangeEvent(CType(e.Row,S_COUNT_GLASSESSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.S_COUNT_GLASSESSRowChangingEvent) Is Nothing) Then
                RaiseEvent S_COUNT_GLASSESSRowChanging(Me, New S_COUNT_GLASSESSRowChangeEvent(CType(e.Row,S_COUNT_GLASSESSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.S_COUNT_GLASSESSRowDeletedEvent) Is Nothing) Then
                RaiseEvent S_COUNT_GLASSESSRowDeleted(Me, New S_COUNT_GLASSESSRowChangeEvent(CType(e.Row,S_COUNT_GLASSESSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.S_COUNT_GLASSESSRowDeletingEvent) Is Nothing) Then
                RaiseEvent S_COUNT_GLASSESSRowDeleting(Me, New S_COUNT_GLASSESSRowChangeEvent(CType(e.Row,S_COUNT_GLASSESSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveS_COUNT_GLASSESSRow(ByVal row As S_COUNT_GLASSESSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS_KSPAYMENT = New DS_KSPAYMENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "S_COUNT_GLASSESSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class V_EYE_PRESCRIPTIONDataTable
        Inherits Global.System.Data.TypedTableBase(Of V_EYE_PRESCRIPTIONRow)
        
        Private columnWAIT_ID As Global.System.Data.DataColumn
        
        Private columnDATE_WAITING As Global.System.Data.DataColumn
        
        Private columnPATIENT_NO As Global.System.Data.DataColumn
        
        Private columnNameEng As Global.System.Data.DataColumn
        
        Private columnNameKhmer As Global.System.Data.DataColumn
        
        Private columnAge As Global.System.Data.DataColumn
        
        Private columnSex As Global.System.Data.DataColumn
        
        Private columnDIAGNOSIS As Global.System.Data.DataColumn
        
        Private columnRE As Global.System.Data.DataColumn
        
        Private columnLE As Global.System.Data.DataColumn
        
        Private columnRRE As Global.System.Data.DataColumn
        
        Private columnRREF As Global.System.Data.DataColumn
        
        Private columnMEDICINCE_ID As Global.System.Data.DataColumn
        
        Private columnMEDICINCE_NAME As Global.System.Data.DataColumn
        
        Private columnORDINANCE As Global.System.Data.DataColumn
        
        Private columnMEDICINCE_QTY As Global.System.Data.DataColumn
        
        Private columnMEDICINCE_PRICE As Global.System.Data.DataColumn
        
        Private columnTOTAL_PRICE As Global.System.Data.DataColumn
        
        Private columnUSAGE As Global.System.Data.DataColumn
        
        Private columnPRESCRIP_DATE As Global.System.Data.DataColumn
        
        Private columnOPHTHAMOLOGIST As Global.System.Data.DataColumn
        
        Private columnLLE As Global.System.Data.DataColumn
        
        Private columnIS_ON_EYE As Global.System.Data.DataColumn
        
        Private columnIOPRE As Global.System.Data.DataColumn
        
        Private columnIOPLE As Global.System.Data.DataColumn
        
        Private columnRPH As Global.System.Data.DataColumn
        
        Private columnLPH As Global.System.Data.DataColumn
        
        Private columnLREF As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "V_EYE_PRESCRIPTION"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WAIT_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWAIT_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DATE_WAITINGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATE_WAITING
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PATIENT_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPATIENT_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameEngColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameEng
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameKhmerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameKhmer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AgeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DIAGNOSISColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIAGNOSIS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RREFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRREF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MEDICINCE_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMEDICINCE_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MEDICINCE_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMEDICINCE_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORDINANCEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDINANCE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MEDICINCE_QTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMEDICINCE_QTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MEDICINCE_PRICEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMEDICINCE_PRICE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTAL_PRICEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTAL_PRICE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USAGEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSAGE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRESCRIP_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRESCRIP_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OPHTHAMOLOGISTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPHTHAMOLOGIST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IS_ON_EYEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIS_ON_EYE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IOPREColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIOPRE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IOPLEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIOPLE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RPHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRPH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LPHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLPH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LREFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLREF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As V_EYE_PRESCRIPTIONRow
            Get
                Return CType(Me.Rows(index),V_EYE_PRESCRIPTIONRow)
            End Get
        End Property
        
        Public Event V_EYE_PRESCRIPTIONRowChanging As V_EYE_PRESCRIPTIONRowChangeEventHandler
        
        Public Event V_EYE_PRESCRIPTIONRowChanged As V_EYE_PRESCRIPTIONRowChangeEventHandler
        
        Public Event V_EYE_PRESCRIPTIONRowDeleting As V_EYE_PRESCRIPTIONRowChangeEventHandler
        
        Public Event V_EYE_PRESCRIPTIONRowDeleted As V_EYE_PRESCRIPTIONRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddV_EYE_PRESCRIPTIONRow(ByVal row As V_EYE_PRESCRIPTIONRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddV_EYE_PRESCRIPTIONRow( _
                    ByVal WAIT_ID As Decimal,  _
                    ByVal DATE_WAITING As Date,  _
                    ByVal PATIENT_NO As Decimal,  _
                    ByVal NameEng As String,  _
                    ByVal NameKhmer As String,  _
                    ByVal Age As Decimal,  _
                    ByVal Sex As String,  _
                    ByVal DIAGNOSIS As String,  _
                    ByVal RE As String,  _
                    ByVal LE As String,  _
                    ByVal RRE As String,  _
                    ByVal RREF As String,  _
                    ByVal MEDICINCE_ID As Decimal,  _
                    ByVal MEDICINCE_NAME As String,  _
                    ByVal ORDINANCE As String,  _
                    ByVal MEDICINCE_QTY As Decimal,  _
                    ByVal MEDICINCE_PRICE As Decimal,  _
                    ByVal TOTAL_PRICE As Decimal,  _
                    ByVal USAGE As String,  _
                    ByVal PRESCRIP_DATE As Date,  _
                    ByVal OPHTHAMOLOGIST As String,  _
                    ByVal LLE As String,  _
                    ByVal IS_ON_EYE As String,  _
                    ByVal IOPRE As String,  _
                    ByVal IOPLE As String,  _
                    ByVal RPH As String,  _
                    ByVal LPH As String,  _
                    ByVal LREF As String) As V_EYE_PRESCRIPTIONRow
            Dim rowV_EYE_PRESCRIPTIONRow As V_EYE_PRESCRIPTIONRow = CType(Me.NewRow,V_EYE_PRESCRIPTIONRow)
            Dim columnValuesArray() As Object = New Object() {WAIT_ID, DATE_WAITING, PATIENT_NO, NameEng, NameKhmer, Age, Sex, DIAGNOSIS, RE, LE, RRE, RREF, MEDICINCE_ID, MEDICINCE_NAME, ORDINANCE, MEDICINCE_QTY, MEDICINCE_PRICE, TOTAL_PRICE, USAGE, PRESCRIP_DATE, OPHTHAMOLOGIST, LLE, IS_ON_EYE, IOPRE, IOPLE, RPH, LPH, LREF}
            rowV_EYE_PRESCRIPTIONRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowV_EYE_PRESCRIPTIONRow)
            Return rowV_EYE_PRESCRIPTIONRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As V_EYE_PRESCRIPTIONDataTable = CType(MyBase.Clone,V_EYE_PRESCRIPTIONDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New V_EYE_PRESCRIPTIONDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnWAIT_ID = MyBase.Columns("WAIT_ID")
            Me.columnDATE_WAITING = MyBase.Columns("DATE_WAITING")
            Me.columnPATIENT_NO = MyBase.Columns("PATIENT_NO")
            Me.columnNameEng = MyBase.Columns("NameEng")
            Me.columnNameKhmer = MyBase.Columns("NameKhmer")
            Me.columnAge = MyBase.Columns("Age")
            Me.columnSex = MyBase.Columns("Sex")
            Me.columnDIAGNOSIS = MyBase.Columns("DIAGNOSIS")
            Me.columnRE = MyBase.Columns("RE")
            Me.columnLE = MyBase.Columns("LE")
            Me.columnRRE = MyBase.Columns("RRE")
            Me.columnRREF = MyBase.Columns("RREF")
            Me.columnMEDICINCE_ID = MyBase.Columns("MEDICINCE_ID")
            Me.columnMEDICINCE_NAME = MyBase.Columns("MEDICINCE_NAME")
            Me.columnORDINANCE = MyBase.Columns("ORDINANCE")
            Me.columnMEDICINCE_QTY = MyBase.Columns("MEDICINCE_QTY")
            Me.columnMEDICINCE_PRICE = MyBase.Columns("MEDICINCE_PRICE")
            Me.columnTOTAL_PRICE = MyBase.Columns("TOTAL_PRICE")
            Me.columnUSAGE = MyBase.Columns("USAGE")
            Me.columnPRESCRIP_DATE = MyBase.Columns("PRESCRIP_DATE")
            Me.columnOPHTHAMOLOGIST = MyBase.Columns("OPHTHAMOLOGIST")
            Me.columnLLE = MyBase.Columns("LLE")
            Me.columnIS_ON_EYE = MyBase.Columns("IS_ON_EYE")
            Me.columnIOPRE = MyBase.Columns("IOPRE")
            Me.columnIOPLE = MyBase.Columns("IOPLE")
            Me.columnRPH = MyBase.Columns("RPH")
            Me.columnLPH = MyBase.Columns("LPH")
            Me.columnLREF = MyBase.Columns("LREF")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnWAIT_ID = New Global.System.Data.DataColumn("WAIT_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWAIT_ID)
            Me.columnDATE_WAITING = New Global.System.Data.DataColumn("DATE_WAITING", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATE_WAITING)
            Me.columnPATIENT_NO = New Global.System.Data.DataColumn("PATIENT_NO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPATIENT_NO)
            Me.columnNameEng = New Global.System.Data.DataColumn("NameEng", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameEng)
            Me.columnNameKhmer = New Global.System.Data.DataColumn("NameKhmer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameKhmer)
            Me.columnAge = New Global.System.Data.DataColumn("Age", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAge)
            Me.columnSex = New Global.System.Data.DataColumn("Sex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSex)
            Me.columnDIAGNOSIS = New Global.System.Data.DataColumn("DIAGNOSIS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIAGNOSIS)
            Me.columnRE = New Global.System.Data.DataColumn("RE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRE)
            Me.columnLE = New Global.System.Data.DataColumn("LE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLE)
            Me.columnRRE = New Global.System.Data.DataColumn("RRE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRRE)
            Me.columnRREF = New Global.System.Data.DataColumn("RREF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRREF)
            Me.columnMEDICINCE_ID = New Global.System.Data.DataColumn("MEDICINCE_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMEDICINCE_ID)
            Me.columnMEDICINCE_NAME = New Global.System.Data.DataColumn("MEDICINCE_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMEDICINCE_NAME)
            Me.columnORDINANCE = New Global.System.Data.DataColumn("ORDINANCE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDINANCE)
            Me.columnMEDICINCE_QTY = New Global.System.Data.DataColumn("MEDICINCE_QTY", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMEDICINCE_QTY)
            Me.columnMEDICINCE_PRICE = New Global.System.Data.DataColumn("MEDICINCE_PRICE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMEDICINCE_PRICE)
            Me.columnTOTAL_PRICE = New Global.System.Data.DataColumn("TOTAL_PRICE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTAL_PRICE)
            Me.columnUSAGE = New Global.System.Data.DataColumn("USAGE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSAGE)
            Me.columnPRESCRIP_DATE = New Global.System.Data.DataColumn("PRESCRIP_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRESCRIP_DATE)
            Me.columnOPHTHAMOLOGIST = New Global.System.Data.DataColumn("OPHTHAMOLOGIST", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPHTHAMOLOGIST)
            Me.columnLLE = New Global.System.Data.DataColumn("LLE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLLE)
            Me.columnIS_ON_EYE = New Global.System.Data.DataColumn("IS_ON_EYE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIS_ON_EYE)
            Me.columnIOPRE = New Global.System.Data.DataColumn("IOPRE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIOPRE)
            Me.columnIOPLE = New Global.System.Data.DataColumn("IOPLE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIOPLE)
            Me.columnRPH = New Global.System.Data.DataColumn("RPH", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRPH)
            Me.columnLPH = New Global.System.Data.DataColumn("LPH", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLPH)
            Me.columnLREF = New Global.System.Data.DataColumn("LREF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLREF)
            Me.columnWAIT_ID.AllowDBNull = false
            Me.columnNameEng.MaxLength = 50
            Me.columnNameKhmer.MaxLength = 50
            Me.columnSex.MaxLength = 1
            Me.columnDIAGNOSIS.MaxLength = 50
            Me.columnRE.MaxLength = 10
            Me.columnLE.MaxLength = 50
            Me.columnRRE.MaxLength = 50
            Me.columnRREF.MaxLength = 50
            Me.columnMEDICINCE_NAME.MaxLength = 50
            Me.columnORDINANCE.MaxLength = 50
            Me.columnUSAGE.MaxLength = 50
            Me.columnOPHTHAMOLOGIST.MaxLength = 50
            Me.columnLLE.MaxLength = 50
            Me.columnIS_ON_EYE.MaxLength = 50
            Me.columnIOPRE.MaxLength = 50
            Me.columnIOPLE.MaxLength = 50
            Me.columnRPH.MaxLength = 50
            Me.columnLPH.MaxLength = 50
            Me.columnLREF.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewV_EYE_PRESCRIPTIONRow() As V_EYE_PRESCRIPTIONRow
            Return CType(Me.NewRow,V_EYE_PRESCRIPTIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New V_EYE_PRESCRIPTIONRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(V_EYE_PRESCRIPTIONRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.V_EYE_PRESCRIPTIONRowChangedEvent) Is Nothing) Then
                RaiseEvent V_EYE_PRESCRIPTIONRowChanged(Me, New V_EYE_PRESCRIPTIONRowChangeEvent(CType(e.Row,V_EYE_PRESCRIPTIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.V_EYE_PRESCRIPTIONRowChangingEvent) Is Nothing) Then
                RaiseEvent V_EYE_PRESCRIPTIONRowChanging(Me, New V_EYE_PRESCRIPTIONRowChangeEvent(CType(e.Row,V_EYE_PRESCRIPTIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.V_EYE_PRESCRIPTIONRowDeletedEvent) Is Nothing) Then
                RaiseEvent V_EYE_PRESCRIPTIONRowDeleted(Me, New V_EYE_PRESCRIPTIONRowChangeEvent(CType(e.Row,V_EYE_PRESCRIPTIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.V_EYE_PRESCRIPTIONRowDeletingEvent) Is Nothing) Then
                RaiseEvent V_EYE_PRESCRIPTIONRowDeleting(Me, New V_EYE_PRESCRIPTIONRowChangeEvent(CType(e.Row,V_EYE_PRESCRIPTIONRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveV_EYE_PRESCRIPTIONRow(ByVal row As V_EYE_PRESCRIPTIONRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS_KSPAYMENT = New DS_KSPAYMENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "V_EYE_PRESCRIPTIONDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class S_VIEW_COUNT_MEDICINEDataTable
        Inherits Global.System.Data.TypedTableBase(Of S_VIEW_COUNT_MEDICINERow)
        
        Private columnINVOICE_ID As Global.System.Data.DataColumn
        
        Private columnINVOICE_DATE As Global.System.Data.DataColumn
        
        Private columnPATIENT_NO As Global.System.Data.DataColumn
        
        Private columnPATIENT_NAME_ENG As Global.System.Data.DataColumn
        
        Private columnPATIENT_NAME_KH As Global.System.Data.DataColumn
        
        Private columnPATIENT_SEX As Global.System.Data.DataColumn
        
        Private columnPATIENT_AGE As Global.System.Data.DataColumn
        
        Private columnMEDICINE_ID As Global.System.Data.DataColumn
        
        Private columnMEDICINE_NAME As Global.System.Data.DataColumn
        
        Private columnMEDICINE_QTY As Global.System.Data.DataColumn
        
        Private columnIS_GLASSES As Global.System.Data.DataColumn
        
        Private columnWAITING_NO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "S_VIEW_COUNT_MEDICINE"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVOICE_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVOICE_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INVOICE_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINVOICE_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PATIENT_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPATIENT_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PATIENT_NAME_ENGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPATIENT_NAME_ENG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PATIENT_NAME_KHColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPATIENT_NAME_KH
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PATIENT_SEXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPATIENT_SEX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PATIENT_AGEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPATIENT_AGE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MEDICINE_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMEDICINE_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MEDICINE_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMEDICINE_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MEDICINE_QTYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMEDICINE_QTY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IS_GLASSESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIS_GLASSES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WAITING_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWAITING_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As S_VIEW_COUNT_MEDICINERow
            Get
                Return CType(Me.Rows(index),S_VIEW_COUNT_MEDICINERow)
            End Get
        End Property
        
        Public Event S_VIEW_COUNT_MEDICINERowChanging As S_VIEW_COUNT_MEDICINERowChangeEventHandler
        
        Public Event S_VIEW_COUNT_MEDICINERowChanged As S_VIEW_COUNT_MEDICINERowChangeEventHandler
        
        Public Event S_VIEW_COUNT_MEDICINERowDeleting As S_VIEW_COUNT_MEDICINERowChangeEventHandler
        
        Public Event S_VIEW_COUNT_MEDICINERowDeleted As S_VIEW_COUNT_MEDICINERowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddS_VIEW_COUNT_MEDICINERow(ByVal row As S_VIEW_COUNT_MEDICINERow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddS_VIEW_COUNT_MEDICINERow(ByVal INVOICE_ID As Decimal, ByVal INVOICE_DATE As Date, ByVal PATIENT_NO As Decimal, ByVal PATIENT_NAME_ENG As String, ByVal PATIENT_NAME_KH As String, ByVal PATIENT_SEX As String, ByVal PATIENT_AGE As Decimal, ByVal MEDICINE_ID As Decimal, ByVal MEDICINE_NAME As String, ByVal MEDICINE_QTY As Decimal, ByVal IS_GLASSES As Boolean, ByVal WAITING_NO As Decimal) As S_VIEW_COUNT_MEDICINERow
            Dim rowS_VIEW_COUNT_MEDICINERow As S_VIEW_COUNT_MEDICINERow = CType(Me.NewRow,S_VIEW_COUNT_MEDICINERow)
            Dim columnValuesArray() As Object = New Object() {INVOICE_ID, INVOICE_DATE, PATIENT_NO, PATIENT_NAME_ENG, PATIENT_NAME_KH, PATIENT_SEX, PATIENT_AGE, MEDICINE_ID, MEDICINE_NAME, MEDICINE_QTY, IS_GLASSES, WAITING_NO}
            rowS_VIEW_COUNT_MEDICINERow.ItemArray = columnValuesArray
            Me.Rows.Add(rowS_VIEW_COUNT_MEDICINERow)
            Return rowS_VIEW_COUNT_MEDICINERow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As S_VIEW_COUNT_MEDICINEDataTable = CType(MyBase.Clone,S_VIEW_COUNT_MEDICINEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New S_VIEW_COUNT_MEDICINEDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnINVOICE_ID = MyBase.Columns("INVOICE_ID")
            Me.columnINVOICE_DATE = MyBase.Columns("INVOICE_DATE")
            Me.columnPATIENT_NO = MyBase.Columns("PATIENT_NO")
            Me.columnPATIENT_NAME_ENG = MyBase.Columns("PATIENT_NAME_ENG")
            Me.columnPATIENT_NAME_KH = MyBase.Columns("PATIENT_NAME_KH")
            Me.columnPATIENT_SEX = MyBase.Columns("PATIENT_SEX")
            Me.columnPATIENT_AGE = MyBase.Columns("PATIENT_AGE")
            Me.columnMEDICINE_ID = MyBase.Columns("MEDICINE_ID")
            Me.columnMEDICINE_NAME = MyBase.Columns("MEDICINE_NAME")
            Me.columnMEDICINE_QTY = MyBase.Columns("MEDICINE_QTY")
            Me.columnIS_GLASSES = MyBase.Columns("IS_GLASSES")
            Me.columnWAITING_NO = MyBase.Columns("WAITING_NO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnINVOICE_ID = New Global.System.Data.DataColumn("INVOICE_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVOICE_ID)
            Me.columnINVOICE_DATE = New Global.System.Data.DataColumn("INVOICE_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINVOICE_DATE)
            Me.columnPATIENT_NO = New Global.System.Data.DataColumn("PATIENT_NO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPATIENT_NO)
            Me.columnPATIENT_NAME_ENG = New Global.System.Data.DataColumn("PATIENT_NAME_ENG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPATIENT_NAME_ENG)
            Me.columnPATIENT_NAME_KH = New Global.System.Data.DataColumn("PATIENT_NAME_KH", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPATIENT_NAME_KH)
            Me.columnPATIENT_SEX = New Global.System.Data.DataColumn("PATIENT_SEX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPATIENT_SEX)
            Me.columnPATIENT_AGE = New Global.System.Data.DataColumn("PATIENT_AGE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPATIENT_AGE)
            Me.columnMEDICINE_ID = New Global.System.Data.DataColumn("MEDICINE_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMEDICINE_ID)
            Me.columnMEDICINE_NAME = New Global.System.Data.DataColumn("MEDICINE_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMEDICINE_NAME)
            Me.columnMEDICINE_QTY = New Global.System.Data.DataColumn("MEDICINE_QTY", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMEDICINE_QTY)
            Me.columnIS_GLASSES = New Global.System.Data.DataColumn("IS_GLASSES", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIS_GLASSES)
            Me.columnWAITING_NO = New Global.System.Data.DataColumn("WAITING_NO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWAITING_NO)
            Me.columnPATIENT_NAME_ENG.MaxLength = 50
            Me.columnPATIENT_NAME_KH.MaxLength = 50
            Me.columnPATIENT_SEX.MaxLength = 1
            Me.columnMEDICINE_NAME.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewS_VIEW_COUNT_MEDICINERow() As S_VIEW_COUNT_MEDICINERow
            Return CType(Me.NewRow,S_VIEW_COUNT_MEDICINERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New S_VIEW_COUNT_MEDICINERow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(S_VIEW_COUNT_MEDICINERow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.S_VIEW_COUNT_MEDICINERowChangedEvent) Is Nothing) Then
                RaiseEvent S_VIEW_COUNT_MEDICINERowChanged(Me, New S_VIEW_COUNT_MEDICINERowChangeEvent(CType(e.Row,S_VIEW_COUNT_MEDICINERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.S_VIEW_COUNT_MEDICINERowChangingEvent) Is Nothing) Then
                RaiseEvent S_VIEW_COUNT_MEDICINERowChanging(Me, New S_VIEW_COUNT_MEDICINERowChangeEvent(CType(e.Row,S_VIEW_COUNT_MEDICINERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.S_VIEW_COUNT_MEDICINERowDeletedEvent) Is Nothing) Then
                RaiseEvent S_VIEW_COUNT_MEDICINERowDeleted(Me, New S_VIEW_COUNT_MEDICINERowChangeEvent(CType(e.Row,S_VIEW_COUNT_MEDICINERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.S_VIEW_COUNT_MEDICINERowDeletingEvent) Is Nothing) Then
                RaiseEvent S_VIEW_COUNT_MEDICINERowDeleting(Me, New S_VIEW_COUNT_MEDICINERowChangeEvent(CType(e.Row,S_VIEW_COUNT_MEDICINERow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveS_VIEW_COUNT_MEDICINERow(ByVal row As S_VIEW_COUNT_MEDICINERow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS_KSPAYMENT = New DS_KSPAYMENT
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "S_VIEW_COUNT_MEDICINEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class S_TEM_LISTPAYMENTRow
        Inherits Global.System.Data.DataRow
        
        Private tableS_TEM_LISTPAYMENT As S_TEM_LISTPAYMENTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableS_TEM_LISTPAYMENT = CType(Me.Table,S_TEM_LISTPAYMENTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WAIT_PAY_NO() As Decimal
            Get
                Return CType(Me(Me.tableS_TEM_LISTPAYMENT.WAIT_PAY_NOColumn),Decimal)
            End Get
            Set
                Me(Me.tableS_TEM_LISTPAYMENT.WAIT_PAY_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WAITING_NO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableS_TEM_LISTPAYMENT.WAITING_NOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WAITING_NO' in table 'S_TEM_LISTPAYMENT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_TEM_LISTPAYMENT.WAITING_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PAY_ON() As String
            Get
                Try 
                    Return CType(Me(Me.tableS_TEM_LISTPAYMENT.PAY_ONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PAY_ON' in table 'S_TEM_LISTPAYMENT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_TEM_LISTPAYMENT.PAY_ONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRICE_PAY() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableS_TEM_LISTPAYMENT.PRICE_PAYColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRICE_PAY' in table 'S_TEM_LISTPAYMENT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_TEM_LISTPAYMENT.PRICE_PAYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWAITING_NONull() As Boolean
            Return Me.IsNull(Me.tableS_TEM_LISTPAYMENT.WAITING_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWAITING_NONull()
            Me(Me.tableS_TEM_LISTPAYMENT.WAITING_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPAY_ONNull() As Boolean
            Return Me.IsNull(Me.tableS_TEM_LISTPAYMENT.PAY_ONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPAY_ONNull()
            Me(Me.tableS_TEM_LISTPAYMENT.PAY_ONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRICE_PAYNull() As Boolean
            Return Me.IsNull(Me.tableS_TEM_LISTPAYMENT.PRICE_PAYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRICE_PAYNull()
            Me(Me.tableS_TEM_LISTPAYMENT.PRICE_PAYColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class S_EXCHANGE_RATERow
        Inherits Global.System.Data.DataRow
        
        Private tableS_EXCHANGE_RATE As S_EXCHANGE_RATEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableS_EXCHANGE_RATE = CType(Me.Table,S_EXCHANGE_RATEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ExchangeRate() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableS_EXCHANGE_RATE.ExchangeRateColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ExchangeRate' in table 'S_EXCHANGE_RATE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_EXCHANGE_RATE.ExchangeRateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsExchangeRateNull() As Boolean
            Return Me.IsNull(Me.tableS_EXCHANGE_RATE.ExchangeRateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetExchangeRateNull()
            Me(Me.tableS_EXCHANGE_RATE.ExchangeRateColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class S_INVOICE_KSRow
        Inherits Global.System.Data.DataRow
        
        Private tableS_INVOICE_KS As S_INVOICE_KSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableS_INVOICE_KS = CType(Me.Table,S_INVOICE_KSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVOICE_ID() As Decimal
            Get
                Return CType(Me(Me.tableS_INVOICE_KS.INVOICE_IDColumn),Decimal)
            End Get
            Set
                Me(Me.tableS_INVOICE_KS.INVOICE_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WAITING_ID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableS_INVOICE_KS.WAITING_IDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WAITING_ID' in table 'S_INVOICE_KS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_INVOICE_KS.WAITING_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVOICE_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableS_INVOICE_KS.INVOICE_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'INVOICE_DATE' in table 'S_INVOICE_KS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_INVOICE_KS.INVOICE_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PATIENT_NO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableS_INVOICE_KS.PATIENT_NOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PATIENT_NO' in table 'S_INVOICE_KS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_INVOICE_KS.PATIENT_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTAL() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableS_INVOICE_KS.TOTALColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTAL' in table 'S_INVOICE_KS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_INVOICE_KS.TOTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUB_TOTAL() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableS_INVOICE_KS.SUB_TOTALColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SUB_TOTAL' in table 'S_INVOICE_KS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_INVOICE_KS.SUB_TOTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EXCHANGE_RATE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableS_INVOICE_KS.EXCHANGE_RATEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXCHANGE_RATE' in table 'S_INVOICE_KS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_INVOICE_KS.EXCHANGE_RATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CASH_RECEIVED() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableS_INVOICE_KS.CASH_RECEIVEDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CASH_RECEIVED' in table 'S_INVOICE_KS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_INVOICE_KS.CASH_RECEIVEDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CHANG() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableS_INVOICE_KS.CHANGColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CHANG' in table 'S_INVOICE_KS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_INVOICE_KS.CHANGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RECEIVED_BY() As String
            Get
                Try 
                    Return CType(Me(Me.tableS_INVOICE_KS.RECEIVED_BYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECEIVED_BY' in table 'S_INVOICE_KS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_INVOICE_KS.RECEIVED_BYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTAL_DISCOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableS_INVOICE_KS.TOTAL_DISCOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTAL_DISCOUNT' in table 'S_INVOICE_KS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_INVOICE_KS.TOTAL_DISCOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DIS_CONSULT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableS_INVOICE_KS.DIS_CONSULTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DIS_CONSULT' in table 'S_INVOICE_KS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_INVOICE_KS.DIS_CONSULTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DIS_OPERATION() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableS_INVOICE_KS.DIS_OPERATIONColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DIS_OPERATION' in table 'S_INVOICE_KS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_INVOICE_KS.DIS_OPERATIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DIS_MEDICINE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableS_INVOICE_KS.DIS_MEDICINEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DIS_MEDICINE' in table 'S_INVOICE_KS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_INVOICE_KS.DIS_MEDICINEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IS_DELETE() As String
            Get
                Try 
                    Return CType(Me(Me.tableS_INVOICE_KS.IS_DELETEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IS_DELETE' in table 'S_INVOICE_KS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_INVOICE_KS.IS_DELETEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PATIENT_NAME_ENG() As String
            Get
                Try 
                    Return CType(Me(Me.tableS_INVOICE_KS.PATIENT_NAME_ENGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PATIENT_NAME_ENG' in table 'S_INVOICE_KS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_INVOICE_KS.PATIENT_NAME_ENGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PATIENT_NAME_KH() As String
            Get
                Try 
                    Return CType(Me(Me.tableS_INVOICE_KS.PATIENT_NAME_KHColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PATIENT_NAME_KH' in table 'S_INVOICE_KS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_INVOICE_KS.PATIENT_NAME_KHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PATIENT_SEX() As String
            Get
                Try 
                    Return CType(Me(Me.tableS_INVOICE_KS.PATIENT_SEXColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PATIENT_SEX' in table 'S_INVOICE_KS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_INVOICE_KS.PATIENT_SEXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PATIENT_AGE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableS_INVOICE_KS.PATIENT_AGEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PATIENT_AGE' in table 'S_INVOICE_KS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_INVOICE_KS.PATIENT_AGEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BY_DOCTOR() As String
            Get
                Try 
                    Return CType(Me(Me.tableS_INVOICE_KS.BY_DOCTORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BY_DOCTOR' in table 'S_INVOICE_KS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_INVOICE_KS.BY_DOCTORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DIAGNOSIS() As String
            Get
                Try 
                    Return CType(Me(Me.tableS_INVOICE_KS.DIAGNOSISColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DIAGNOSIS' in table 'S_INVOICE_KS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_INVOICE_KS.DIAGNOSISColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTAL_CONSULT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableS_INVOICE_KS.TOTAL_CONSULTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTAL_CONSULT' in table 'S_INVOICE_KS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_INVOICE_KS.TOTAL_CONSULTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTAL_MEDICINCE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableS_INVOICE_KS.TOTAL_MEDICINCEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTAL_MEDICINCE' in table 'S_INVOICE_KS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_INVOICE_KS.TOTAL_MEDICINCEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DEPOSIT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableS_INVOICE_KS.DEPOSITColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DEPOSIT' in table 'S_INVOICE_KS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_INVOICE_KS.DEPOSITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWAITING_IDNull() As Boolean
            Return Me.IsNull(Me.tableS_INVOICE_KS.WAITING_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWAITING_IDNull()
            Me(Me.tableS_INVOICE_KS.WAITING_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINVOICE_DATENull() As Boolean
            Return Me.IsNull(Me.tableS_INVOICE_KS.INVOICE_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINVOICE_DATENull()
            Me(Me.tableS_INVOICE_KS.INVOICE_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPATIENT_NONull() As Boolean
            Return Me.IsNull(Me.tableS_INVOICE_KS.PATIENT_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPATIENT_NONull()
            Me(Me.tableS_INVOICE_KS.PATIENT_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTALNull() As Boolean
            Return Me.IsNull(Me.tableS_INVOICE_KS.TOTALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTALNull()
            Me(Me.tableS_INVOICE_KS.TOTALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUB_TOTALNull() As Boolean
            Return Me.IsNull(Me.tableS_INVOICE_KS.SUB_TOTALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUB_TOTALNull()
            Me(Me.tableS_INVOICE_KS.SUB_TOTALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEXCHANGE_RATENull() As Boolean
            Return Me.IsNull(Me.tableS_INVOICE_KS.EXCHANGE_RATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEXCHANGE_RATENull()
            Me(Me.tableS_INVOICE_KS.EXCHANGE_RATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCASH_RECEIVEDNull() As Boolean
            Return Me.IsNull(Me.tableS_INVOICE_KS.CASH_RECEIVEDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCASH_RECEIVEDNull()
            Me(Me.tableS_INVOICE_KS.CASH_RECEIVEDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCHANGNull() As Boolean
            Return Me.IsNull(Me.tableS_INVOICE_KS.CHANGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCHANGNull()
            Me(Me.tableS_INVOICE_KS.CHANGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRECEIVED_BYNull() As Boolean
            Return Me.IsNull(Me.tableS_INVOICE_KS.RECEIVED_BYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRECEIVED_BYNull()
            Me(Me.tableS_INVOICE_KS.RECEIVED_BYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTAL_DISCOUNTNull() As Boolean
            Return Me.IsNull(Me.tableS_INVOICE_KS.TOTAL_DISCOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTAL_DISCOUNTNull()
            Me(Me.tableS_INVOICE_KS.TOTAL_DISCOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDIS_CONSULTNull() As Boolean
            Return Me.IsNull(Me.tableS_INVOICE_KS.DIS_CONSULTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDIS_CONSULTNull()
            Me(Me.tableS_INVOICE_KS.DIS_CONSULTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDIS_OPERATIONNull() As Boolean
            Return Me.IsNull(Me.tableS_INVOICE_KS.DIS_OPERATIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDIS_OPERATIONNull()
            Me(Me.tableS_INVOICE_KS.DIS_OPERATIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDIS_MEDICINENull() As Boolean
            Return Me.IsNull(Me.tableS_INVOICE_KS.DIS_MEDICINEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDIS_MEDICINENull()
            Me(Me.tableS_INVOICE_KS.DIS_MEDICINEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIS_DELETENull() As Boolean
            Return Me.IsNull(Me.tableS_INVOICE_KS.IS_DELETEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIS_DELETENull()
            Me(Me.tableS_INVOICE_KS.IS_DELETEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPATIENT_NAME_ENGNull() As Boolean
            Return Me.IsNull(Me.tableS_INVOICE_KS.PATIENT_NAME_ENGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPATIENT_NAME_ENGNull()
            Me(Me.tableS_INVOICE_KS.PATIENT_NAME_ENGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPATIENT_NAME_KHNull() As Boolean
            Return Me.IsNull(Me.tableS_INVOICE_KS.PATIENT_NAME_KHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPATIENT_NAME_KHNull()
            Me(Me.tableS_INVOICE_KS.PATIENT_NAME_KHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPATIENT_SEXNull() As Boolean
            Return Me.IsNull(Me.tableS_INVOICE_KS.PATIENT_SEXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPATIENT_SEXNull()
            Me(Me.tableS_INVOICE_KS.PATIENT_SEXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPATIENT_AGENull() As Boolean
            Return Me.IsNull(Me.tableS_INVOICE_KS.PATIENT_AGEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPATIENT_AGENull()
            Me(Me.tableS_INVOICE_KS.PATIENT_AGEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBY_DOCTORNull() As Boolean
            Return Me.IsNull(Me.tableS_INVOICE_KS.BY_DOCTORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBY_DOCTORNull()
            Me(Me.tableS_INVOICE_KS.BY_DOCTORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDIAGNOSISNull() As Boolean
            Return Me.IsNull(Me.tableS_INVOICE_KS.DIAGNOSISColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDIAGNOSISNull()
            Me(Me.tableS_INVOICE_KS.DIAGNOSISColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTAL_CONSULTNull() As Boolean
            Return Me.IsNull(Me.tableS_INVOICE_KS.TOTAL_CONSULTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTAL_CONSULTNull()
            Me(Me.tableS_INVOICE_KS.TOTAL_CONSULTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTAL_MEDICINCENull() As Boolean
            Return Me.IsNull(Me.tableS_INVOICE_KS.TOTAL_MEDICINCEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTAL_MEDICINCENull()
            Me(Me.tableS_INVOICE_KS.TOTAL_MEDICINCEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDEPOSITNull() As Boolean
            Return Me.IsNull(Me.tableS_INVOICE_KS.DEPOSITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDEPOSITNull()
            Me(Me.tableS_INVOICE_KS.DEPOSITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetS_INVOICE_DETAILRows() As S_INVOICE_DETAILRow()
            If (Me.Table.ChildRelations("S_INVOICE_KS_S_INVOICE_DETAIL") Is Nothing) Then
                Return New S_INVOICE_DETAILRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("S_INVOICE_KS_S_INVOICE_DETAIL")),S_INVOICE_DETAILRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetS_PRESCRIPTIONRows() As S_PRESCRIPTIONRow()
            If (Me.Table.ChildRelations("S_INVOICE_KS_S_PRESCRIPTION") Is Nothing) Then
                Return New S_PRESCRIPTIONRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("S_INVOICE_KS_S_PRESCRIPTION")),S_PRESCRIPTIONRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class S_INVOICE_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tableS_INVOICE_DETAIL As S_INVOICE_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableS_INVOICE_DETAIL = CType(Me.Table,S_INVOICE_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IN_DETAIL_ID() As Decimal
            Get
                Return CType(Me(Me.tableS_INVOICE_DETAIL.IN_DETAIL_IDColumn),Decimal)
            End Get
            Set
                Me(Me.tableS_INVOICE_DETAIL.IN_DETAIL_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVOICE_NO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableS_INVOICE_DETAIL.INVOICE_NOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'INVOICE_NO' in table 'S_INVOICE_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_INVOICE_DETAIL.INVOICE_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESCRIPTION() As String
            Get
                Try 
                    Return CType(Me(Me.tableS_INVOICE_DETAIL.DESCRIPTIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DESCRIPTION' in table 'S_INVOICE_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_INVOICE_DETAIL.DESCRIPTIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QTY() As String
            Get
                Try 
                    Return CType(Me(Me.tableS_INVOICE_DETAIL.QTYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QTY' in table 'S_INVOICE_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_INVOICE_DETAIL.QTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UNIT() As String
            Get
                Try 
                    Return CType(Me(Me.tableS_INVOICE_DETAIL.UNITColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UNIT' in table 'S_INVOICE_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_INVOICE_DETAIL.UNITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRICE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableS_INVOICE_DETAIL.PRICEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRICE' in table 'S_INVOICE_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_INVOICE_DETAIL.PRICEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUB_TOTAL() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableS_INVOICE_DETAIL.SUB_TOTALColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SUB_TOTAL' in table 'S_INVOICE_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_INVOICE_DETAIL.SUB_TOTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property S_INVOICE_KSRow() As S_INVOICE_KSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("S_INVOICE_KS_S_INVOICE_DETAIL")),S_INVOICE_KSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("S_INVOICE_KS_S_INVOICE_DETAIL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINVOICE_NONull() As Boolean
            Return Me.IsNull(Me.tableS_INVOICE_DETAIL.INVOICE_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINVOICE_NONull()
            Me(Me.tableS_INVOICE_DETAIL.INVOICE_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tableS_INVOICE_DETAIL.DESCRIPTIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESCRIPTIONNull()
            Me(Me.tableS_INVOICE_DETAIL.DESCRIPTIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQTYNull() As Boolean
            Return Me.IsNull(Me.tableS_INVOICE_DETAIL.QTYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQTYNull()
            Me(Me.tableS_INVOICE_DETAIL.QTYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUNITNull() As Boolean
            Return Me.IsNull(Me.tableS_INVOICE_DETAIL.UNITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUNITNull()
            Me(Me.tableS_INVOICE_DETAIL.UNITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRICENull() As Boolean
            Return Me.IsNull(Me.tableS_INVOICE_DETAIL.PRICEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRICENull()
            Me(Me.tableS_INVOICE_DETAIL.PRICEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUB_TOTALNull() As Boolean
            Return Me.IsNull(Me.tableS_INVOICE_DETAIL.SUB_TOTALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUB_TOTALNull()
            Me(Me.tableS_INVOICE_DETAIL.SUB_TOTALColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class S_INVOICE_KSR_VIEWRow
        Inherits Global.System.Data.DataRow
        
        Private tableS_INVOICE_KSR_VIEW As S_INVOICE_KSR_VIEWDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableS_INVOICE_KSR_VIEW = CType(Me.Table,S_INVOICE_KSR_VIEWDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVOICE_ID() As Decimal
            Get
                Return CType(Me(Me.tableS_INVOICE_KSR_VIEW.INVOICE_IDColumn),Decimal)
            End Get
            Set
                Me(Me.tableS_INVOICE_KSR_VIEW.INVOICE_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WAITING_ID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableS_INVOICE_KSR_VIEW.WAITING_IDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WAITING_ID' in table 'S_INVOICE_KSR_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_INVOICE_KSR_VIEW.WAITING_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVOICE_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableS_INVOICE_KSR_VIEW.INVOICE_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'INVOICE_DATE' in table 'S_INVOICE_KSR_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_INVOICE_KSR_VIEW.INVOICE_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PATIENT_NO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableS_INVOICE_KSR_VIEW.PATIENT_NOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PATIENT_NO' in table 'S_INVOICE_KSR_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_INVOICE_KSR_VIEW.PATIENT_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PATIENT_NAME_ENG() As String
            Get
                Try 
                    Return CType(Me(Me.tableS_INVOICE_KSR_VIEW.PATIENT_NAME_ENGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PATIENT_NAME_ENG' in table 'S_INVOICE_KSR_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_INVOICE_KSR_VIEW.PATIENT_NAME_ENGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PATIENT_NAME_KH() As String
            Get
                Try 
                    Return CType(Me(Me.tableS_INVOICE_KSR_VIEW.PATIENT_NAME_KHColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PATIENT_NAME_KH' in table 'S_INVOICE_KSR_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_INVOICE_KSR_VIEW.PATIENT_NAME_KHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PATIENT_SEX() As String
            Get
                Try 
                    Return CType(Me(Me.tableS_INVOICE_KSR_VIEW.PATIENT_SEXColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PATIENT_SEX' in table 'S_INVOICE_KSR_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_INVOICE_KSR_VIEW.PATIENT_SEXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PATIENT_AGE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableS_INVOICE_KSR_VIEW.PATIENT_AGEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PATIENT_AGE' in table 'S_INVOICE_KSR_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_INVOICE_KSR_VIEW.PATIENT_AGEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTAL() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableS_INVOICE_KSR_VIEW.TOTALColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTAL' in table 'S_INVOICE_KSR_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_INVOICE_KSR_VIEW.TOTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUB_TOTAL() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableS_INVOICE_KSR_VIEW.SUB_TOTALColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SUB_TOTAL' in table 'S_INVOICE_KSR_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_INVOICE_KSR_VIEW.SUB_TOTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EXCHANGE_RATE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableS_INVOICE_KSR_VIEW.EXCHANGE_RATEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXCHANGE_RATE' in table 'S_INVOICE_KSR_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_INVOICE_KSR_VIEW.EXCHANGE_RATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CASH_RECEIVED() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableS_INVOICE_KSR_VIEW.CASH_RECEIVEDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CASH_RECEIVED' in table 'S_INVOICE_KSR_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_INVOICE_KSR_VIEW.CASH_RECEIVEDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CHANG() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableS_INVOICE_KSR_VIEW.CHANGColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CHANG' in table 'S_INVOICE_KSR_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_INVOICE_KSR_VIEW.CHANGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RECEIVED_BY() As String
            Get
                Try 
                    Return CType(Me(Me.tableS_INVOICE_KSR_VIEW.RECEIVED_BYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RECEIVED_BY' in table 'S_INVOICE_KSR_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_INVOICE_KSR_VIEW.RECEIVED_BYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTAL_DISCOUNT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableS_INVOICE_KSR_VIEW.TOTAL_DISCOUNTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTAL_DISCOUNT' in table 'S_INVOICE_KSR_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_INVOICE_KSR_VIEW.TOTAL_DISCOUNTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DIS_CONSULT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableS_INVOICE_KSR_VIEW.DIS_CONSULTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DIS_CONSULT' in table 'S_INVOICE_KSR_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_INVOICE_KSR_VIEW.DIS_CONSULTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DIS_OPERATION() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableS_INVOICE_KSR_VIEW.DIS_OPERATIONColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DIS_OPERATION' in table 'S_INVOICE_KSR_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_INVOICE_KSR_VIEW.DIS_OPERATIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DIS_MEDICINE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableS_INVOICE_KSR_VIEW.DIS_MEDICINEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DIS_MEDICINE' in table 'S_INVOICE_KSR_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_INVOICE_KSR_VIEW.DIS_MEDICINEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IS_DELETE() As String
            Get
                Try 
                    Return CType(Me(Me.tableS_INVOICE_KSR_VIEW.IS_DELETEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IS_DELETE' in table 'S_INVOICE_KSR_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_INVOICE_KSR_VIEW.IS_DELETEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IN_DETAIL_ID() As Decimal
            Get
                Return CType(Me(Me.tableS_INVOICE_KSR_VIEW.IN_DETAIL_IDColumn),Decimal)
            End Get
            Set
                Me(Me.tableS_INVOICE_KSR_VIEW.IN_DETAIL_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESCRIPTION() As String
            Get
                Try 
                    Return CType(Me(Me.tableS_INVOICE_KSR_VIEW.DESCRIPTIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DESCRIPTION' in table 'S_INVOICE_KSR_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_INVOICE_KSR_VIEW.DESCRIPTIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QTY() As String
            Get
                Try 
                    Return CType(Me(Me.tableS_INVOICE_KSR_VIEW.QTYColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QTY' in table 'S_INVOICE_KSR_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_INVOICE_KSR_VIEW.QTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UNIT() As String
            Get
                Try 
                    Return CType(Me(Me.tableS_INVOICE_KSR_VIEW.UNITColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UNIT' in table 'S_INVOICE_KSR_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_INVOICE_KSR_VIEW.UNITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRICE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableS_INVOICE_KSR_VIEW.PRICEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRICE' in table 'S_INVOICE_KSR_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_INVOICE_KSR_VIEW.PRICEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Expr1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableS_INVOICE_KSR_VIEW.Expr1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Expr1' in table 'S_INVOICE_KSR_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_INVOICE_KSR_VIEW.Expr1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IS_GLASSES() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableS_INVOICE_KSR_VIEW.IS_GLASSESColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IS_GLASSES' in table 'S_INVOICE_KSR_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_INVOICE_KSR_VIEW.IS_GLASSESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTAL_CONSULT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableS_INVOICE_KSR_VIEW.TOTAL_CONSULTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTAL_CONSULT' in table 'S_INVOICE_KSR_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_INVOICE_KSR_VIEW.TOTAL_CONSULTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTAL_MEDICINCE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableS_INVOICE_KSR_VIEW.TOTAL_MEDICINCEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTAL_MEDICINCE' in table 'S_INVOICE_KSR_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_INVOICE_KSR_VIEW.TOTAL_MEDICINCEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DEPOSIT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableS_INVOICE_KSR_VIEW.DEPOSITColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DEPOSIT' in table 'S_INVOICE_KSR_VIEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_INVOICE_KSR_VIEW.DEPOSITColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWAITING_IDNull() As Boolean
            Return Me.IsNull(Me.tableS_INVOICE_KSR_VIEW.WAITING_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWAITING_IDNull()
            Me(Me.tableS_INVOICE_KSR_VIEW.WAITING_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINVOICE_DATENull() As Boolean
            Return Me.IsNull(Me.tableS_INVOICE_KSR_VIEW.INVOICE_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINVOICE_DATENull()
            Me(Me.tableS_INVOICE_KSR_VIEW.INVOICE_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPATIENT_NONull() As Boolean
            Return Me.IsNull(Me.tableS_INVOICE_KSR_VIEW.PATIENT_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPATIENT_NONull()
            Me(Me.tableS_INVOICE_KSR_VIEW.PATIENT_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPATIENT_NAME_ENGNull() As Boolean
            Return Me.IsNull(Me.tableS_INVOICE_KSR_VIEW.PATIENT_NAME_ENGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPATIENT_NAME_ENGNull()
            Me(Me.tableS_INVOICE_KSR_VIEW.PATIENT_NAME_ENGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPATIENT_NAME_KHNull() As Boolean
            Return Me.IsNull(Me.tableS_INVOICE_KSR_VIEW.PATIENT_NAME_KHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPATIENT_NAME_KHNull()
            Me(Me.tableS_INVOICE_KSR_VIEW.PATIENT_NAME_KHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPATIENT_SEXNull() As Boolean
            Return Me.IsNull(Me.tableS_INVOICE_KSR_VIEW.PATIENT_SEXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPATIENT_SEXNull()
            Me(Me.tableS_INVOICE_KSR_VIEW.PATIENT_SEXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPATIENT_AGENull() As Boolean
            Return Me.IsNull(Me.tableS_INVOICE_KSR_VIEW.PATIENT_AGEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPATIENT_AGENull()
            Me(Me.tableS_INVOICE_KSR_VIEW.PATIENT_AGEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTALNull() As Boolean
            Return Me.IsNull(Me.tableS_INVOICE_KSR_VIEW.TOTALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTALNull()
            Me(Me.tableS_INVOICE_KSR_VIEW.TOTALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUB_TOTALNull() As Boolean
            Return Me.IsNull(Me.tableS_INVOICE_KSR_VIEW.SUB_TOTALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUB_TOTALNull()
            Me(Me.tableS_INVOICE_KSR_VIEW.SUB_TOTALColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEXCHANGE_RATENull() As Boolean
            Return Me.IsNull(Me.tableS_INVOICE_KSR_VIEW.EXCHANGE_RATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEXCHANGE_RATENull()
            Me(Me.tableS_INVOICE_KSR_VIEW.EXCHANGE_RATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCASH_RECEIVEDNull() As Boolean
            Return Me.IsNull(Me.tableS_INVOICE_KSR_VIEW.CASH_RECEIVEDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCASH_RECEIVEDNull()
            Me(Me.tableS_INVOICE_KSR_VIEW.CASH_RECEIVEDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCHANGNull() As Boolean
            Return Me.IsNull(Me.tableS_INVOICE_KSR_VIEW.CHANGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCHANGNull()
            Me(Me.tableS_INVOICE_KSR_VIEW.CHANGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRECEIVED_BYNull() As Boolean
            Return Me.IsNull(Me.tableS_INVOICE_KSR_VIEW.RECEIVED_BYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRECEIVED_BYNull()
            Me(Me.tableS_INVOICE_KSR_VIEW.RECEIVED_BYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTAL_DISCOUNTNull() As Boolean
            Return Me.IsNull(Me.tableS_INVOICE_KSR_VIEW.TOTAL_DISCOUNTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTAL_DISCOUNTNull()
            Me(Me.tableS_INVOICE_KSR_VIEW.TOTAL_DISCOUNTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDIS_CONSULTNull() As Boolean
            Return Me.IsNull(Me.tableS_INVOICE_KSR_VIEW.DIS_CONSULTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDIS_CONSULTNull()
            Me(Me.tableS_INVOICE_KSR_VIEW.DIS_CONSULTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDIS_OPERATIONNull() As Boolean
            Return Me.IsNull(Me.tableS_INVOICE_KSR_VIEW.DIS_OPERATIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDIS_OPERATIONNull()
            Me(Me.tableS_INVOICE_KSR_VIEW.DIS_OPERATIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDIS_MEDICINENull() As Boolean
            Return Me.IsNull(Me.tableS_INVOICE_KSR_VIEW.DIS_MEDICINEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDIS_MEDICINENull()
            Me(Me.tableS_INVOICE_KSR_VIEW.DIS_MEDICINEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIS_DELETENull() As Boolean
            Return Me.IsNull(Me.tableS_INVOICE_KSR_VIEW.IS_DELETEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIS_DELETENull()
            Me(Me.tableS_INVOICE_KSR_VIEW.IS_DELETEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tableS_INVOICE_KSR_VIEW.DESCRIPTIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESCRIPTIONNull()
            Me(Me.tableS_INVOICE_KSR_VIEW.DESCRIPTIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQTYNull() As Boolean
            Return Me.IsNull(Me.tableS_INVOICE_KSR_VIEW.QTYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQTYNull()
            Me(Me.tableS_INVOICE_KSR_VIEW.QTYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUNITNull() As Boolean
            Return Me.IsNull(Me.tableS_INVOICE_KSR_VIEW.UNITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUNITNull()
            Me(Me.tableS_INVOICE_KSR_VIEW.UNITColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRICENull() As Boolean
            Return Me.IsNull(Me.tableS_INVOICE_KSR_VIEW.PRICEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRICENull()
            Me(Me.tableS_INVOICE_KSR_VIEW.PRICEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsExpr1Null() As Boolean
            Return Me.IsNull(Me.tableS_INVOICE_KSR_VIEW.Expr1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetExpr1Null()
            Me(Me.tableS_INVOICE_KSR_VIEW.Expr1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIS_GLASSESNull() As Boolean
            Return Me.IsNull(Me.tableS_INVOICE_KSR_VIEW.IS_GLASSESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIS_GLASSESNull()
            Me(Me.tableS_INVOICE_KSR_VIEW.IS_GLASSESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTAL_CONSULTNull() As Boolean
            Return Me.IsNull(Me.tableS_INVOICE_KSR_VIEW.TOTAL_CONSULTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTAL_CONSULTNull()
            Me(Me.tableS_INVOICE_KSR_VIEW.TOTAL_CONSULTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTAL_MEDICINCENull() As Boolean
            Return Me.IsNull(Me.tableS_INVOICE_KSR_VIEW.TOTAL_MEDICINCEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTAL_MEDICINCENull()
            Me(Me.tableS_INVOICE_KSR_VIEW.TOTAL_MEDICINCEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDEPOSITNull() As Boolean
            Return Me.IsNull(Me.tableS_INVOICE_KSR_VIEW.DEPOSITColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDEPOSITNull()
            Me(Me.tableS_INVOICE_KSR_VIEW.DEPOSITColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class S_TEM_LISTMEDICINE_PAYMENTRow
        Inherits Global.System.Data.DataRow
        
        Private tableS_TEM_LISTMEDICINE_PAYMENT As S_TEM_LISTMEDICINE_PAYMENTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableS_TEM_LISTMEDICINE_PAYMENT = CType(Me.Table,S_TEM_LISTMEDICINE_PAYMENTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WAITING_NO_MEDICINE() As Decimal
            Get
                Return CType(Me(Me.tableS_TEM_LISTMEDICINE_PAYMENT.WAITING_NO_MEDICINEColumn),Decimal)
            End Get
            Set
                Me(Me.tableS_TEM_LISTMEDICINE_PAYMENT.WAITING_NO_MEDICINEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WAITING_NO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableS_TEM_LISTMEDICINE_PAYMENT.WAITING_NOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WAITING_NO' in table 'S_TEM_LISTMEDICINE_PAYMENT' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableS_TEM_LISTMEDICINE_PAYMENT.WAITING_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MEDICINE_ID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableS_TEM_LISTMEDICINE_PAYMENT.MEDICINE_IDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MEDICINE_ID' in table 'S_TEM_LISTMEDICINE_PAYMENT' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_TEM_LISTMEDICINE_PAYMENT.MEDICINE_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MEDICINE_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableS_TEM_LISTMEDICINE_PAYMENT.MEDICINE_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MEDICINE_NAME' in table 'S_TEM_LISTMEDICINE_PAYMENT' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_TEM_LISTMEDICINE_PAYMENT.MEDICINE_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MEDICINE_PRICE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableS_TEM_LISTMEDICINE_PAYMENT.MEDICINE_PRICEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MEDICINE_PRICE' in table 'S_TEM_LISTMEDICINE_PAYMENT' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_TEM_LISTMEDICINE_PAYMENT.MEDICINE_PRICEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MEDICINE_QTY() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableS_TEM_LISTMEDICINE_PAYMENT.MEDICINE_QTYColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MEDICINE_QTY' in table 'S_TEM_LISTMEDICINE_PAYMENT' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_TEM_LISTMEDICINE_PAYMENT.MEDICINE_QTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MEDICINE_TOTAL_PRICE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableS_TEM_LISTMEDICINE_PAYMENT.MEDICINE_TOTAL_PRICEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MEDICINE_TOTAL_PRICE' in table 'S_TEM_LISTMEDICINE_PAYMENT'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_TEM_LISTMEDICINE_PAYMENT.MEDICINE_TOTAL_PRICEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWAITING_NONull() As Boolean
            Return Me.IsNull(Me.tableS_TEM_LISTMEDICINE_PAYMENT.WAITING_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWAITING_NONull()
            Me(Me.tableS_TEM_LISTMEDICINE_PAYMENT.WAITING_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMEDICINE_IDNull() As Boolean
            Return Me.IsNull(Me.tableS_TEM_LISTMEDICINE_PAYMENT.MEDICINE_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMEDICINE_IDNull()
            Me(Me.tableS_TEM_LISTMEDICINE_PAYMENT.MEDICINE_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMEDICINE_NAMENull() As Boolean
            Return Me.IsNull(Me.tableS_TEM_LISTMEDICINE_PAYMENT.MEDICINE_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMEDICINE_NAMENull()
            Me(Me.tableS_TEM_LISTMEDICINE_PAYMENT.MEDICINE_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMEDICINE_PRICENull() As Boolean
            Return Me.IsNull(Me.tableS_TEM_LISTMEDICINE_PAYMENT.MEDICINE_PRICEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMEDICINE_PRICENull()
            Me(Me.tableS_TEM_LISTMEDICINE_PAYMENT.MEDICINE_PRICEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMEDICINE_QTYNull() As Boolean
            Return Me.IsNull(Me.tableS_TEM_LISTMEDICINE_PAYMENT.MEDICINE_QTYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMEDICINE_QTYNull()
            Me(Me.tableS_TEM_LISTMEDICINE_PAYMENT.MEDICINE_QTYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMEDICINE_TOTAL_PRICENull() As Boolean
            Return Me.IsNull(Me.tableS_TEM_LISTMEDICINE_PAYMENT.MEDICINE_TOTAL_PRICEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMEDICINE_TOTAL_PRICENull()
            Me(Me.tableS_TEM_LISTMEDICINE_PAYMENT.MEDICINE_TOTAL_PRICEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tblItemRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblItem As tblItemDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblItem = CType(Me.Table,tblItemDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemID() As Integer
            Get
                Return CType(Me(Me.tabletblItem.ItemIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblItem.ItemIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemCode() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblItem.ItemCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemCode' in table 'tblItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblItem.ItemCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CateID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblItem.CateIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CateID' in table 'tblItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblItem.CateIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemUnitID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblItem.ItemUnitIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemUnitID' in table 'tblItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblItem.ItemUnitIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LabourFacID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblItem.LabourFacIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LabourFacID' in table 'tblItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblItem.LabourFacIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemName() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblItem.ItemNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemName' in table 'tblItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblItem.ItemNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemDescription() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblItem.ItemDescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemDescription' in table 'tblItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblItem.ItemDescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemRegisterDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblItem.ItemRegisterDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemRegisterDate' in table 'tblItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblItem.ItemRegisterDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Barcode() As String
            Get
                Try 
                    Return CType(Me(Me.tabletblItem.BarcodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Barcode' in table 'tblItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblItem.BarcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VendorID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblItem.VendorIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VendorID' in table 'tblItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblItem.VendorIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ContainerID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblItem.ContainerIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ContainerID' in table 'tblItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblItem.ContainerIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UnitPrice() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletblItem.UnitPriceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UnitPrice' in table 'tblItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblItem.UnitPriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Picture() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tabletblItem.PictureColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Picture' in table 'tblItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblItem.PictureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DonatorID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletblItem.DonatorIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DonatorID' in table 'tblItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblItem.DonatorIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsMedicine() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletblItem.IsMedicineColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsMedicine' in table 'tblItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblItem.IsMedicineColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CurrencyID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletblItem.CurrencyIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CurrencyID' in table 'tblItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblItem.CurrencyIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateExpired() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletblItem.DateExpiredColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateExpired' in table 'tblItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblItem.DateExpiredColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CountryID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletblItem.CountryIDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CountryID' in table 'tblItem' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblItem.CountryIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemCodeNull() As Boolean
            Return Me.IsNull(Me.tabletblItem.ItemCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemCodeNull()
            Me(Me.tabletblItem.ItemCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCateIDNull() As Boolean
            Return Me.IsNull(Me.tabletblItem.CateIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCateIDNull()
            Me(Me.tabletblItem.CateIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemUnitIDNull() As Boolean
            Return Me.IsNull(Me.tabletblItem.ItemUnitIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemUnitIDNull()
            Me(Me.tabletblItem.ItemUnitIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLabourFacIDNull() As Boolean
            Return Me.IsNull(Me.tabletblItem.LabourFacIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLabourFacIDNull()
            Me(Me.tabletblItem.LabourFacIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemNameNull() As Boolean
            Return Me.IsNull(Me.tabletblItem.ItemNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemNameNull()
            Me(Me.tabletblItem.ItemNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemDescriptionNull() As Boolean
            Return Me.IsNull(Me.tabletblItem.ItemDescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemDescriptionNull()
            Me(Me.tabletblItem.ItemDescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemRegisterDateNull() As Boolean
            Return Me.IsNull(Me.tabletblItem.ItemRegisterDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemRegisterDateNull()
            Me(Me.tabletblItem.ItemRegisterDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBarcodeNull() As Boolean
            Return Me.IsNull(Me.tabletblItem.BarcodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBarcodeNull()
            Me(Me.tabletblItem.BarcodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVendorIDNull() As Boolean
            Return Me.IsNull(Me.tabletblItem.VendorIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVendorIDNull()
            Me(Me.tabletblItem.VendorIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsContainerIDNull() As Boolean
            Return Me.IsNull(Me.tabletblItem.ContainerIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetContainerIDNull()
            Me(Me.tabletblItem.ContainerIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnitPriceNull() As Boolean
            Return Me.IsNull(Me.tabletblItem.UnitPriceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnitPriceNull()
            Me(Me.tabletblItem.UnitPriceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPictureNull() As Boolean
            Return Me.IsNull(Me.tabletblItem.PictureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPictureNull()
            Me(Me.tabletblItem.PictureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDonatorIDNull() As Boolean
            Return Me.IsNull(Me.tabletblItem.DonatorIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDonatorIDNull()
            Me(Me.tabletblItem.DonatorIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsMedicineNull() As Boolean
            Return Me.IsNull(Me.tabletblItem.IsMedicineColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsMedicineNull()
            Me(Me.tabletblItem.IsMedicineColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCurrencyIDNull() As Boolean
            Return Me.IsNull(Me.tabletblItem.CurrencyIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCurrencyIDNull()
            Me(Me.tabletblItem.CurrencyIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateExpiredNull() As Boolean
            Return Me.IsNull(Me.tabletblItem.DateExpiredColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateExpiredNull()
            Me(Me.tabletblItem.DateExpiredColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCountryIDNull() As Boolean
            Return Me.IsNull(Me.tabletblItem.CountryIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCountryIDNull()
            Me(Me.tabletblItem.CountryIDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class S_PRESCRIPTIONRow
        Inherits Global.System.Data.DataRow
        
        Private tableS_PRESCRIPTION As S_PRESCRIPTIONDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableS_PRESCRIPTION = CType(Me.Table,S_PRESCRIPTIONDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRES_ID() As Decimal
            Get
                Return CType(Me(Me.tableS_PRESCRIPTION.PRES_IDColumn),Decimal)
            End Get
            Set
                Me(Me.tableS_PRESCRIPTION.PRES_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WAITING_ID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableS_PRESCRIPTION.WAITING_IDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WAITING_ID' in table 'S_PRESCRIPTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_PRESCRIPTION.WAITING_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PATIENT_NO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableS_PRESCRIPTION.PATIENT_NOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PATIENT_NO' in table 'S_PRESCRIPTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_PRESCRIPTION.PATIENT_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MEDICINCE_ID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableS_PRESCRIPTION.MEDICINCE_IDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MEDICINCE_ID' in table 'S_PRESCRIPTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_PRESCRIPTION.MEDICINCE_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MEDICINCE_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableS_PRESCRIPTION.MEDICINCE_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MEDICINCE_NAME' in table 'S_PRESCRIPTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_PRESCRIPTION.MEDICINCE_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORDINANCE() As String
            Get
                Try 
                    Return CType(Me(Me.tableS_PRESCRIPTION.ORDINANCEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ORDINANCE' in table 'S_PRESCRIPTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_PRESCRIPTION.ORDINANCEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MEDICINCE_QTY() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableS_PRESCRIPTION.MEDICINCE_QTYColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MEDICINCE_QTY' in table 'S_PRESCRIPTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_PRESCRIPTION.MEDICINCE_QTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MEDICINCE_PRICE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableS_PRESCRIPTION.MEDICINCE_PRICEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MEDICINCE_PRICE' in table 'S_PRESCRIPTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_PRESCRIPTION.MEDICINCE_PRICEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTAL_PRICE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableS_PRESCRIPTION.TOTAL_PRICEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTAL_PRICE' in table 'S_PRESCRIPTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_PRESCRIPTION.TOTAL_PRICEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USAGE() As String
            Get
                Try 
                    Return CType(Me(Me.tableS_PRESCRIPTION.USAGEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'USAGE' in table 'S_PRESCRIPTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_PRESCRIPTION.USAGEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRESCRIP_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableS_PRESCRIPTION.PRESCRIP_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRESCRIP_DATE' in table 'S_PRESCRIPTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_PRESCRIPTION.PRESCRIP_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property S_INVOICE_KSRow() As S_INVOICE_KSRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("S_INVOICE_KS_S_PRESCRIPTION")),S_INVOICE_KSRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("S_INVOICE_KS_S_PRESCRIPTION"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWAITING_IDNull() As Boolean
            Return Me.IsNull(Me.tableS_PRESCRIPTION.WAITING_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWAITING_IDNull()
            Me(Me.tableS_PRESCRIPTION.WAITING_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPATIENT_NONull() As Boolean
            Return Me.IsNull(Me.tableS_PRESCRIPTION.PATIENT_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPATIENT_NONull()
            Me(Me.tableS_PRESCRIPTION.PATIENT_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMEDICINCE_IDNull() As Boolean
            Return Me.IsNull(Me.tableS_PRESCRIPTION.MEDICINCE_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMEDICINCE_IDNull()
            Me(Me.tableS_PRESCRIPTION.MEDICINCE_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMEDICINCE_NAMENull() As Boolean
            Return Me.IsNull(Me.tableS_PRESCRIPTION.MEDICINCE_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMEDICINCE_NAMENull()
            Me(Me.tableS_PRESCRIPTION.MEDICINCE_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsORDINANCENull() As Boolean
            Return Me.IsNull(Me.tableS_PRESCRIPTION.ORDINANCEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetORDINANCENull()
            Me(Me.tableS_PRESCRIPTION.ORDINANCEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMEDICINCE_QTYNull() As Boolean
            Return Me.IsNull(Me.tableS_PRESCRIPTION.MEDICINCE_QTYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMEDICINCE_QTYNull()
            Me(Me.tableS_PRESCRIPTION.MEDICINCE_QTYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMEDICINCE_PRICENull() As Boolean
            Return Me.IsNull(Me.tableS_PRESCRIPTION.MEDICINCE_PRICEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMEDICINCE_PRICENull()
            Me(Me.tableS_PRESCRIPTION.MEDICINCE_PRICEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTAL_PRICENull() As Boolean
            Return Me.IsNull(Me.tableS_PRESCRIPTION.TOTAL_PRICEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTAL_PRICENull()
            Me(Me.tableS_PRESCRIPTION.TOTAL_PRICEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUSAGENull() As Boolean
            Return Me.IsNull(Me.tableS_PRESCRIPTION.USAGEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUSAGENull()
            Me(Me.tableS_PRESCRIPTION.USAGEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRESCRIP_DATENull() As Boolean
            Return Me.IsNull(Me.tableS_PRESCRIPTION.PRESCRIP_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRESCRIP_DATENull()
            Me(Me.tableS_PRESCRIPTION.PRESCRIP_DATEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class S_COUNT_MEDICINE_AND_GLASSESRow
        Inherits Global.System.Data.DataRow
        
        Private tableS_COUNT_MEDICINE_AND_GLASSES As S_COUNT_MEDICINE_AND_GLASSESDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableS_COUNT_MEDICINE_AND_GLASSES = CType(Me.Table,S_COUNT_MEDICINE_AND_GLASSESDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVOICE_ID() As Decimal
            Get
                Return CType(Me(Me.tableS_COUNT_MEDICINE_AND_GLASSES.INVOICE_IDColumn),Decimal)
            End Get
            Set
                Me(Me.tableS_COUNT_MEDICINE_AND_GLASSES.INVOICE_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVOICE_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableS_COUNT_MEDICINE_AND_GLASSES.INVOICE_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'INVOICE_DATE' in table 'S_COUNT_MEDICINE_AND_GLASSES' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_COUNT_MEDICINE_AND_GLASSES.INVOICE_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PATIENT_NO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableS_COUNT_MEDICINE_AND_GLASSES.PATIENT_NOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PATIENT_NO' in table 'S_COUNT_MEDICINE_AND_GLASSES' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_COUNT_MEDICINE_AND_GLASSES.PATIENT_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PATIENT_NAME_ENG() As String
            Get
                Try 
                    Return CType(Me(Me.tableS_COUNT_MEDICINE_AND_GLASSES.PATIENT_NAME_ENGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PATIENT_NAME_ENG' in table 'S_COUNT_MEDICINE_AND_GLASSES' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_COUNT_MEDICINE_AND_GLASSES.PATIENT_NAME_ENGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PATIENT_NAME_KH() As String
            Get
                Try 
                    Return CType(Me(Me.tableS_COUNT_MEDICINE_AND_GLASSES.PATIENT_NAME_KHColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PATIENT_NAME_KH' in table 'S_COUNT_MEDICINE_AND_GLASSES' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_COUNT_MEDICINE_AND_GLASSES.PATIENT_NAME_KHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PATIENT_SEX() As String
            Get
                Try 
                    Return CType(Me(Me.tableS_COUNT_MEDICINE_AND_GLASSES.PATIENT_SEXColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PATIENT_SEX' in table 'S_COUNT_MEDICINE_AND_GLASSES' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_COUNT_MEDICINE_AND_GLASSES.PATIENT_SEXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PATIENT_AGE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableS_COUNT_MEDICINE_AND_GLASSES.PATIENT_AGEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PATIENT_AGE' in table 'S_COUNT_MEDICINE_AND_GLASSES' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_COUNT_MEDICINE_AND_GLASSES.PATIENT_AGEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IS_GLASSES() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableS_COUNT_MEDICINE_AND_GLASSES.IS_GLASSESColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IS_GLASSES' in table 'S_COUNT_MEDICINE_AND_GLASSES' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_COUNT_MEDICINE_AND_GLASSES.IS_GLASSESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MEDICINCE_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableS_COUNT_MEDICINE_AND_GLASSES.MEDICINCE_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MEDICINCE_NAME' in table 'S_COUNT_MEDICINE_AND_GLASSES' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_COUNT_MEDICINE_AND_GLASSES.MEDICINCE_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MEDICINCE_QTY() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableS_COUNT_MEDICINE_AND_GLASSES.MEDICINCE_QTYColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MEDICINCE_QTY' in table 'S_COUNT_MEDICINE_AND_GLASSES' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_COUNT_MEDICINE_AND_GLASSES.MEDICINCE_QTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINVOICE_DATENull() As Boolean
            Return Me.IsNull(Me.tableS_COUNT_MEDICINE_AND_GLASSES.INVOICE_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINVOICE_DATENull()
            Me(Me.tableS_COUNT_MEDICINE_AND_GLASSES.INVOICE_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPATIENT_NONull() As Boolean
            Return Me.IsNull(Me.tableS_COUNT_MEDICINE_AND_GLASSES.PATIENT_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPATIENT_NONull()
            Me(Me.tableS_COUNT_MEDICINE_AND_GLASSES.PATIENT_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPATIENT_NAME_ENGNull() As Boolean
            Return Me.IsNull(Me.tableS_COUNT_MEDICINE_AND_GLASSES.PATIENT_NAME_ENGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPATIENT_NAME_ENGNull()
            Me(Me.tableS_COUNT_MEDICINE_AND_GLASSES.PATIENT_NAME_ENGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPATIENT_NAME_KHNull() As Boolean
            Return Me.IsNull(Me.tableS_COUNT_MEDICINE_AND_GLASSES.PATIENT_NAME_KHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPATIENT_NAME_KHNull()
            Me(Me.tableS_COUNT_MEDICINE_AND_GLASSES.PATIENT_NAME_KHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPATIENT_SEXNull() As Boolean
            Return Me.IsNull(Me.tableS_COUNT_MEDICINE_AND_GLASSES.PATIENT_SEXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPATIENT_SEXNull()
            Me(Me.tableS_COUNT_MEDICINE_AND_GLASSES.PATIENT_SEXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPATIENT_AGENull() As Boolean
            Return Me.IsNull(Me.tableS_COUNT_MEDICINE_AND_GLASSES.PATIENT_AGEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPATIENT_AGENull()
            Me(Me.tableS_COUNT_MEDICINE_AND_GLASSES.PATIENT_AGEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIS_GLASSESNull() As Boolean
            Return Me.IsNull(Me.tableS_COUNT_MEDICINE_AND_GLASSES.IS_GLASSESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIS_GLASSESNull()
            Me(Me.tableS_COUNT_MEDICINE_AND_GLASSES.IS_GLASSESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMEDICINCE_NAMENull() As Boolean
            Return Me.IsNull(Me.tableS_COUNT_MEDICINE_AND_GLASSES.MEDICINCE_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMEDICINCE_NAMENull()
            Me(Me.tableS_COUNT_MEDICINE_AND_GLASSES.MEDICINCE_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMEDICINCE_QTYNull() As Boolean
            Return Me.IsNull(Me.tableS_COUNT_MEDICINE_AND_GLASSES.MEDICINCE_QTYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMEDICINCE_QTYNull()
            Me(Me.tableS_COUNT_MEDICINE_AND_GLASSES.MEDICINCE_QTYColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class S_COUNT_GLASSESSRow
        Inherits Global.System.Data.DataRow
        
        Private tableS_COUNT_GLASSESS As S_COUNT_GLASSESSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableS_COUNT_GLASSESS = CType(Me.Table,S_COUNT_GLASSESSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVOICE_ID() As Decimal
            Get
                Return CType(Me(Me.tableS_COUNT_GLASSESS.INVOICE_IDColumn),Decimal)
            End Get
            Set
                Me(Me.tableS_COUNT_GLASSESS.INVOICE_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WAITING_ID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableS_COUNT_GLASSESS.WAITING_IDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WAITING_ID' in table 'S_COUNT_GLASSESS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_COUNT_GLASSESS.WAITING_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVOICE_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableS_COUNT_GLASSESS.INVOICE_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'INVOICE_DATE' in table 'S_COUNT_GLASSESS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_COUNT_GLASSESS.INVOICE_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PATIENT_NO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableS_COUNT_GLASSESS.PATIENT_NOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PATIENT_NO' in table 'S_COUNT_GLASSESS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_COUNT_GLASSESS.PATIENT_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PATIENT_NAME_ENG() As String
            Get
                Try 
                    Return CType(Me(Me.tableS_COUNT_GLASSESS.PATIENT_NAME_ENGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PATIENT_NAME_ENG' in table 'S_COUNT_GLASSESS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_COUNT_GLASSESS.PATIENT_NAME_ENGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PATIENT_NAME_KH() As String
            Get
                Try 
                    Return CType(Me(Me.tableS_COUNT_GLASSESS.PATIENT_NAME_KHColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PATIENT_NAME_KH' in table 'S_COUNT_GLASSESS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_COUNT_GLASSESS.PATIENT_NAME_KHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PATIENT_SEX() As String
            Get
                Try 
                    Return CType(Me(Me.tableS_COUNT_GLASSESS.PATIENT_SEXColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PATIENT_SEX' in table 'S_COUNT_GLASSESS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_COUNT_GLASSESS.PATIENT_SEXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PATIENT_AGE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableS_COUNT_GLASSESS.PATIENT_AGEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PATIENT_AGE' in table 'S_COUNT_GLASSESS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_COUNT_GLASSESS.PATIENT_AGEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DIAGNOSIS() As String
            Get
                Try 
                    Return CType(Me(Me.tableS_COUNT_GLASSESS.DIAGNOSISColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DIAGNOSIS' in table 'S_COUNT_GLASSESS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_COUNT_GLASSESS.DIAGNOSISColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IS_ON_EYE() As String
            Get
                Try 
                    Return CType(Me(Me.tableS_COUNT_GLASSESS.IS_ON_EYEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IS_ON_EYE' in table 'S_COUNT_GLASSESS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_COUNT_GLASSESS.IS_ON_EYEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IS_GLASSES() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableS_COUNT_GLASSESS.IS_GLASSESColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IS_GLASSES' in table 'S_COUNT_GLASSESS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_COUNT_GLASSESS.IS_GLASSESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWAITING_IDNull() As Boolean
            Return Me.IsNull(Me.tableS_COUNT_GLASSESS.WAITING_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWAITING_IDNull()
            Me(Me.tableS_COUNT_GLASSESS.WAITING_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINVOICE_DATENull() As Boolean
            Return Me.IsNull(Me.tableS_COUNT_GLASSESS.INVOICE_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINVOICE_DATENull()
            Me(Me.tableS_COUNT_GLASSESS.INVOICE_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPATIENT_NONull() As Boolean
            Return Me.IsNull(Me.tableS_COUNT_GLASSESS.PATIENT_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPATIENT_NONull()
            Me(Me.tableS_COUNT_GLASSESS.PATIENT_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPATIENT_NAME_ENGNull() As Boolean
            Return Me.IsNull(Me.tableS_COUNT_GLASSESS.PATIENT_NAME_ENGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPATIENT_NAME_ENGNull()
            Me(Me.tableS_COUNT_GLASSESS.PATIENT_NAME_ENGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPATIENT_NAME_KHNull() As Boolean
            Return Me.IsNull(Me.tableS_COUNT_GLASSESS.PATIENT_NAME_KHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPATIENT_NAME_KHNull()
            Me(Me.tableS_COUNT_GLASSESS.PATIENT_NAME_KHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPATIENT_SEXNull() As Boolean
            Return Me.IsNull(Me.tableS_COUNT_GLASSESS.PATIENT_SEXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPATIENT_SEXNull()
            Me(Me.tableS_COUNT_GLASSESS.PATIENT_SEXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPATIENT_AGENull() As Boolean
            Return Me.IsNull(Me.tableS_COUNT_GLASSESS.PATIENT_AGEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPATIENT_AGENull()
            Me(Me.tableS_COUNT_GLASSESS.PATIENT_AGEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDIAGNOSISNull() As Boolean
            Return Me.IsNull(Me.tableS_COUNT_GLASSESS.DIAGNOSISColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDIAGNOSISNull()
            Me(Me.tableS_COUNT_GLASSESS.DIAGNOSISColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIS_ON_EYENull() As Boolean
            Return Me.IsNull(Me.tableS_COUNT_GLASSESS.IS_ON_EYEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIS_ON_EYENull()
            Me(Me.tableS_COUNT_GLASSESS.IS_ON_EYEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIS_GLASSESNull() As Boolean
            Return Me.IsNull(Me.tableS_COUNT_GLASSESS.IS_GLASSESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIS_GLASSESNull()
            Me(Me.tableS_COUNT_GLASSESS.IS_GLASSESColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class V_EYE_PRESCRIPTIONRow
        Inherits Global.System.Data.DataRow
        
        Private tableV_EYE_PRESCRIPTION As V_EYE_PRESCRIPTIONDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableV_EYE_PRESCRIPTION = CType(Me.Table,V_EYE_PRESCRIPTIONDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WAIT_ID() As Decimal
            Get
                Return CType(Me(Me.tableV_EYE_PRESCRIPTION.WAIT_IDColumn),Decimal)
            End Get
            Set
                Me(Me.tableV_EYE_PRESCRIPTION.WAIT_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DATE_WAITING() As Date
            Get
                Try 
                    Return CType(Me(Me.tableV_EYE_PRESCRIPTION.DATE_WAITINGColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATE_WAITING' in table 'V_EYE_PRESCRIPTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_EYE_PRESCRIPTION.DATE_WAITINGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PATIENT_NO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_EYE_PRESCRIPTION.PATIENT_NOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PATIENT_NO' in table 'V_EYE_PRESCRIPTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_EYE_PRESCRIPTION.PATIENT_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameEng() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_EYE_PRESCRIPTION.NameEngColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NameEng' in table 'V_EYE_PRESCRIPTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_EYE_PRESCRIPTION.NameEngColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameKhmer() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_EYE_PRESCRIPTION.NameKhmerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NameKhmer' in table 'V_EYE_PRESCRIPTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_EYE_PRESCRIPTION.NameKhmerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Age() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_EYE_PRESCRIPTION.AgeColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Age' in table 'V_EYE_PRESCRIPTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_EYE_PRESCRIPTION.AgeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sex() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_EYE_PRESCRIPTION.SexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sex' in table 'V_EYE_PRESCRIPTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_EYE_PRESCRIPTION.SexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DIAGNOSIS() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_EYE_PRESCRIPTION.DIAGNOSISColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DIAGNOSIS' in table 'V_EYE_PRESCRIPTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_EYE_PRESCRIPTION.DIAGNOSISColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RE() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_EYE_PRESCRIPTION.REColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RE' in table 'V_EYE_PRESCRIPTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_EYE_PRESCRIPTION.REColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LE() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_EYE_PRESCRIPTION.LEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LE' in table 'V_EYE_PRESCRIPTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_EYE_PRESCRIPTION.LEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RRE() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_EYE_PRESCRIPTION.RREColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RRE' in table 'V_EYE_PRESCRIPTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_EYE_PRESCRIPTION.RREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RREF() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_EYE_PRESCRIPTION.RREFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RREF' in table 'V_EYE_PRESCRIPTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_EYE_PRESCRIPTION.RREFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MEDICINCE_ID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_EYE_PRESCRIPTION.MEDICINCE_IDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MEDICINCE_ID' in table 'V_EYE_PRESCRIPTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_EYE_PRESCRIPTION.MEDICINCE_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MEDICINCE_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_EYE_PRESCRIPTION.MEDICINCE_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MEDICINCE_NAME' in table 'V_EYE_PRESCRIPTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_EYE_PRESCRIPTION.MEDICINCE_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORDINANCE() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_EYE_PRESCRIPTION.ORDINANCEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ORDINANCE' in table 'V_EYE_PRESCRIPTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_EYE_PRESCRIPTION.ORDINANCEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MEDICINCE_QTY() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_EYE_PRESCRIPTION.MEDICINCE_QTYColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MEDICINCE_QTY' in table 'V_EYE_PRESCRIPTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_EYE_PRESCRIPTION.MEDICINCE_QTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MEDICINCE_PRICE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_EYE_PRESCRIPTION.MEDICINCE_PRICEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MEDICINCE_PRICE' in table 'V_EYE_PRESCRIPTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_EYE_PRESCRIPTION.MEDICINCE_PRICEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTAL_PRICE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableV_EYE_PRESCRIPTION.TOTAL_PRICEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTAL_PRICE' in table 'V_EYE_PRESCRIPTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_EYE_PRESCRIPTION.TOTAL_PRICEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USAGE() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_EYE_PRESCRIPTION.USAGEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'USAGE' in table 'V_EYE_PRESCRIPTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_EYE_PRESCRIPTION.USAGEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRESCRIP_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableV_EYE_PRESCRIPTION.PRESCRIP_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PRESCRIP_DATE' in table 'V_EYE_PRESCRIPTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_EYE_PRESCRIPTION.PRESCRIP_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OPHTHAMOLOGIST() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_EYE_PRESCRIPTION.OPHTHAMOLOGISTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OPHTHAMOLOGIST' in table 'V_EYE_PRESCRIPTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_EYE_PRESCRIPTION.OPHTHAMOLOGISTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LLE() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_EYE_PRESCRIPTION.LLEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LLE' in table 'V_EYE_PRESCRIPTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_EYE_PRESCRIPTION.LLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IS_ON_EYE() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_EYE_PRESCRIPTION.IS_ON_EYEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IS_ON_EYE' in table 'V_EYE_PRESCRIPTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_EYE_PRESCRIPTION.IS_ON_EYEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IOPRE() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_EYE_PRESCRIPTION.IOPREColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IOPRE' in table 'V_EYE_PRESCRIPTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_EYE_PRESCRIPTION.IOPREColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IOPLE() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_EYE_PRESCRIPTION.IOPLEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IOPLE' in table 'V_EYE_PRESCRIPTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_EYE_PRESCRIPTION.IOPLEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RPH() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_EYE_PRESCRIPTION.RPHColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RPH' in table 'V_EYE_PRESCRIPTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_EYE_PRESCRIPTION.RPHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LPH() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_EYE_PRESCRIPTION.LPHColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LPH' in table 'V_EYE_PRESCRIPTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_EYE_PRESCRIPTION.LPHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LREF() As String
            Get
                Try 
                    Return CType(Me(Me.tableV_EYE_PRESCRIPTION.LREFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LREF' in table 'V_EYE_PRESCRIPTION' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableV_EYE_PRESCRIPTION.LREFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDATE_WAITINGNull() As Boolean
            Return Me.IsNull(Me.tableV_EYE_PRESCRIPTION.DATE_WAITINGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDATE_WAITINGNull()
            Me(Me.tableV_EYE_PRESCRIPTION.DATE_WAITINGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPATIENT_NONull() As Boolean
            Return Me.IsNull(Me.tableV_EYE_PRESCRIPTION.PATIENT_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPATIENT_NONull()
            Me(Me.tableV_EYE_PRESCRIPTION.PATIENT_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameEngNull() As Boolean
            Return Me.IsNull(Me.tableV_EYE_PRESCRIPTION.NameEngColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameEngNull()
            Me(Me.tableV_EYE_PRESCRIPTION.NameEngColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameKhmerNull() As Boolean
            Return Me.IsNull(Me.tableV_EYE_PRESCRIPTION.NameKhmerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameKhmerNull()
            Me(Me.tableV_EYE_PRESCRIPTION.NameKhmerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAgeNull() As Boolean
            Return Me.IsNull(Me.tableV_EYE_PRESCRIPTION.AgeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAgeNull()
            Me(Me.tableV_EYE_PRESCRIPTION.AgeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSexNull() As Boolean
            Return Me.IsNull(Me.tableV_EYE_PRESCRIPTION.SexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSexNull()
            Me(Me.tableV_EYE_PRESCRIPTION.SexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDIAGNOSISNull() As Boolean
            Return Me.IsNull(Me.tableV_EYE_PRESCRIPTION.DIAGNOSISColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDIAGNOSISNull()
            Me(Me.tableV_EYE_PRESCRIPTION.DIAGNOSISColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRENull() As Boolean
            Return Me.IsNull(Me.tableV_EYE_PRESCRIPTION.REColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRENull()
            Me(Me.tableV_EYE_PRESCRIPTION.REColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLENull() As Boolean
            Return Me.IsNull(Me.tableV_EYE_PRESCRIPTION.LEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLENull()
            Me(Me.tableV_EYE_PRESCRIPTION.LEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRRENull() As Boolean
            Return Me.IsNull(Me.tableV_EYE_PRESCRIPTION.RREColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRRENull()
            Me(Me.tableV_EYE_PRESCRIPTION.RREColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRREFNull() As Boolean
            Return Me.IsNull(Me.tableV_EYE_PRESCRIPTION.RREFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRREFNull()
            Me(Me.tableV_EYE_PRESCRIPTION.RREFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMEDICINCE_IDNull() As Boolean
            Return Me.IsNull(Me.tableV_EYE_PRESCRIPTION.MEDICINCE_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMEDICINCE_IDNull()
            Me(Me.tableV_EYE_PRESCRIPTION.MEDICINCE_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMEDICINCE_NAMENull() As Boolean
            Return Me.IsNull(Me.tableV_EYE_PRESCRIPTION.MEDICINCE_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMEDICINCE_NAMENull()
            Me(Me.tableV_EYE_PRESCRIPTION.MEDICINCE_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsORDINANCENull() As Boolean
            Return Me.IsNull(Me.tableV_EYE_PRESCRIPTION.ORDINANCEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetORDINANCENull()
            Me(Me.tableV_EYE_PRESCRIPTION.ORDINANCEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMEDICINCE_QTYNull() As Boolean
            Return Me.IsNull(Me.tableV_EYE_PRESCRIPTION.MEDICINCE_QTYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMEDICINCE_QTYNull()
            Me(Me.tableV_EYE_PRESCRIPTION.MEDICINCE_QTYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMEDICINCE_PRICENull() As Boolean
            Return Me.IsNull(Me.tableV_EYE_PRESCRIPTION.MEDICINCE_PRICEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMEDICINCE_PRICENull()
            Me(Me.tableV_EYE_PRESCRIPTION.MEDICINCE_PRICEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTAL_PRICENull() As Boolean
            Return Me.IsNull(Me.tableV_EYE_PRESCRIPTION.TOTAL_PRICEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTAL_PRICENull()
            Me(Me.tableV_EYE_PRESCRIPTION.TOTAL_PRICEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUSAGENull() As Boolean
            Return Me.IsNull(Me.tableV_EYE_PRESCRIPTION.USAGEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUSAGENull()
            Me(Me.tableV_EYE_PRESCRIPTION.USAGEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRESCRIP_DATENull() As Boolean
            Return Me.IsNull(Me.tableV_EYE_PRESCRIPTION.PRESCRIP_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRESCRIP_DATENull()
            Me(Me.tableV_EYE_PRESCRIPTION.PRESCRIP_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOPHTHAMOLOGISTNull() As Boolean
            Return Me.IsNull(Me.tableV_EYE_PRESCRIPTION.OPHTHAMOLOGISTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOPHTHAMOLOGISTNull()
            Me(Me.tableV_EYE_PRESCRIPTION.OPHTHAMOLOGISTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLLENull() As Boolean
            Return Me.IsNull(Me.tableV_EYE_PRESCRIPTION.LLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLLENull()
            Me(Me.tableV_EYE_PRESCRIPTION.LLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIS_ON_EYENull() As Boolean
            Return Me.IsNull(Me.tableV_EYE_PRESCRIPTION.IS_ON_EYEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIS_ON_EYENull()
            Me(Me.tableV_EYE_PRESCRIPTION.IS_ON_EYEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIOPRENull() As Boolean
            Return Me.IsNull(Me.tableV_EYE_PRESCRIPTION.IOPREColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIOPRENull()
            Me(Me.tableV_EYE_PRESCRIPTION.IOPREColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIOPLENull() As Boolean
            Return Me.IsNull(Me.tableV_EYE_PRESCRIPTION.IOPLEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIOPLENull()
            Me(Me.tableV_EYE_PRESCRIPTION.IOPLEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRPHNull() As Boolean
            Return Me.IsNull(Me.tableV_EYE_PRESCRIPTION.RPHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRPHNull()
            Me(Me.tableV_EYE_PRESCRIPTION.RPHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLPHNull() As Boolean
            Return Me.IsNull(Me.tableV_EYE_PRESCRIPTION.LPHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLPHNull()
            Me(Me.tableV_EYE_PRESCRIPTION.LPHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLREFNull() As Boolean
            Return Me.IsNull(Me.tableV_EYE_PRESCRIPTION.LREFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLREFNull()
            Me(Me.tableV_EYE_PRESCRIPTION.LREFColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class S_VIEW_COUNT_MEDICINERow
        Inherits Global.System.Data.DataRow
        
        Private tableS_VIEW_COUNT_MEDICINE As S_VIEW_COUNT_MEDICINEDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableS_VIEW_COUNT_MEDICINE = CType(Me.Table,S_VIEW_COUNT_MEDICINEDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVOICE_ID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableS_VIEW_COUNT_MEDICINE.INVOICE_IDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'INVOICE_ID' in table 'S_VIEW_COUNT_MEDICINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_VIEW_COUNT_MEDICINE.INVOICE_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INVOICE_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableS_VIEW_COUNT_MEDICINE.INVOICE_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'INVOICE_DATE' in table 'S_VIEW_COUNT_MEDICINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_VIEW_COUNT_MEDICINE.INVOICE_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PATIENT_NO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableS_VIEW_COUNT_MEDICINE.PATIENT_NOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PATIENT_NO' in table 'S_VIEW_COUNT_MEDICINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_VIEW_COUNT_MEDICINE.PATIENT_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PATIENT_NAME_ENG() As String
            Get
                Try 
                    Return CType(Me(Me.tableS_VIEW_COUNT_MEDICINE.PATIENT_NAME_ENGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PATIENT_NAME_ENG' in table 'S_VIEW_COUNT_MEDICINE' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_VIEW_COUNT_MEDICINE.PATIENT_NAME_ENGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PATIENT_NAME_KH() As String
            Get
                Try 
                    Return CType(Me(Me.tableS_VIEW_COUNT_MEDICINE.PATIENT_NAME_KHColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PATIENT_NAME_KH' in table 'S_VIEW_COUNT_MEDICINE' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableS_VIEW_COUNT_MEDICINE.PATIENT_NAME_KHColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PATIENT_SEX() As String
            Get
                Try 
                    Return CType(Me(Me.tableS_VIEW_COUNT_MEDICINE.PATIENT_SEXColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PATIENT_SEX' in table 'S_VIEW_COUNT_MEDICINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_VIEW_COUNT_MEDICINE.PATIENT_SEXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PATIENT_AGE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableS_VIEW_COUNT_MEDICINE.PATIENT_AGEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PATIENT_AGE' in table 'S_VIEW_COUNT_MEDICINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_VIEW_COUNT_MEDICINE.PATIENT_AGEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MEDICINE_ID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableS_VIEW_COUNT_MEDICINE.MEDICINE_IDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MEDICINE_ID' in table 'S_VIEW_COUNT_MEDICINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_VIEW_COUNT_MEDICINE.MEDICINE_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MEDICINE_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableS_VIEW_COUNT_MEDICINE.MEDICINE_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MEDICINE_NAME' in table 'S_VIEW_COUNT_MEDICINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_VIEW_COUNT_MEDICINE.MEDICINE_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MEDICINE_QTY() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableS_VIEW_COUNT_MEDICINE.MEDICINE_QTYColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MEDICINE_QTY' in table 'S_VIEW_COUNT_MEDICINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_VIEW_COUNT_MEDICINE.MEDICINE_QTYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IS_GLASSES() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableS_VIEW_COUNT_MEDICINE.IS_GLASSESColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IS_GLASSES' in table 'S_VIEW_COUNT_MEDICINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_VIEW_COUNT_MEDICINE.IS_GLASSESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WAITING_NO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableS_VIEW_COUNT_MEDICINE.WAITING_NOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WAITING_NO' in table 'S_VIEW_COUNT_MEDICINE' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableS_VIEW_COUNT_MEDICINE.WAITING_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINVOICE_IDNull() As Boolean
            Return Me.IsNull(Me.tableS_VIEW_COUNT_MEDICINE.INVOICE_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINVOICE_IDNull()
            Me(Me.tableS_VIEW_COUNT_MEDICINE.INVOICE_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINVOICE_DATENull() As Boolean
            Return Me.IsNull(Me.tableS_VIEW_COUNT_MEDICINE.INVOICE_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINVOICE_DATENull()
            Me(Me.tableS_VIEW_COUNT_MEDICINE.INVOICE_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPATIENT_NONull() As Boolean
            Return Me.IsNull(Me.tableS_VIEW_COUNT_MEDICINE.PATIENT_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPATIENT_NONull()
            Me(Me.tableS_VIEW_COUNT_MEDICINE.PATIENT_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPATIENT_NAME_ENGNull() As Boolean
            Return Me.IsNull(Me.tableS_VIEW_COUNT_MEDICINE.PATIENT_NAME_ENGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPATIENT_NAME_ENGNull()
            Me(Me.tableS_VIEW_COUNT_MEDICINE.PATIENT_NAME_ENGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPATIENT_NAME_KHNull() As Boolean
            Return Me.IsNull(Me.tableS_VIEW_COUNT_MEDICINE.PATIENT_NAME_KHColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPATIENT_NAME_KHNull()
            Me(Me.tableS_VIEW_COUNT_MEDICINE.PATIENT_NAME_KHColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPATIENT_SEXNull() As Boolean
            Return Me.IsNull(Me.tableS_VIEW_COUNT_MEDICINE.PATIENT_SEXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPATIENT_SEXNull()
            Me(Me.tableS_VIEW_COUNT_MEDICINE.PATIENT_SEXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPATIENT_AGENull() As Boolean
            Return Me.IsNull(Me.tableS_VIEW_COUNT_MEDICINE.PATIENT_AGEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPATIENT_AGENull()
            Me(Me.tableS_VIEW_COUNT_MEDICINE.PATIENT_AGEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMEDICINE_IDNull() As Boolean
            Return Me.IsNull(Me.tableS_VIEW_COUNT_MEDICINE.MEDICINE_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMEDICINE_IDNull()
            Me(Me.tableS_VIEW_COUNT_MEDICINE.MEDICINE_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMEDICINE_NAMENull() As Boolean
            Return Me.IsNull(Me.tableS_VIEW_COUNT_MEDICINE.MEDICINE_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMEDICINE_NAMENull()
            Me(Me.tableS_VIEW_COUNT_MEDICINE.MEDICINE_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMEDICINE_QTYNull() As Boolean
            Return Me.IsNull(Me.tableS_VIEW_COUNT_MEDICINE.MEDICINE_QTYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMEDICINE_QTYNull()
            Me(Me.tableS_VIEW_COUNT_MEDICINE.MEDICINE_QTYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIS_GLASSESNull() As Boolean
            Return Me.IsNull(Me.tableS_VIEW_COUNT_MEDICINE.IS_GLASSESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIS_GLASSESNull()
            Me(Me.tableS_VIEW_COUNT_MEDICINE.IS_GLASSESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWAITING_NONull() As Boolean
            Return Me.IsNull(Me.tableS_VIEW_COUNT_MEDICINE.WAITING_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWAITING_NONull()
            Me(Me.tableS_VIEW_COUNT_MEDICINE.WAITING_NOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class S_TEM_LISTPAYMENTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As S_TEM_LISTPAYMENTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As S_TEM_LISTPAYMENTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As S_TEM_LISTPAYMENTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class S_EXCHANGE_RATERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As S_EXCHANGE_RATERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As S_EXCHANGE_RATERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As S_EXCHANGE_RATERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class S_INVOICE_KSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As S_INVOICE_KSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As S_INVOICE_KSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As S_INVOICE_KSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class S_INVOICE_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As S_INVOICE_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As S_INVOICE_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As S_INVOICE_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class S_INVOICE_KSR_VIEWRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As S_INVOICE_KSR_VIEWRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As S_INVOICE_KSR_VIEWRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As S_INVOICE_KSR_VIEWRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class S_TEM_LISTMEDICINE_PAYMENTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As S_TEM_LISTMEDICINE_PAYMENTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As S_TEM_LISTMEDICINE_PAYMENTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As S_TEM_LISTMEDICINE_PAYMENTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tblItemRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblItemRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tblItemRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tblItemRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class S_PRESCRIPTIONRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As S_PRESCRIPTIONRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As S_PRESCRIPTIONRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As S_PRESCRIPTIONRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class S_COUNT_MEDICINE_AND_GLASSESRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As S_COUNT_MEDICINE_AND_GLASSESRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As S_COUNT_MEDICINE_AND_GLASSESRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As S_COUNT_MEDICINE_AND_GLASSESRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class S_COUNT_GLASSESSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As S_COUNT_GLASSESSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As S_COUNT_GLASSESSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As S_COUNT_GLASSESSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class V_EYE_PRESCRIPTIONRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As V_EYE_PRESCRIPTIONRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As V_EYE_PRESCRIPTIONRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As V_EYE_PRESCRIPTIONRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class S_VIEW_COUNT_MEDICINERowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As S_VIEW_COUNT_MEDICINERow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As S_VIEW_COUNT_MEDICINERow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As S_VIEW_COUNT_MEDICINERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DS_KSPAYMENTTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class S_TEM_LISTPAYMENTTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "S_TEM_LISTPAYMENT"
            tableMapping.ColumnMappings.Add("WAIT_PAY_NO", "WAIT_PAY_NO")
            tableMapping.ColumnMappings.Add("WAITING_NO", "WAITING_NO")
            tableMapping.ColumnMappings.Add("PAY_ON", "PAY_ON")
            tableMapping.ColumnMappings.Add("PRICE_PAY", "PRICE_PAY")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[S_TEM_LISTPAYMENT] WHERE (([WAIT_PAY_NO] = @Original_WAIT_PAY_"& _ 
                "NO) AND ((@IsNull_WAITING_NO = 1 AND [WAITING_NO] IS NULL) OR ([WAITING_NO] = @O"& _ 
                "riginal_WAITING_NO)) AND ((@IsNull_PAY_ON = 1 AND [PAY_ON] IS NULL) OR ([PAY_ON]"& _ 
                " = @Original_PAY_ON)) AND ((@IsNull_PRICE_PAY = 1 AND [PRICE_PAY] IS NULL) OR (["& _ 
                "PRICE_PAY] = @Original_PRICE_PAY)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WAIT_PAY_NO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "WAIT_PAY_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_WAITING_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WAITING_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WAITING_NO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "WAITING_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PAY_ON", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PAY_ON", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PAY_ON", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PAY_ON", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRICE_PAY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRICE_PAY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRICE_PAY", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "PRICE_PAY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[S_TEM_LISTPAYMENT] ([WAITING_NO], [PAY_ON], [PRICE_PAY]) VALUE"& _ 
                "S (@WAITING_NO, @PAY_ON, @PRICE_PAY);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT WAIT_PAY_NO, WAITING_NO, PAY_ON, P"& _ 
                "RICE_PAY FROM S_TEM_LISTPAYMENT WHERE (WAIT_PAY_NO = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WAITING_NO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "WAITING_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PAY_ON", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PAY_ON", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRICE_PAY", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "PRICE_PAY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[S_TEM_LISTPAYMENT] SET [WAITING_NO] = @WAITING_NO, [PAY_ON] = @PAY_"& _ 
                "ON, [PRICE_PAY] = @PRICE_PAY WHERE (([WAIT_PAY_NO] = @Original_WAIT_PAY_NO) AND "& _ 
                "((@IsNull_WAITING_NO = 1 AND [WAITING_NO] IS NULL) OR ([WAITING_NO] = @Original_"& _ 
                "WAITING_NO)) AND ((@IsNull_PAY_ON = 1 AND [PAY_ON] IS NULL) OR ([PAY_ON] = @Orig"& _ 
                "inal_PAY_ON)) AND ((@IsNull_PRICE_PAY = 1 AND [PRICE_PAY] IS NULL) OR ([PRICE_PA"& _ 
                "Y] = @Original_PRICE_PAY)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT WAIT_PAY_NO, WAITING_NO, PAY_ON, PRICE_PAY "& _ 
                "FROM S_TEM_LISTPAYMENT WHERE (WAIT_PAY_NO = @WAIT_PAY_NO)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WAITING_NO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "WAITING_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PAY_ON", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PAY_ON", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRICE_PAY", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "PRICE_PAY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WAIT_PAY_NO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "WAIT_PAY_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_WAITING_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WAITING_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WAITING_NO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "WAITING_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PAY_ON", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PAY_ON", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PAY_ON", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PAY_ON", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRICE_PAY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRICE_PAY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRICE_PAY", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "PRICE_PAY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WAIT_PAY_NO", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "WAIT_PAY_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.TakeoHospitalInventory.My.MySettings.Default.TakeoDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(3) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT WAIT_PAY_NO, WAITING_NO, PAY_ON, PRICE_PAY FROM dbo.S_TEM_LISTPAYMENT"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "DELETE FROM [dbo].[S_TEM_LISTPAYMENT] WHERE (([WAIT_PAY_NO] = @Original_WAIT_PAY_"& _ 
                "NO))"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WAIT_PAY_NO", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "WAIT_PAY_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT WAIT_PAY_NO, WAITING_NO, PAY_ON, PRICE_PAY FROM dbo.S_TEM_LISTPAYMENT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHE"& _ 
                "RE WAITING_NO=@WAITING_NO"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WAITING_NO", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "WAITING_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "INSERT INTO [dbo].[S_TEM_LISTPAYMENT] ([WAITING_NO], [PAY_ON], [PRICE_PAY]) VALUE"& _ 
                "S (@WAITING_NO, @PAY_ON, @PRICE_PAY);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WAITING_NO", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "WAITING_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PAY_ON", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "PAY_ON", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRICE_PAY", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 2, "PRICE_PAY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DS_KSPAYMENT.S_TEM_LISTPAYMENTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DS_KSPAYMENT.S_TEM_LISTPAYMENTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DS_KSPAYMENT.S_TEM_LISTPAYMENTDataTable = New DS_KSPAYMENT.S_TEM_LISTPAYMENTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As DS_KSPAYMENT.S_TEM_LISTPAYMENTDataTable, ByVal WAITING_NO As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (WAITING_NO.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(WAITING_NO.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectWaitingPayNo(ByVal WAITING_NO As Global.System.Nullable(Of Decimal)) As DS_KSPAYMENT.S_TEM_LISTPAYMENTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (WAITING_NO.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(WAITING_NO.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DS_KSPAYMENT.S_TEM_LISTPAYMENTDataTable = New DS_KSPAYMENT.S_TEM_LISTPAYMENTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DS_KSPAYMENT.S_TEM_LISTPAYMENTDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DS_KSPAYMENT) As Integer
            Return Me.Adapter.Update(dataSet, "S_TEM_LISTPAYMENT")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_WAIT_PAY_NO As Decimal, ByVal Original_WAITING_NO As Global.System.Nullable(Of Decimal), ByVal Original_PAY_ON As String, ByVal Original_PRICE_PAY As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_WAIT_PAY_NO,Decimal)
            If (Original_WAITING_NO.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_WAITING_NO.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_PAY_ON Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_PAY_ON,String)
            End If
            If (Original_PRICE_PAY.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_PRICE_PAY.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal WAITING_NO As Global.System.Nullable(Of Decimal), ByVal PAY_ON As String, ByVal PRICE_PAY As Global.System.Nullable(Of Decimal)) As Integer
            If (WAITING_NO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(WAITING_NO.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (PAY_ON Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(PAY_ON,String)
            End If
            If (PRICE_PAY.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(PRICE_PAY.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal WAITING_NO As Global.System.Nullable(Of Decimal), ByVal PAY_ON As String, ByVal PRICE_PAY As Global.System.Nullable(Of Decimal), ByVal Original_WAIT_PAY_NO As Decimal, ByVal Original_WAITING_NO As Global.System.Nullable(Of Decimal), ByVal Original_PAY_ON As String, ByVal Original_PRICE_PAY As Global.System.Nullable(Of Decimal), ByVal WAIT_PAY_NO As Decimal) As Integer
            If (WAITING_NO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(WAITING_NO.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (PAY_ON Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PAY_ON,String)
            End If
            If (PRICE_PAY.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(PRICE_PAY.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_WAIT_PAY_NO,Decimal)
            If (Original_WAITING_NO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_WAITING_NO.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Original_PAY_ON Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_PAY_ON,String)
            End If
            If (Original_PRICE_PAY.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_PRICE_PAY.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(WAIT_PAY_NO,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal WAITING_NO As Global.System.Nullable(Of Decimal), ByVal PAY_ON As String, ByVal PRICE_PAY As Global.System.Nullable(Of Decimal), ByVal Original_WAIT_PAY_NO As Decimal, ByVal Original_WAITING_NO As Global.System.Nullable(Of Decimal), ByVal Original_PAY_ON As String, ByVal Original_PRICE_PAY As Global.System.Nullable(Of Decimal)) As Integer
            Return Me.Update(WAITING_NO, PAY_ON, PRICE_PAY, Original_WAIT_PAY_NO, Original_WAITING_NO, Original_PAY_ON, Original_PRICE_PAY, Original_WAIT_PAY_NO)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, false)>  _
        Public Overloads Overridable Function DeleteWaitingPay(ByVal Original_WAIT_PAY_NO As Decimal) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            command.Parameters(0).Value = CType(Original_WAIT_PAY_NO,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, false)>  _
        Public Overloads Overridable Function InsertNewWaitingPayment(ByVal WAITING_NO As Global.System.Nullable(Of Decimal), ByVal PAY_ON As String, ByVal PRICE_PAY As Global.System.Nullable(Of Decimal)) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(3)
            If (WAITING_NO.HasValue = true) Then
                command.Parameters(0).Value = CType(WAITING_NO.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (PAY_ON Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(PAY_ON,String)
            End If
            If (PRICE_PAY.HasValue = true) Then
                command.Parameters(2).Value = CType(PRICE_PAY.Value,Decimal)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class S_EXCHANGE_RATETableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "S_EXCHANGE_RATE"
            tableMapping.ColumnMappings.Add("ExchangeRate", "ExchangeRate")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[S_EXCHANGE_RATE] ([ExchangeRate]) VALUES (@ExchangeRate)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ExchangeRate", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "ExchangeRate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.TakeoHospitalInventory.My.MySettings.Default.TakeoDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(3) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ExchangeRate FROM dbo.S_EXCHANGE_RATE"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "DELETE FROM S_EXCHANGE_RATE"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "INSERT INTO [dbo].[S_EXCHANGE_RATE] ([ExchangeRate]) VALUES (@ExchangeRate)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ExchangeRate", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "ExchangeRate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT ExchangeRate FROM S_EXCHANGE_RATE"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DS_KSPAYMENT.S_EXCHANGE_RATEDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DS_KSPAYMENT.S_EXCHANGE_RATEDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DS_KSPAYMENT.S_EXCHANGE_RATEDataTable = New DS_KSPAYMENT.S_EXCHANGE_RATEDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DS_KSPAYMENT.S_EXCHANGE_RATEDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DS_KSPAYMENT) As Integer
            Return Me.Adapter.Update(dataSet, "S_EXCHANGE_RATE")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ExchangeRate As Global.System.Nullable(Of Decimal)) As Integer
            If (ExchangeRate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ExchangeRate.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, false)>  _
        Public Overloads Overridable Function DeleteExchage() As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, false)>  _
        Public Overloads Overridable Function InsertNewexchageRate(ByVal ExchangeRate As Global.System.Nullable(Of Decimal)) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(2)
            If (ExchangeRate.HasValue = true) Then
                command.Parameters(0).Value = CType(ExchangeRate.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function SelectValueExchage() As Global.System.Nullable(Of Decimal)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(3)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Decimal)
            Else
                Return New Global.System.Nullable(Of Decimal)(CType(returnValue,Decimal))
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class S_INVOICE_KSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "S_INVOICE_KS"
            tableMapping.ColumnMappings.Add("INVOICE_ID", "INVOICE_ID")
            tableMapping.ColumnMappings.Add("WAITING_ID", "WAITING_ID")
            tableMapping.ColumnMappings.Add("INVOICE_DATE", "INVOICE_DATE")
            tableMapping.ColumnMappings.Add("PATIENT_NO", "PATIENT_NO")
            tableMapping.ColumnMappings.Add("TOTAL", "TOTAL")
            tableMapping.ColumnMappings.Add("SUB_TOTAL", "SUB_TOTAL")
            tableMapping.ColumnMappings.Add("EXCHANGE_RATE", "EXCHANGE_RATE")
            tableMapping.ColumnMappings.Add("CASH_RECEIVED", "CASH_RECEIVED")
            tableMapping.ColumnMappings.Add("CHANG", "CHANG")
            tableMapping.ColumnMappings.Add("RECEIVED_BY", "RECEIVED_BY")
            tableMapping.ColumnMappings.Add("TOTAL_DISCOUNT", "TOTAL_DISCOUNT")
            tableMapping.ColumnMappings.Add("DIS_CONSULT", "DIS_CONSULT")
            tableMapping.ColumnMappings.Add("DIS_OPERATION", "DIS_OPERATION")
            tableMapping.ColumnMappings.Add("DIS_MEDICINE", "DIS_MEDICINE")
            tableMapping.ColumnMappings.Add("IS_DELETE", "IS_DELETE")
            tableMapping.ColumnMappings.Add("PATIENT_NAME_ENG", "PATIENT_NAME_ENG")
            tableMapping.ColumnMappings.Add("PATIENT_NAME_KH", "PATIENT_NAME_KH")
            tableMapping.ColumnMappings.Add("PATIENT_SEX", "PATIENT_SEX")
            tableMapping.ColumnMappings.Add("PATIENT_AGE", "PATIENT_AGE")
            tableMapping.ColumnMappings.Add("BY_DOCTOR", "BY_DOCTOR")
            tableMapping.ColumnMappings.Add("DIAGNOSIS", "DIAGNOSIS")
            tableMapping.ColumnMappings.Add("TOTAL_CONSULT", "TOTAL_CONSULT")
            tableMapping.ColumnMappings.Add("TOTAL_MEDICINCE", "TOTAL_MEDICINCE")
            tableMapping.ColumnMappings.Add("DEPOSIT", "DEPOSIT")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [S_INVOICE_KS] WHERE (([INVOICE_ID] = @Original_INVOICE_ID) AND ((@Is"& _ 
                "Null_WAITING_ID = 1 AND [WAITING_ID] IS NULL) OR ([WAITING_ID] = @Original_WAITI"& _ 
                "NG_ID)) AND ((@IsNull_INVOICE_DATE = 1 AND [INVOICE_DATE] IS NULL) OR ([INVOICE_"& _ 
                "DATE] = @Original_INVOICE_DATE)) AND ((@IsNull_PATIENT_NO = 1 AND [PATIENT_NO] I"& _ 
                "S NULL) OR ([PATIENT_NO] = @Original_PATIENT_NO)) AND ((@IsNull_TOTAL = 1 AND [T"& _ 
                "OTAL] IS NULL) OR ([TOTAL] = @Original_TOTAL)) AND ((@IsNull_SUB_TOTAL = 1 AND ["& _ 
                "SUB_TOTAL] IS NULL) OR ([SUB_TOTAL] = @Original_SUB_TOTAL)) AND ((@IsNull_EXCHAN"& _ 
                "GE_RATE = 1 AND [EXCHANGE_RATE] IS NULL) OR ([EXCHANGE_RATE] = @Original_EXCHANG"& _ 
                "E_RATE)) AND ((@IsNull_CASH_RECEIVED = 1 AND [CASH_RECEIVED] IS NULL) OR ([CASH_"& _ 
                "RECEIVED] = @Original_CASH_RECEIVED)) AND ((@IsNull_CHANG = 1 AND [CHANG] IS NUL"& _ 
                "L) OR ([CHANG] = @Original_CHANG)) AND ((@IsNull_RECEIVED_BY = 1 AND [RECEIVED_B"& _ 
                "Y] IS NULL) OR ([RECEIVED_BY] = @Original_RECEIVED_BY)) AND ((@IsNull_TOTAL_DISC"& _ 
                "OUNT = 1 AND [TOTAL_DISCOUNT] IS NULL) OR ([TOTAL_DISCOUNT] = @Original_TOTAL_DI"& _ 
                "SCOUNT)) AND ((@IsNull_DIS_CONSULT = 1 AND [DIS_CONSULT] IS NULL) OR ([DIS_CONSU"& _ 
                "LT] = @Original_DIS_CONSULT)) AND ((@IsNull_DIS_OPERATION = 1 AND [DIS_OPERATION"& _ 
                "] IS NULL) OR ([DIS_OPERATION] = @Original_DIS_OPERATION)) AND ((@IsNull_DIS_MED"& _ 
                "ICINE = 1 AND [DIS_MEDICINE] IS NULL) OR ([DIS_MEDICINE] = @Original_DIS_MEDICIN"& _ 
                "E)) AND ((@IsNull_IS_DELETE = 1 AND [IS_DELETE] IS NULL) OR ([IS_DELETE] = @Orig"& _ 
                "inal_IS_DELETE)) AND ((@IsNull_PATIENT_NAME_ENG = 1 AND [PATIENT_NAME_ENG] IS NU"& _ 
                "LL) OR ([PATIENT_NAME_ENG] = @Original_PATIENT_NAME_ENG)) AND ((@IsNull_PATIENT_"& _ 
                "NAME_KH = 1 AND [PATIENT_NAME_KH] IS NULL) OR ([PATIENT_NAME_KH] = @Original_PAT"& _ 
                "IENT_NAME_KH)) AND ((@IsNull_PATIENT_SEX = 1 AND [PATIENT_SEX] IS NULL) OR ([PAT"& _ 
                "IENT_SEX] = @Original_PATIENT_SEX)) AND ((@IsNull_PATIENT_AGE = 1 AND [PATIENT_A"& _ 
                "GE] IS NULL) OR ([PATIENT_AGE] = @Original_PATIENT_AGE)) AND ((@IsNull_BY_DOCTOR"& _ 
                " = 1 AND [BY_DOCTOR] IS NULL) OR ([BY_DOCTOR] = @Original_BY_DOCTOR)) AND ((@IsN"& _ 
                "ull_DIAGNOSIS = 1 AND [DIAGNOSIS] IS NULL) OR ([DIAGNOSIS] = @Original_DIAGNOSIS"& _ 
                ")) AND ((@IsNull_TOTAL_CONSULT = 1 AND [TOTAL_CONSULT] IS NULL) OR ([TOTAL_CONSU"& _ 
                "LT] = @Original_TOTAL_CONSULT)) AND ((@IsNull_TOTAL_MEDICINCE = 1 AND [TOTAL_MED"& _ 
                "ICINCE] IS NULL) OR ([TOTAL_MEDICINCE] = @Original_TOTAL_MEDICINCE)) AND ((@IsNu"& _ 
                "ll_DEPOSIT = 1 AND [DEPOSIT] IS NULL) OR ([DEPOSIT] = @Original_DEPOSIT)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INVOICE_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "INVOICE_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_WAITING_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WAITING_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WAITING_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "WAITING_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_INVOICE_DATE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INVOICE_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PATIENT_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PATIENT_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PATIENT_NO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "PATIENT_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TOTAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TOTAL", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TOTAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SUB_TOTAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUB_TOTAL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SUB_TOTAL", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "SUB_TOTAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_EXCHANGE_RATE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EXCHANGE_RATE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EXCHANGE_RATE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "EXCHANGE_RATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CASH_RECEIVED", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CASH_RECEIVED", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CASH_RECEIVED", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "CASH_RECEIVED", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CHANG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CHANG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CHANG", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "CHANG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RECEIVED_BY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RECEIVED_BY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RECEIVED_BY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RECEIVED_BY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TOTAL_DISCOUNT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_DISCOUNT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TOTAL_DISCOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TOTAL_DISCOUNT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DIS_CONSULT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIS_CONSULT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DIS_CONSULT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "DIS_CONSULT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DIS_OPERATION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIS_OPERATION", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DIS_OPERATION", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "DIS_OPERATION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DIS_MEDICINE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIS_MEDICINE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DIS_MEDICINE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "DIS_MEDICINE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IS_DELETE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_DELETE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IS_DELETE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_DELETE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PATIENT_NAME_ENG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PATIENT_NAME_ENG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PATIENT_NAME_ENG", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PATIENT_NAME_ENG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PATIENT_NAME_KH", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PATIENT_NAME_KH", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PATIENT_NAME_KH", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PATIENT_NAME_KH", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PATIENT_SEX", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PATIENT_SEX", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PATIENT_SEX", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PATIENT_SEX", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PATIENT_AGE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PATIENT_AGE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PATIENT_AGE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "PATIENT_AGE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BY_DOCTOR", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BY_DOCTOR", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BY_DOCTOR", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BY_DOCTOR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DIAGNOSIS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIAGNOSIS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DIAGNOSIS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIAGNOSIS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TOTAL_CONSULT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_CONSULT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TOTAL_CONSULT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TOTAL_CONSULT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TOTAL_MEDICINCE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_MEDICINCE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TOTAL_MEDICINCE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TOTAL_MEDICINCE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DEPOSIT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEPOSIT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DEPOSIT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "DEPOSIT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [S_INVOICE_KS] ([WAITING_ID], [INVOICE_DATE], [PATIENT_NO], [TOTAL], "& _ 
                "[SUB_TOTAL], [EXCHANGE_RATE], [CASH_RECEIVED], [CHANG], [RECEIVED_BY], [TOTAL_DI"& _ 
                "SCOUNT], [DIS_CONSULT], [DIS_OPERATION], [DIS_MEDICINE], [IS_DELETE], [PATIENT_N"& _ 
                "AME_ENG], [PATIENT_NAME_KH], [PATIENT_SEX], [PATIENT_AGE], [BY_DOCTOR], [DIAGNOS"& _ 
                "IS], [TOTAL_CONSULT], [TOTAL_MEDICINCE], [DEPOSIT]) VALUES (@WAITING_ID, @INVOIC"& _ 
                "E_DATE, @PATIENT_NO, @TOTAL, @SUB_TOTAL, @EXCHANGE_RATE, @CASH_RECEIVED, @CHANG,"& _ 
                " @RECEIVED_BY, @TOTAL_DISCOUNT, @DIS_CONSULT, @DIS_OPERATION, @DIS_MEDICINE, @IS"& _ 
                "_DELETE, @PATIENT_NAME_ENG, @PATIENT_NAME_KH, @PATIENT_SEX, @PATIENT_AGE, @BY_DO"& _ 
                "CTOR, @DIAGNOSIS, @TOTAL_CONSULT, @TOTAL_MEDICINCE, @DEPOSIT);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT INVOICE_I"& _ 
                "D, WAITING_ID, INVOICE_DATE, PATIENT_NO, TOTAL, SUB_TOTAL, EXCHANGE_RATE, CASH_R"& _ 
                "ECEIVED, CHANG, RECEIVED_BY, TOTAL_DISCOUNT, DIS_CONSULT, DIS_OPERATION, DIS_MED"& _ 
                "ICINE, IS_DELETE, PATIENT_NAME_ENG, PATIENT_NAME_KH, PATIENT_SEX, PATIENT_AGE, B"& _ 
                "Y_DOCTOR, DIAGNOSIS, TOTAL_CONSULT, TOTAL_MEDICINCE, DEPOSIT FROM S_INVOICE_KS W"& _ 
                "HERE (INVOICE_ID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WAITING_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "WAITING_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INVOICE_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PATIENT_NO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "PATIENT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TOTAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUB_TOTAL", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "SUB_TOTAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EXCHANGE_RATE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "EXCHANGE_RATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CASH_RECEIVED", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "CASH_RECEIVED", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CHANG", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "CHANG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RECEIVED_BY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RECEIVED_BY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_DISCOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TOTAL_DISCOUNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIS_CONSULT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "DIS_CONSULT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIS_OPERATION", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "DIS_OPERATION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIS_MEDICINE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "DIS_MEDICINE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IS_DELETE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_DELETE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PATIENT_NAME_ENG", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PATIENT_NAME_ENG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PATIENT_NAME_KH", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PATIENT_NAME_KH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PATIENT_SEX", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PATIENT_SEX", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PATIENT_AGE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "PATIENT_AGE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BY_DOCTOR", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BY_DOCTOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIAGNOSIS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIAGNOSIS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_CONSULT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TOTAL_CONSULT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_MEDICINCE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TOTAL_MEDICINCE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DEPOSIT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "DEPOSIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [S_INVOICE_KS] SET [WAITING_ID] = @WAITING_ID, [INVOICE_DATE] = @INVOICE_D"& _ 
                "ATE, [PATIENT_NO] = @PATIENT_NO, [TOTAL] = @TOTAL, [SUB_TOTAL] = @SUB_TOTAL, [EX"& _ 
                "CHANGE_RATE] = @EXCHANGE_RATE, [CASH_RECEIVED] = @CASH_RECEIVED, [CHANG] = @CHAN"& _ 
                "G, [RECEIVED_BY] = @RECEIVED_BY, [TOTAL_DISCOUNT] = @TOTAL_DISCOUNT, [DIS_CONSUL"& _ 
                "T] = @DIS_CONSULT, [DIS_OPERATION] = @DIS_OPERATION, [DIS_MEDICINE] = @DIS_MEDIC"& _ 
                "INE, [IS_DELETE] = @IS_DELETE, [PATIENT_NAME_ENG] = @PATIENT_NAME_ENG, [PATIENT_"& _ 
                "NAME_KH] = @PATIENT_NAME_KH, [PATIENT_SEX] = @PATIENT_SEX, [PATIENT_AGE] = @PATI"& _ 
                "ENT_AGE, [BY_DOCTOR] = @BY_DOCTOR, [DIAGNOSIS] = @DIAGNOSIS, [TOTAL_CONSULT] = @"& _ 
                "TOTAL_CONSULT, [TOTAL_MEDICINCE] = @TOTAL_MEDICINCE, [DEPOSIT] = @DEPOSIT WHERE "& _ 
                "(([INVOICE_ID] = @Original_INVOICE_ID) AND ((@IsNull_WAITING_ID = 1 AND [WAITING"& _ 
                "_ID] IS NULL) OR ([WAITING_ID] = @Original_WAITING_ID)) AND ((@IsNull_INVOICE_DA"& _ 
                "TE = 1 AND [INVOICE_DATE] IS NULL) OR ([INVOICE_DATE] = @Original_INVOICE_DATE))"& _ 
                " AND ((@IsNull_PATIENT_NO = 1 AND [PATIENT_NO] IS NULL) OR ([PATIENT_NO] = @Orig"& _ 
                "inal_PATIENT_NO)) AND ((@IsNull_TOTAL = 1 AND [TOTAL] IS NULL) OR ([TOTAL] = @Or"& _ 
                "iginal_TOTAL)) AND ((@IsNull_SUB_TOTAL = 1 AND [SUB_TOTAL] IS NULL) OR ([SUB_TOT"& _ 
                "AL] = @Original_SUB_TOTAL)) AND ((@IsNull_EXCHANGE_RATE = 1 AND [EXCHANGE_RATE] "& _ 
                "IS NULL) OR ([EXCHANGE_RATE] = @Original_EXCHANGE_RATE)) AND ((@IsNull_CASH_RECE"& _ 
                "IVED = 1 AND [CASH_RECEIVED] IS NULL) OR ([CASH_RECEIVED] = @Original_CASH_RECEI"& _ 
                "VED)) AND ((@IsNull_CHANG = 1 AND [CHANG] IS NULL) OR ([CHANG] = @Original_CHANG"& _ 
                ")) AND ((@IsNull_RECEIVED_BY = 1 AND [RECEIVED_BY] IS NULL) OR ([RECEIVED_BY] = "& _ 
                "@Original_RECEIVED_BY)) AND ((@IsNull_TOTAL_DISCOUNT = 1 AND [TOTAL_DISCOUNT] IS"& _ 
                " NULL) OR ([TOTAL_DISCOUNT] = @Original_TOTAL_DISCOUNT)) AND ((@IsNull_DIS_CONSU"& _ 
                "LT = 1 AND [DIS_CONSULT] IS NULL) OR ([DIS_CONSULT] = @Original_DIS_CONSULT)) AN"& _ 
                "D ((@IsNull_DIS_OPERATION = 1 AND [DIS_OPERATION] IS NULL) OR ([DIS_OPERATION] ="& _ 
                " @Original_DIS_OPERATION)) AND ((@IsNull_DIS_MEDICINE = 1 AND [DIS_MEDICINE] IS "& _ 
                "NULL) OR ([DIS_MEDICINE] = @Original_DIS_MEDICINE)) AND ((@IsNull_IS_DELETE = 1 "& _ 
                "AND [IS_DELETE] IS NULL) OR ([IS_DELETE] = @Original_IS_DELETE)) AND ((@IsNull_P"& _ 
                "ATIENT_NAME_ENG = 1 AND [PATIENT_NAME_ENG] IS NULL) OR ([PATIENT_NAME_ENG] = @Or"& _ 
                "iginal_PATIENT_NAME_ENG)) AND ((@IsNull_PATIENT_NAME_KH = 1 AND [PATIENT_NAME_KH"& _ 
                "] IS NULL) OR ([PATIENT_NAME_KH] = @Original_PATIENT_NAME_KH)) AND ((@IsNull_PAT"& _ 
                "IENT_SEX = 1 AND [PATIENT_SEX] IS NULL) OR ([PATIENT_SEX] = @Original_PATIENT_SE"& _ 
                "X)) AND ((@IsNull_PATIENT_AGE = 1 AND [PATIENT_AGE] IS NULL) OR ([PATIENT_AGE] ="& _ 
                " @Original_PATIENT_AGE)) AND ((@IsNull_BY_DOCTOR = 1 AND [BY_DOCTOR] IS NULL) OR"& _ 
                " ([BY_DOCTOR] = @Original_BY_DOCTOR)) AND ((@IsNull_DIAGNOSIS = 1 AND [DIAGNOSIS"& _ 
                "] IS NULL) OR ([DIAGNOSIS] = @Original_DIAGNOSIS)) AND ((@IsNull_TOTAL_CONSULT ="& _ 
                " 1 AND [TOTAL_CONSULT] IS NULL) OR ([TOTAL_CONSULT] = @Original_TOTAL_CONSULT)) "& _ 
                "AND ((@IsNull_TOTAL_MEDICINCE = 1 AND [TOTAL_MEDICINCE] IS NULL) OR ([TOTAL_MEDI"& _ 
                "CINCE] = @Original_TOTAL_MEDICINCE)) AND ((@IsNull_DEPOSIT = 1 AND [DEPOSIT] IS "& _ 
                "NULL) OR ([DEPOSIT] = @Original_DEPOSIT)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT INVOICE_ID, WAITING_ID, INVO"& _ 
                "ICE_DATE, PATIENT_NO, TOTAL, SUB_TOTAL, EXCHANGE_RATE, CASH_RECEIVED, CHANG, REC"& _ 
                "EIVED_BY, TOTAL_DISCOUNT, DIS_CONSULT, DIS_OPERATION, DIS_MEDICINE, IS_DELETE, P"& _ 
                "ATIENT_NAME_ENG, PATIENT_NAME_KH, PATIENT_SEX, PATIENT_AGE, BY_DOCTOR, DIAGNOSIS"& _ 
                ", TOTAL_CONSULT, TOTAL_MEDICINCE, DEPOSIT FROM S_INVOICE_KS WHERE (INVOICE_ID = "& _ 
                "@INVOICE_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WAITING_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "WAITING_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INVOICE_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PATIENT_NO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "PATIENT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TOTAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUB_TOTAL", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "SUB_TOTAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EXCHANGE_RATE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "EXCHANGE_RATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CASH_RECEIVED", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "CASH_RECEIVED", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CHANG", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "CHANG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RECEIVED_BY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RECEIVED_BY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_DISCOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TOTAL_DISCOUNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIS_CONSULT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "DIS_CONSULT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIS_OPERATION", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "DIS_OPERATION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIS_MEDICINE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "DIS_MEDICINE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IS_DELETE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_DELETE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PATIENT_NAME_ENG", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PATIENT_NAME_ENG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PATIENT_NAME_KH", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PATIENT_NAME_KH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PATIENT_SEX", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PATIENT_SEX", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PATIENT_AGE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "PATIENT_AGE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BY_DOCTOR", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BY_DOCTOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIAGNOSIS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIAGNOSIS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_CONSULT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TOTAL_CONSULT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_MEDICINCE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TOTAL_MEDICINCE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DEPOSIT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "DEPOSIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INVOICE_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "INVOICE_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_WAITING_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WAITING_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WAITING_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "WAITING_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_INVOICE_DATE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INVOICE_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PATIENT_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PATIENT_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PATIENT_NO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "PATIENT_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TOTAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TOTAL", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TOTAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SUB_TOTAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUB_TOTAL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SUB_TOTAL", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "SUB_TOTAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_EXCHANGE_RATE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EXCHANGE_RATE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EXCHANGE_RATE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "EXCHANGE_RATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CASH_RECEIVED", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CASH_RECEIVED", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CASH_RECEIVED", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "CASH_RECEIVED", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CHANG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CHANG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CHANG", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "CHANG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RECEIVED_BY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RECEIVED_BY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RECEIVED_BY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RECEIVED_BY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TOTAL_DISCOUNT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_DISCOUNT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TOTAL_DISCOUNT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TOTAL_DISCOUNT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DIS_CONSULT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIS_CONSULT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DIS_CONSULT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "DIS_CONSULT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DIS_OPERATION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIS_OPERATION", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DIS_OPERATION", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "DIS_OPERATION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DIS_MEDICINE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIS_MEDICINE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DIS_MEDICINE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "DIS_MEDICINE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IS_DELETE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_DELETE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IS_DELETE", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_DELETE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PATIENT_NAME_ENG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PATIENT_NAME_ENG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PATIENT_NAME_ENG", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PATIENT_NAME_ENG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PATIENT_NAME_KH", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PATIENT_NAME_KH", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PATIENT_NAME_KH", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PATIENT_NAME_KH", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PATIENT_SEX", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PATIENT_SEX", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PATIENT_SEX", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PATIENT_SEX", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PATIENT_AGE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PATIENT_AGE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PATIENT_AGE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "PATIENT_AGE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BY_DOCTOR", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BY_DOCTOR", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BY_DOCTOR", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BY_DOCTOR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DIAGNOSIS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIAGNOSIS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DIAGNOSIS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DIAGNOSIS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TOTAL_CONSULT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_CONSULT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TOTAL_CONSULT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TOTAL_CONSULT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TOTAL_MEDICINCE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_MEDICINCE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TOTAL_MEDICINCE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TOTAL_MEDICINCE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DEPOSIT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEPOSIT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DEPOSIT", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "DEPOSIT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INVOICE_ID", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "INVOICE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.TakeoHospitalInventory.My.MySettings.Default.TakeoDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(3) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        INVOICE_ID, WAITING_ID, INVOICE_DATE, PATIENT_NO, TOTAL, SUB_TOTAL,"& _ 
                " EXCHANGE_RATE, CASH_RECEIVED, CHANG, RECEIVED_BY, TOTAL_DISCOUNT, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"           "& _ 
                "              DIS_CONSULT, DIS_OPERATION, DIS_MEDICINE, IS_DELETE, PATIENT_NAME_"& _ 
                "ENG, PATIENT_NAME_KH, PATIENT_SEX, PATIENT_AGE, BY_DOCTOR, DIAGNOSIS, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        "& _ 
                "                 TOTAL_CONSULT, TOTAL_MEDICINCE, DEPOSIT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            S_INVO"& _ 
                "ICE_KS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        BY_DOCTOR, CASH_RECEIVED, CHANG, DIAGNOSIS, DIS_CONSULT, DIS_MEDICI"& _ 
                "NE, DIS_OPERATION, EXCHANGE_RATE, INVOICE_DATE, INVOICE_ID, IS_DELETE, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"       "& _ 
                "                  PATIENT_AGE, PATIENT_NAME_ENG, PATIENT_NAME_KH, PATIENT_NO, PA"& _ 
                "TIENT_SEX, RECEIVED_BY, SUB_TOTAL, TOTAL, TOTAL_CONSULT, TOTAL_DISCOUNT, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"     "& _ 
                "                    TOTAL_MEDICINCE, WAITING_ID, DEPOSIT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            S_INVO"& _ 
                "ICE_KS"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (INVOICE_DATE BETWEEN @DFrom AND @DTo)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DFrom", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DTo", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "INSERT INTO S_INVOICE_KS"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         (WAITING_ID, INVOICE_DATE, PAT"& _ 
                "IENT_NO, TOTAL, SUB_TOTAL, EXCHANGE_RATE, CASH_RECEIVED, CHANG, RECEIVED_BY, TOT"& _ 
                "AL_DISCOUNT, DIS_CONSULT, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         DIS_OPERATION, DIS_MEDICINE"& _ 
                ", IS_DELETE, PATIENT_NAME_ENG, PATIENT_NAME_KH, PATIENT_SEX, PATIENT_AGE, BY_DOC"& _ 
                "TOR, DIAGNOSIS, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         TOTAL_CONSULT, TOTAL_MEDICINCE, DEPOS"& _ 
                "IT)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"VALUES        (@WAITING_ID,@INVOICE_DATE,@PATIENT_NO,@TOTAL,@SUB_TOTAL,@EXC"& _ 
                "HANGE_RATE,@CASH_RECEIVED,@CHANG,@RECEIVED_BY,@TOTAL_DISCOUNT,@DIS_CONSULT,@DIS_"& _ 
                "OPERATION,@DIS_MEDICINE,@IS_DELETE,@PATIENT_NAME_ENG,@PATIENT_NAME_KH,@PATIENT_S"& _ 
                "EX,@PATIENT_AGE,@BY_DOCTOR,@DIAGNOSIS,@TOTAL_CONSULT,@TOTAL_MEDICINCE,@DEPOSIT);"& _ 
                "     "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WAITING_ID", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "WAITING_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INVOICE_DATE", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PATIENT_NO", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "PATIENT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 2, "TOTAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUB_TOTAL", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 2, "SUB_TOTAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EXCHANGE_RATE", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 2, "EXCHANGE_RATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CASH_RECEIVED", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 2, "CASH_RECEIVED", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CHANG", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 2, "CHANG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RECEIVED_BY", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "RECEIVED_BY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_DISCOUNT", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 2, "TOTAL_DISCOUNT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIS_CONSULT", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 2, "DIS_CONSULT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIS_OPERATION", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 2, "DIS_OPERATION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIS_MEDICINE", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 2, "DIS_MEDICINE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IS_DELETE", Global.System.Data.SqlDbType.[Char], 1, Global.System.Data.ParameterDirection.Input, 0, 0, "IS_DELETE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PATIENT_NAME_ENG", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "PATIENT_NAME_ENG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PATIENT_NAME_KH", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "PATIENT_NAME_KH", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PATIENT_SEX", Global.System.Data.SqlDbType.[Char], 1, Global.System.Data.ParameterDirection.Input, 0, 0, "PATIENT_SEX", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PATIENT_AGE", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "PATIENT_AGE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BY_DOCTOR", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "BY_DOCTOR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DIAGNOSIS", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "DIAGNOSIS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_CONSULT", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 2, "TOTAL_CONSULT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_MEDICINCE", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 2, "TOTAL_MEDICINCE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DEPOSIT", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 2, "DEPOSIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT MAX(INVOICE_ID) FROM S_INVOICE_KS"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DS_KSPAYMENT.S_INVOICE_KSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DS_KSPAYMENT.S_INVOICE_KSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DS_KSPAYMENT.S_INVOICE_KSDataTable = New DS_KSPAYMENT.S_INVOICE_KSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByInvoiceDateToDate(ByVal dataTable As DS_KSPAYMENT.S_INVOICE_KSDataTable, ByVal DFrom As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectInvoiceDateToDate(ByVal DFrom As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date)) As DS_KSPAYMENT.S_INVOICE_KSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DS_KSPAYMENT.S_INVOICE_KSDataTable = New DS_KSPAYMENT.S_INVOICE_KSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DS_KSPAYMENT.S_INVOICE_KSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DS_KSPAYMENT) As Integer
            Return Me.Adapter.Update(dataSet, "S_INVOICE_KS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_INVOICE_ID As Decimal,  _
                    ByVal Original_WAITING_ID As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_INVOICE_DATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_PATIENT_NO As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_TOTAL As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_SUB_TOTAL As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_EXCHANGE_RATE As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_CASH_RECEIVED As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_CHANG As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_RECEIVED_BY As String,  _
                    ByVal Original_TOTAL_DISCOUNT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DIS_CONSULT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DIS_OPERATION As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DIS_MEDICINE As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IS_DELETE As String,  _
                    ByVal Original_PATIENT_NAME_ENG As String,  _
                    ByVal Original_PATIENT_NAME_KH As String,  _
                    ByVal Original_PATIENT_SEX As String,  _
                    ByVal Original_PATIENT_AGE As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_BY_DOCTOR As String,  _
                    ByVal Original_DIAGNOSIS As String,  _
                    ByVal Original_TOTAL_CONSULT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_TOTAL_MEDICINCE As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DEPOSIT As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_INVOICE_ID,Decimal)
            If (Original_WAITING_ID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_WAITING_ID.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_INVOICE_DATE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_INVOICE_DATE.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_PATIENT_NO.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_PATIENT_NO.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_TOTAL.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_TOTAL.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_SUB_TOTAL.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_SUB_TOTAL.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_EXCHANGE_RATE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_EXCHANGE_RATE.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_CASH_RECEIVED.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_CASH_RECEIVED.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_CHANG.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_CHANG.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_RECEIVED_BY Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_RECEIVED_BY,String)
            End If
            If (Original_TOTAL_DISCOUNT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_TOTAL_DISCOUNT.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_DIS_CONSULT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_DIS_CONSULT.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_DIS_OPERATION.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_DIS_OPERATION.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_DIS_MEDICINE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_DIS_MEDICINE.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_IS_DELETE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_IS_DELETE,String)
            End If
            If (Original_PATIENT_NAME_ENG Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_PATIENT_NAME_ENG,String)
            End If
            If (Original_PATIENT_NAME_KH Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_PATIENT_NAME_KH,String)
            End If
            If (Original_PATIENT_SEX Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_PATIENT_SEX,String)
            End If
            If (Original_PATIENT_AGE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_PATIENT_AGE.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (Original_BY_DOCTOR Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(Original_BY_DOCTOR,String)
            End If
            If (Original_DIAGNOSIS Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(Original_DIAGNOSIS,String)
            End If
            If (Original_TOTAL_CONSULT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(Original_TOTAL_CONSULT.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (Original_TOTAL_MEDICINCE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(Original_TOTAL_MEDICINCE.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (Original_DEPOSIT.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = CType(Original_DEPOSIT.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal WAITING_ID As Global.System.Nullable(Of Decimal),  _
                    ByVal INVOICE_DATE As Global.System.Nullable(Of Date),  _
                    ByVal PATIENT_NO As Global.System.Nullable(Of Decimal),  _
                    ByVal TOTAL As Global.System.Nullable(Of Decimal),  _
                    ByVal SUB_TOTAL As Global.System.Nullable(Of Decimal),  _
                    ByVal EXCHANGE_RATE As Global.System.Nullable(Of Decimal),  _
                    ByVal CASH_RECEIVED As Global.System.Nullable(Of Decimal),  _
                    ByVal CHANG As Global.System.Nullable(Of Decimal),  _
                    ByVal RECEIVED_BY As String,  _
                    ByVal TOTAL_DISCOUNT As Global.System.Nullable(Of Decimal),  _
                    ByVal DIS_CONSULT As Global.System.Nullable(Of Decimal),  _
                    ByVal DIS_OPERATION As Global.System.Nullable(Of Decimal),  _
                    ByVal DIS_MEDICINE As Global.System.Nullable(Of Decimal),  _
                    ByVal IS_DELETE As String,  _
                    ByVal PATIENT_NAME_ENG As String,  _
                    ByVal PATIENT_NAME_KH As String,  _
                    ByVal PATIENT_SEX As String,  _
                    ByVal PATIENT_AGE As Global.System.Nullable(Of Decimal),  _
                    ByVal BY_DOCTOR As String,  _
                    ByVal DIAGNOSIS As String,  _
                    ByVal TOTAL_CONSULT As Global.System.Nullable(Of Decimal),  _
                    ByVal TOTAL_MEDICINCE As Global.System.Nullable(Of Decimal),  _
                    ByVal DEPOSIT As Global.System.Nullable(Of Decimal)) As Integer
            If (WAITING_ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(WAITING_ID.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (INVOICE_DATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(INVOICE_DATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (PATIENT_NO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(PATIENT_NO.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (TOTAL.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(TOTAL.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (SUB_TOTAL.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(SUB_TOTAL.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (EXCHANGE_RATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(EXCHANGE_RATE.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (CASH_RECEIVED.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(CASH_RECEIVED.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (CHANG.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(CHANG.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (RECEIVED_BY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(RECEIVED_BY,String)
            End If
            If (TOTAL_DISCOUNT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(TOTAL_DISCOUNT.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (DIS_CONSULT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(DIS_CONSULT.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (DIS_OPERATION.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(DIS_OPERATION.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (DIS_MEDICINE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(DIS_MEDICINE.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (IS_DELETE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(IS_DELETE,String)
            End If
            If (PATIENT_NAME_ENG Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(PATIENT_NAME_ENG,String)
            End If
            If (PATIENT_NAME_KH Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(PATIENT_NAME_KH,String)
            End If
            If (PATIENT_SEX Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(PATIENT_SEX,String)
            End If
            If (PATIENT_AGE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(PATIENT_AGE.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (BY_DOCTOR Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(BY_DOCTOR,String)
            End If
            If (DIAGNOSIS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(DIAGNOSIS,String)
            End If
            If (TOTAL_CONSULT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(TOTAL_CONSULT.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (TOTAL_MEDICINCE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(TOTAL_MEDICINCE.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (DEPOSIT.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(DEPOSIT.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal WAITING_ID As Global.System.Nullable(Of Decimal),  _
                    ByVal INVOICE_DATE As Global.System.Nullable(Of Date),  _
                    ByVal PATIENT_NO As Global.System.Nullable(Of Decimal),  _
                    ByVal TOTAL As Global.System.Nullable(Of Decimal),  _
                    ByVal SUB_TOTAL As Global.System.Nullable(Of Decimal),  _
                    ByVal EXCHANGE_RATE As Global.System.Nullable(Of Decimal),  _
                    ByVal CASH_RECEIVED As Global.System.Nullable(Of Decimal),  _
                    ByVal CHANG As Global.System.Nullable(Of Decimal),  _
                    ByVal RECEIVED_BY As String,  _
                    ByVal TOTAL_DISCOUNT As Global.System.Nullable(Of Decimal),  _
                    ByVal DIS_CONSULT As Global.System.Nullable(Of Decimal),  _
                    ByVal DIS_OPERATION As Global.System.Nullable(Of Decimal),  _
                    ByVal DIS_MEDICINE As Global.System.Nullable(Of Decimal),  _
                    ByVal IS_DELETE As String,  _
                    ByVal PATIENT_NAME_ENG As String,  _
                    ByVal PATIENT_NAME_KH As String,  _
                    ByVal PATIENT_SEX As String,  _
                    ByVal PATIENT_AGE As Global.System.Nullable(Of Decimal),  _
                    ByVal BY_DOCTOR As String,  _
                    ByVal DIAGNOSIS As String,  _
                    ByVal TOTAL_CONSULT As Global.System.Nullable(Of Decimal),  _
                    ByVal TOTAL_MEDICINCE As Global.System.Nullable(Of Decimal),  _
                    ByVal DEPOSIT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_INVOICE_ID As Decimal,  _
                    ByVal Original_WAITING_ID As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_INVOICE_DATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_PATIENT_NO As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_TOTAL As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_SUB_TOTAL As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_EXCHANGE_RATE As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_CASH_RECEIVED As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_CHANG As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_RECEIVED_BY As String,  _
                    ByVal Original_TOTAL_DISCOUNT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DIS_CONSULT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DIS_OPERATION As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DIS_MEDICINE As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IS_DELETE As String,  _
                    ByVal Original_PATIENT_NAME_ENG As String,  _
                    ByVal Original_PATIENT_NAME_KH As String,  _
                    ByVal Original_PATIENT_SEX As String,  _
                    ByVal Original_PATIENT_AGE As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_BY_DOCTOR As String,  _
                    ByVal Original_DIAGNOSIS As String,  _
                    ByVal Original_TOTAL_CONSULT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_TOTAL_MEDICINCE As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DEPOSIT As Global.System.Nullable(Of Decimal),  _
                    ByVal INVOICE_ID As Decimal) As Integer
            If (WAITING_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(WAITING_ID.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (INVOICE_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(INVOICE_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (PATIENT_NO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(PATIENT_NO.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (TOTAL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(TOTAL.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (SUB_TOTAL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(SUB_TOTAL.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (EXCHANGE_RATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(EXCHANGE_RATE.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (CASH_RECEIVED.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(CASH_RECEIVED.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (CHANG.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(CHANG.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (RECEIVED_BY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(RECEIVED_BY,String)
            End If
            If (TOTAL_DISCOUNT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(TOTAL_DISCOUNT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (DIS_CONSULT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(DIS_CONSULT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (DIS_OPERATION.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(DIS_OPERATION.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (DIS_MEDICINE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(DIS_MEDICINE.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (IS_DELETE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(IS_DELETE,String)
            End If
            If (PATIENT_NAME_ENG Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(PATIENT_NAME_ENG,String)
            End If
            If (PATIENT_NAME_KH Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(PATIENT_NAME_KH,String)
            End If
            If (PATIENT_SEX Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(PATIENT_SEX,String)
            End If
            If (PATIENT_AGE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(PATIENT_AGE.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (BY_DOCTOR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(BY_DOCTOR,String)
            End If
            If (DIAGNOSIS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(DIAGNOSIS,String)
            End If
            If (TOTAL_CONSULT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(TOTAL_CONSULT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (TOTAL_MEDICINCE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(TOTAL_MEDICINCE.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (DEPOSIT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(DEPOSIT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_INVOICE_ID,Decimal)
            If (Original_WAITING_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_WAITING_ID.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (Original_INVOICE_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_INVOICE_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (Original_PATIENT_NO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_PATIENT_NO.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (Original_TOTAL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_TOTAL.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (Original_SUB_TOTAL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_SUB_TOTAL.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (Original_EXCHANGE_RATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_EXCHANGE_RATE.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (Original_CASH_RECEIVED.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_CASH_RECEIVED.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (Original_CHANG.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_CHANG.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (Original_RECEIVED_BY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_RECEIVED_BY,String)
            End If
            If (Original_TOTAL_DISCOUNT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_TOTAL_DISCOUNT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (Original_DIS_CONSULT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_DIS_CONSULT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            End If
            If (Original_DIS_OPERATION.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_DIS_OPERATION.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (Original_DIS_MEDICINE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_DIS_MEDICINE.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            If (Original_IS_DELETE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_IS_DELETE,String)
            End If
            If (Original_PATIENT_NAME_ENG Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_PATIENT_NAME_ENG,String)
            End If
            If (Original_PATIENT_NAME_KH Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_PATIENT_NAME_KH,String)
            End If
            If (Original_PATIENT_SEX Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(Original_PATIENT_SEX,String)
            End If
            If (Original_PATIENT_AGE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(Original_PATIENT_AGE.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = Global.System.DBNull.Value
            End If
            If (Original_BY_DOCTOR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(Original_BY_DOCTOR,String)
            End If
            If (Original_DIAGNOSIS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(Original_DIAGNOSIS,String)
            End If
            If (Original_TOTAL_CONSULT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(Original_TOTAL_CONSULT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = Global.System.DBNull.Value
            End If
            If (Original_TOTAL_MEDICINCE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(Original_TOTAL_MEDICINCE.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = Global.System.DBNull.Value
            End If
            If (Original_DEPOSIT.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(Original_DEPOSIT.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(69).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(70).Value = CType(INVOICE_ID,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal WAITING_ID As Global.System.Nullable(Of Decimal),  _
                    ByVal INVOICE_DATE As Global.System.Nullable(Of Date),  _
                    ByVal PATIENT_NO As Global.System.Nullable(Of Decimal),  _
                    ByVal TOTAL As Global.System.Nullable(Of Decimal),  _
                    ByVal SUB_TOTAL As Global.System.Nullable(Of Decimal),  _
                    ByVal EXCHANGE_RATE As Global.System.Nullable(Of Decimal),  _
                    ByVal CASH_RECEIVED As Global.System.Nullable(Of Decimal),  _
                    ByVal CHANG As Global.System.Nullable(Of Decimal),  _
                    ByVal RECEIVED_BY As String,  _
                    ByVal TOTAL_DISCOUNT As Global.System.Nullable(Of Decimal),  _
                    ByVal DIS_CONSULT As Global.System.Nullable(Of Decimal),  _
                    ByVal DIS_OPERATION As Global.System.Nullable(Of Decimal),  _
                    ByVal DIS_MEDICINE As Global.System.Nullable(Of Decimal),  _
                    ByVal IS_DELETE As String,  _
                    ByVal PATIENT_NAME_ENG As String,  _
                    ByVal PATIENT_NAME_KH As String,  _
                    ByVal PATIENT_SEX As String,  _
                    ByVal PATIENT_AGE As Global.System.Nullable(Of Decimal),  _
                    ByVal BY_DOCTOR As String,  _
                    ByVal DIAGNOSIS As String,  _
                    ByVal TOTAL_CONSULT As Global.System.Nullable(Of Decimal),  _
                    ByVal TOTAL_MEDICINCE As Global.System.Nullable(Of Decimal),  _
                    ByVal DEPOSIT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_INVOICE_ID As Decimal,  _
                    ByVal Original_WAITING_ID As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_INVOICE_DATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_PATIENT_NO As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_TOTAL As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_SUB_TOTAL As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_EXCHANGE_RATE As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_CASH_RECEIVED As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_CHANG As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_RECEIVED_BY As String,  _
                    ByVal Original_TOTAL_DISCOUNT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DIS_CONSULT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DIS_OPERATION As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DIS_MEDICINE As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_IS_DELETE As String,  _
                    ByVal Original_PATIENT_NAME_ENG As String,  _
                    ByVal Original_PATIENT_NAME_KH As String,  _
                    ByVal Original_PATIENT_SEX As String,  _
                    ByVal Original_PATIENT_AGE As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_BY_DOCTOR As String,  _
                    ByVal Original_DIAGNOSIS As String,  _
                    ByVal Original_TOTAL_CONSULT As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_TOTAL_MEDICINCE As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DEPOSIT As Global.System.Nullable(Of Decimal)) As Integer
            Return Me.Update(WAITING_ID, INVOICE_DATE, PATIENT_NO, TOTAL, SUB_TOTAL, EXCHANGE_RATE, CASH_RECEIVED, CHANG, RECEIVED_BY, TOTAL_DISCOUNT, DIS_CONSULT, DIS_OPERATION, DIS_MEDICINE, IS_DELETE, PATIENT_NAME_ENG, PATIENT_NAME_KH, PATIENT_SEX, PATIENT_AGE, BY_DOCTOR, DIAGNOSIS, TOTAL_CONSULT, TOTAL_MEDICINCE, DEPOSIT, Original_INVOICE_ID, Original_WAITING_ID, Original_INVOICE_DATE, Original_PATIENT_NO, Original_TOTAL, Original_SUB_TOTAL, Original_EXCHANGE_RATE, Original_CASH_RECEIVED, Original_CHANG, Original_RECEIVED_BY, Original_TOTAL_DISCOUNT, Original_DIS_CONSULT, Original_DIS_OPERATION, Original_DIS_MEDICINE, Original_IS_DELETE, Original_PATIENT_NAME_ENG, Original_PATIENT_NAME_KH, Original_PATIENT_SEX, Original_PATIENT_AGE, Original_BY_DOCTOR, Original_DIAGNOSIS, Original_TOTAL_CONSULT, Original_TOTAL_MEDICINCE, Original_DEPOSIT, Original_INVOICE_ID)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, false)>  _
        Public Overloads Overridable Function InsertNewInvoice( _
                    ByVal WAITING_ID As Global.System.Nullable(Of Decimal),  _
                    ByVal INVOICE_DATE As Global.System.Nullable(Of Date),  _
                    ByVal PATIENT_NO As Global.System.Nullable(Of Decimal),  _
                    ByVal TOTAL As Global.System.Nullable(Of Decimal),  _
                    ByVal SUB_TOTAL As Global.System.Nullable(Of Decimal),  _
                    ByVal EXCHANGE_RATE As Global.System.Nullable(Of Decimal),  _
                    ByVal CASH_RECEIVED As Global.System.Nullable(Of Decimal),  _
                    ByVal CHANG As Global.System.Nullable(Of Decimal),  _
                    ByVal RECEIVED_BY As String,  _
                    ByVal TOTAL_DISCOUNT As Global.System.Nullable(Of Decimal),  _
                    ByVal DIS_CONSULT As Global.System.Nullable(Of Decimal),  _
                    ByVal DIS_OPERATION As Global.System.Nullable(Of Decimal),  _
                    ByVal DIS_MEDICINE As Global.System.Nullable(Of Decimal),  _
                    ByVal IS_DELETE As String,  _
                    ByVal PATIENT_NAME_ENG As String,  _
                    ByVal PATIENT_NAME_KH As String,  _
                    ByVal PATIENT_SEX As String,  _
                    ByVal PATIENT_AGE As Global.System.Nullable(Of Decimal),  _
                    ByVal BY_DOCTOR As String,  _
                    ByVal DIAGNOSIS As String,  _
                    ByVal TOTAL_CONSULT As Global.System.Nullable(Of Decimal),  _
                    ByVal TOTAL_MEDICINCE As Global.System.Nullable(Of Decimal),  _
                    ByVal DEPOSIT As Global.System.Nullable(Of Decimal)) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(2)
            If (WAITING_ID.HasValue = true) Then
                command.Parameters(0).Value = CType(WAITING_ID.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (INVOICE_DATE.HasValue = true) Then
                command.Parameters(1).Value = CType(INVOICE_DATE.Value,Date)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (PATIENT_NO.HasValue = true) Then
                command.Parameters(2).Value = CType(PATIENT_NO.Value,Decimal)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (TOTAL.HasValue = true) Then
                command.Parameters(3).Value = CType(TOTAL.Value,Decimal)
            Else
                command.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (SUB_TOTAL.HasValue = true) Then
                command.Parameters(4).Value = CType(SUB_TOTAL.Value,Decimal)
            Else
                command.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (EXCHANGE_RATE.HasValue = true) Then
                command.Parameters(5).Value = CType(EXCHANGE_RATE.Value,Decimal)
            Else
                command.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (CASH_RECEIVED.HasValue = true) Then
                command.Parameters(6).Value = CType(CASH_RECEIVED.Value,Decimal)
            Else
                command.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (CHANG.HasValue = true) Then
                command.Parameters(7).Value = CType(CHANG.Value,Decimal)
            Else
                command.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (RECEIVED_BY Is Nothing) Then
                command.Parameters(8).Value = Global.System.DBNull.Value
            Else
                command.Parameters(8).Value = CType(RECEIVED_BY,String)
            End If
            If (TOTAL_DISCOUNT.HasValue = true) Then
                command.Parameters(9).Value = CType(TOTAL_DISCOUNT.Value,Decimal)
            Else
                command.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (DIS_CONSULT.HasValue = true) Then
                command.Parameters(10).Value = CType(DIS_CONSULT.Value,Decimal)
            Else
                command.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (DIS_OPERATION.HasValue = true) Then
                command.Parameters(11).Value = CType(DIS_OPERATION.Value,Decimal)
            Else
                command.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (DIS_MEDICINE.HasValue = true) Then
                command.Parameters(12).Value = CType(DIS_MEDICINE.Value,Decimal)
            Else
                command.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (IS_DELETE Is Nothing) Then
                command.Parameters(13).Value = Global.System.DBNull.Value
            Else
                command.Parameters(13).Value = CType(IS_DELETE,String)
            End If
            If (PATIENT_NAME_ENG Is Nothing) Then
                command.Parameters(14).Value = Global.System.DBNull.Value
            Else
                command.Parameters(14).Value = CType(PATIENT_NAME_ENG,String)
            End If
            If (PATIENT_NAME_KH Is Nothing) Then
                command.Parameters(15).Value = Global.System.DBNull.Value
            Else
                command.Parameters(15).Value = CType(PATIENT_NAME_KH,String)
            End If
            If (PATIENT_SEX Is Nothing) Then
                command.Parameters(16).Value = Global.System.DBNull.Value
            Else
                command.Parameters(16).Value = CType(PATIENT_SEX,String)
            End If
            If (PATIENT_AGE.HasValue = true) Then
                command.Parameters(17).Value = CType(PATIENT_AGE.Value,Decimal)
            Else
                command.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (BY_DOCTOR Is Nothing) Then
                command.Parameters(18).Value = Global.System.DBNull.Value
            Else
                command.Parameters(18).Value = CType(BY_DOCTOR,String)
            End If
            If (DIAGNOSIS Is Nothing) Then
                command.Parameters(19).Value = Global.System.DBNull.Value
            Else
                command.Parameters(19).Value = CType(DIAGNOSIS,String)
            End If
            If (TOTAL_CONSULT.HasValue = true) Then
                command.Parameters(20).Value = CType(TOTAL_CONSULT.Value,Decimal)
            Else
                command.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (TOTAL_MEDICINCE.HasValue = true) Then
                command.Parameters(21).Value = CType(TOTAL_MEDICINCE.Value,Decimal)
            Else
                command.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (DEPOSIT.HasValue = true) Then
                command.Parameters(22).Value = CType(DEPOSIT.Value,Decimal)
            Else
                command.Parameters(22).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function SelectMaxInvoiceID() As Global.System.Nullable(Of Decimal)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(3)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Decimal)
            Else
                Return New Global.System.Nullable(Of Decimal)(CType(returnValue,Decimal))
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class S_INVOICE_DETAILTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "S_INVOICE_DETAIL"
            tableMapping.ColumnMappings.Add("IN_DETAIL_ID", "IN_DETAIL_ID")
            tableMapping.ColumnMappings.Add("INVOICE_NO", "INVOICE_NO")
            tableMapping.ColumnMappings.Add("DESCRIPTION", "DESCRIPTION")
            tableMapping.ColumnMappings.Add("QTY", "QTY")
            tableMapping.ColumnMappings.Add("UNIT", "UNIT")
            tableMapping.ColumnMappings.Add("PRICE", "PRICE")
            tableMapping.ColumnMappings.Add("SUB_TOTAL", "SUB_TOTAL")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[S_INVOICE_DETAIL] WHERE (([IN_DETAIL_ID] = @Original_IN_DETAIL"& _ 
                "_ID) AND ((@IsNull_INVOICE_NO = 1 AND [INVOICE_NO] IS NULL) OR ([INVOICE_NO] = @"& _ 
                "Original_INVOICE_NO)) AND ((@IsNull_DESCRIPTION = 1 AND [DESCRIPTION] IS NULL) O"& _ 
                "R ([DESCRIPTION] = @Original_DESCRIPTION)) AND ((@IsNull_QTY = 1 AND [QTY] IS NU"& _ 
                "LL) OR ([QTY] = @Original_QTY)) AND ((@IsNull_UNIT = 1 AND [UNIT] IS NULL) OR (["& _ 
                "UNIT] = @Original_UNIT)) AND ((@IsNull_PRICE = 1 AND [PRICE] IS NULL) OR ([PRICE"& _ 
                "] = @Original_PRICE)) AND ((@IsNull_SUB_TOTAL = 1 AND [SUB_TOTAL] IS NULL) OR (["& _ 
                "SUB_TOTAL] = @Original_SUB_TOTAL)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IN_DETAIL_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "IN_DETAIL_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_INVOICE_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INVOICE_NO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "INVOICE_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DESCRIPTION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTION", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DESCRIPTION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QTY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QTY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QTY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QTY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UNIT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UNIT", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRICE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRICE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRICE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "PRICE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SUB_TOTAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUB_TOTAL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SUB_TOTAL", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "SUB_TOTAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[S_INVOICE_DETAIL] ([INVOICE_NO], [DESCRIPTION], [QTY], [UNIT],"& _ 
                " [PRICE], [SUB_TOTAL]) VALUES (@INVOICE_NO, @DESCRIPTION, @QTY, @UNIT, @PRICE, @"& _ 
                "SUB_TOTAL);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT IN_DETAIL_ID, INVOICE_NO, DESCRIPTION, QTY, UNIT, PRICE, SUB"& _ 
                "_TOTAL FROM S_INVOICE_DETAIL WHERE (IN_DETAIL_ID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INVOICE_NO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "INVOICE_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DESCRIPTION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QTY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QTY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNIT", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRICE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "PRICE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUB_TOTAL", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "SUB_TOTAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[S_INVOICE_DETAIL] SET [INVOICE_NO] = @INVOICE_NO, [DESCRIPTION] = @"& _ 
                "DESCRIPTION, [QTY] = @QTY, [UNIT] = @UNIT, [PRICE] = @PRICE, [SUB_TOTAL] = @SUB_"& _ 
                "TOTAL WHERE (([IN_DETAIL_ID] = @Original_IN_DETAIL_ID) AND ((@IsNull_INVOICE_NO "& _ 
                "= 1 AND [INVOICE_NO] IS NULL) OR ([INVOICE_NO] = @Original_INVOICE_NO)) AND ((@I"& _ 
                "sNull_DESCRIPTION = 1 AND [DESCRIPTION] IS NULL) OR ([DESCRIPTION] = @Original_D"& _ 
                "ESCRIPTION)) AND ((@IsNull_QTY = 1 AND [QTY] IS NULL) OR ([QTY] = @Original_QTY)"& _ 
                ") AND ((@IsNull_UNIT = 1 AND [UNIT] IS NULL) OR ([UNIT] = @Original_UNIT)) AND ("& _ 
                "(@IsNull_PRICE = 1 AND [PRICE] IS NULL) OR ([PRICE] = @Original_PRICE)) AND ((@I"& _ 
                "sNull_SUB_TOTAL = 1 AND [SUB_TOTAL] IS NULL) OR ([SUB_TOTAL] = @Original_SUB_TOT"& _ 
                "AL)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT IN_DETAIL_ID, INVOICE_NO, DESCRIPTION, QTY, UNIT, PRICE, SUB_TOTA"& _ 
                "L FROM S_INVOICE_DETAIL WHERE (IN_DETAIL_ID = @IN_DETAIL_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INVOICE_NO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "INVOICE_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DESCRIPTION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QTY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QTY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNIT", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRICE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "PRICE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUB_TOTAL", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "SUB_TOTAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IN_DETAIL_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "IN_DETAIL_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_INVOICE_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_INVOICE_NO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "INVOICE_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DESCRIPTION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTION", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DESCRIPTION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QTY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QTY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QTY", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QTY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UNIT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UNIT", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRICE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRICE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRICE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "PRICE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SUB_TOTAL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SUB_TOTAL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SUB_TOTAL", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "SUB_TOTAL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IN_DETAIL_ID", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "IN_DETAIL_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.TakeoHospitalInventory.My.MySettings.Default.TakeoDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT IN_DETAIL_ID, INVOICE_NO, DESCRIPTION, QTY, UNIT, PRICE, SUB_TOTAL FROM db"& _ 
                "o.S_INVOICE_DETAIL"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "INSERT INTO [dbo].[S_INVOICE_DETAIL] ([INVOICE_NO], [DESCRIPTION], [QTY], [UNIT],"& _ 
                " [PRICE], [SUB_TOTAL]) VALUES (@INVOICE_NO, @DESCRIPTION, @QTY, @UNIT, @PRICE, @"& _ 
                "SUB_TOTAL);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INVOICE_NO", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "INVOICE_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DESCRIPTION", Global.System.Data.SqlDbType.NVarChar, 150, Global.System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QTY", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "QTY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UNIT", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "UNIT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRICE", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 2, "PRICE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUB_TOTAL", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 2, "SUB_TOTAL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DS_KSPAYMENT.S_INVOICE_DETAILDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DS_KSPAYMENT.S_INVOICE_DETAILDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DS_KSPAYMENT.S_INVOICE_DETAILDataTable = New DS_KSPAYMENT.S_INVOICE_DETAILDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DS_KSPAYMENT.S_INVOICE_DETAILDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DS_KSPAYMENT) As Integer
            Return Me.Adapter.Update(dataSet, "S_INVOICE_DETAIL")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_IN_DETAIL_ID As Decimal, ByVal Original_INVOICE_NO As Global.System.Nullable(Of Decimal), ByVal Original_DESCRIPTION As String, ByVal Original_QTY As String, ByVal Original_UNIT As String, ByVal Original_PRICE As Global.System.Nullable(Of Decimal), ByVal Original_SUB_TOTAL As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_IN_DETAIL_ID,Decimal)
            If (Original_INVOICE_NO.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_INVOICE_NO.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_DESCRIPTION Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_DESCRIPTION,String)
            End If
            If (Original_QTY Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_QTY,String)
            End If
            If (Original_UNIT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_UNIT,String)
            End If
            If (Original_PRICE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_PRICE.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_SUB_TOTAL.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_SUB_TOTAL.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal INVOICE_NO As Global.System.Nullable(Of Decimal), ByVal DESCRIPTION As String, ByVal QTY As String, ByVal UNIT As String, ByVal PRICE As Global.System.Nullable(Of Decimal), ByVal SUB_TOTAL As Global.System.Nullable(Of Decimal)) As Integer
            If (INVOICE_NO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(INVOICE_NO.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DESCRIPTION Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(DESCRIPTION,String)
            End If
            If (QTY Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(QTY,String)
            End If
            If (UNIT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(UNIT,String)
            End If
            If (PRICE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(PRICE.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (SUB_TOTAL.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(SUB_TOTAL.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal INVOICE_NO As Global.System.Nullable(Of Decimal), ByVal DESCRIPTION As String, ByVal QTY As String, ByVal UNIT As String, ByVal PRICE As Global.System.Nullable(Of Decimal), ByVal SUB_TOTAL As Global.System.Nullable(Of Decimal), ByVal Original_IN_DETAIL_ID As Decimal, ByVal Original_INVOICE_NO As Global.System.Nullable(Of Decimal), ByVal Original_DESCRIPTION As String, ByVal Original_QTY As String, ByVal Original_UNIT As String, ByVal Original_PRICE As Global.System.Nullable(Of Decimal), ByVal Original_SUB_TOTAL As Global.System.Nullable(Of Decimal), ByVal IN_DETAIL_ID As Decimal) As Integer
            If (INVOICE_NO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(INVOICE_NO.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DESCRIPTION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(DESCRIPTION,String)
            End If
            If (QTY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(QTY,String)
            End If
            If (UNIT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(UNIT,String)
            End If
            If (PRICE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(PRICE.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (SUB_TOTAL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(SUB_TOTAL.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_IN_DETAIL_ID,Decimal)
            If (Original_INVOICE_NO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_INVOICE_NO.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_DESCRIPTION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_DESCRIPTION,String)
            End If
            If (Original_QTY Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_QTY,String)
            End If
            If (Original_UNIT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_UNIT,String)
            End If
            If (Original_PRICE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_PRICE.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_SUB_TOTAL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_SUB_TOTAL.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(IN_DETAIL_ID,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal INVOICE_NO As Global.System.Nullable(Of Decimal), ByVal DESCRIPTION As String, ByVal QTY As String, ByVal UNIT As String, ByVal PRICE As Global.System.Nullable(Of Decimal), ByVal SUB_TOTAL As Global.System.Nullable(Of Decimal), ByVal Original_IN_DETAIL_ID As Decimal, ByVal Original_INVOICE_NO As Global.System.Nullable(Of Decimal), ByVal Original_DESCRIPTION As String, ByVal Original_QTY As String, ByVal Original_UNIT As String, ByVal Original_PRICE As Global.System.Nullable(Of Decimal), ByVal Original_SUB_TOTAL As Global.System.Nullable(Of Decimal)) As Integer
            Return Me.Update(INVOICE_NO, DESCRIPTION, QTY, UNIT, PRICE, SUB_TOTAL, Original_IN_DETAIL_ID, Original_INVOICE_NO, Original_DESCRIPTION, Original_QTY, Original_UNIT, Original_PRICE, Original_SUB_TOTAL, Original_IN_DETAIL_ID)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, false)>  _
        Public Overloads Overridable Function InsertInvoiceDetail(ByVal INVOICE_NO As Global.System.Nullable(Of Decimal), ByVal DESCRIPTION As String, ByVal QTY As String, ByVal UNIT As String, ByVal PRICE As Global.System.Nullable(Of Decimal), ByVal SUB_TOTAL As Global.System.Nullable(Of Decimal)) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            If (INVOICE_NO.HasValue = true) Then
                command.Parameters(0).Value = CType(INVOICE_NO.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DESCRIPTION Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(DESCRIPTION,String)
            End If
            If (QTY Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(QTY,String)
            End If
            If (UNIT Is Nothing) Then
                command.Parameters(3).Value = Global.System.DBNull.Value
            Else
                command.Parameters(3).Value = CType(UNIT,String)
            End If
            If (PRICE.HasValue = true) Then
                command.Parameters(4).Value = CType(PRICE.Value,Decimal)
            Else
                command.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (SUB_TOTAL.HasValue = true) Then
                command.Parameters(5).Value = CType(SUB_TOTAL.Value,Decimal)
            Else
                command.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class S_INVOICE_KSR_VIEWTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "S_INVOICE_KSR_VIEW"
            tableMapping.ColumnMappings.Add("INVOICE_ID", "INVOICE_ID")
            tableMapping.ColumnMappings.Add("WAITING_ID", "WAITING_ID")
            tableMapping.ColumnMappings.Add("INVOICE_DATE", "INVOICE_DATE")
            tableMapping.ColumnMappings.Add("PATIENT_NO", "PATIENT_NO")
            tableMapping.ColumnMappings.Add("PATIENT_NAME_ENG", "PATIENT_NAME_ENG")
            tableMapping.ColumnMappings.Add("PATIENT_NAME_KH", "PATIENT_NAME_KH")
            tableMapping.ColumnMappings.Add("PATIENT_SEX", "PATIENT_SEX")
            tableMapping.ColumnMappings.Add("PATIENT_AGE", "PATIENT_AGE")
            tableMapping.ColumnMappings.Add("TOTAL", "TOTAL")
            tableMapping.ColumnMappings.Add("SUB_TOTAL", "SUB_TOTAL")
            tableMapping.ColumnMappings.Add("EXCHANGE_RATE", "EXCHANGE_RATE")
            tableMapping.ColumnMappings.Add("CASH_RECEIVED", "CASH_RECEIVED")
            tableMapping.ColumnMappings.Add("CHANG", "CHANG")
            tableMapping.ColumnMappings.Add("RECEIVED_BY", "RECEIVED_BY")
            tableMapping.ColumnMappings.Add("TOTAL_DISCOUNT", "TOTAL_DISCOUNT")
            tableMapping.ColumnMappings.Add("DIS_CONSULT", "DIS_CONSULT")
            tableMapping.ColumnMappings.Add("DIS_OPERATION", "DIS_OPERATION")
            tableMapping.ColumnMappings.Add("DIS_MEDICINE", "DIS_MEDICINE")
            tableMapping.ColumnMappings.Add("IS_DELETE", "IS_DELETE")
            tableMapping.ColumnMappings.Add("IN_DETAIL_ID", "IN_DETAIL_ID")
            tableMapping.ColumnMappings.Add("DESCRIPTION", "DESCRIPTION")
            tableMapping.ColumnMappings.Add("QTY", "QTY")
            tableMapping.ColumnMappings.Add("UNIT", "UNIT")
            tableMapping.ColumnMappings.Add("PRICE", "PRICE")
            tableMapping.ColumnMappings.Add("Expr1", "Expr1")
            tableMapping.ColumnMappings.Add("IS_GLASSES", "IS_GLASSES")
            tableMapping.ColumnMappings.Add("TOTAL_CONSULT", "TOTAL_CONSULT")
            tableMapping.ColumnMappings.Add("TOTAL_MEDICINCE", "TOTAL_MEDICINCE")
            tableMapping.ColumnMappings.Add("DEPOSIT", "DEPOSIT")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.TakeoHospitalInventory.My.MySettings.Default.TakeoDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        INVOICE_ID, WAITING_ID, INVOICE_DATE, PATIENT_NO, PATIENT_NAME_ENG,"& _ 
                " PATIENT_NAME_KH, PATIENT_SEX, PATIENT_AGE, TOTAL, SUB_TOTAL, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                "& _ 
                "         EXCHANGE_RATE, CASH_RECEIVED, CHANG, RECEIVED_BY, TOTAL_DISCOUNT, DIS_C"& _ 
                "ONSULT, DIS_OPERATION, DIS_MEDICINE, IS_DELETE, IN_DETAIL_ID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                "& _ 
                "         DESCRIPTION, QTY, UNIT, PRICE, Expr1, IS_GLASSES, TOTAL_CONSULT, TOTAL_"& _ 
                "MEDICINCE, DEPOSIT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            S_INVOICE_KSR_VIEW"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        CASH_RECEIVED, CHANG, DESCRIPTION, DIS_CONSULT, DIS_MEDICINE, DIS_O"& _ 
                "PERATION, EXCHANGE_RATE, Expr1, INVOICE_DATE, INVOICE_ID, IN_DETAIL_ID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      "& _ 
                "                   IS_DELETE, IS_GLASSES, PATIENT_AGE, PATIENT_NAME_ENG, PATIENT"& _ 
                "_NAME_KH, PATIENT_NO, PATIENT_SEX, PRICE, QTY, RECEIVED_BY, SUB_TOTAL, TOTAL, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "                         TOTAL_DISCOUNT, UNIT, WAITING_ID, TOTAL_CONSULT, TOTAL_"& _ 
                "MEDICINCE, DEPOSIT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            S_INVOICE_KSR_VIEW"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (INVOICE_ID"& _ 
                " = @INVOICE_ID)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INVOICE_ID", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "INVOICE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DS_KSPAYMENT.S_INVOICE_KSR_VIEWDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DS_KSPAYMENT.S_INVOICE_KSR_VIEWDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DS_KSPAYMENT.S_INVOICE_KSR_VIEWDataTable = New DS_KSPAYMENT.S_INVOICE_KSR_VIEWDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As DS_KSPAYMENT.S_INVOICE_KSR_VIEWDataTable, ByVal INVOICE_ID As Decimal) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(INVOICE_ID,Decimal)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectByInvoiceID(ByVal INVOICE_ID As Decimal) As DS_KSPAYMENT.S_INVOICE_KSR_VIEWDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(INVOICE_ID,Decimal)
            Dim dataTable As DS_KSPAYMENT.S_INVOICE_KSR_VIEWDataTable = New DS_KSPAYMENT.S_INVOICE_KSR_VIEWDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class S_TEM_LISTMEDICINE_PAYMENTTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "S_TEM_LISTMEDICINE_PAYMENT"
            tableMapping.ColumnMappings.Add("WAITING_NO_MEDICINE", "WAITING_NO_MEDICINE")
            tableMapping.ColumnMappings.Add("WAITING_NO", "WAITING_NO")
            tableMapping.ColumnMappings.Add("MEDICINE_ID", "MEDICINE_ID")
            tableMapping.ColumnMappings.Add("MEDICINE_NAME", "MEDICINE_NAME")
            tableMapping.ColumnMappings.Add("MEDICINE_PRICE", "MEDICINE_PRICE")
            tableMapping.ColumnMappings.Add("MEDICINE_QTY", "MEDICINE_QTY")
            tableMapping.ColumnMappings.Add("MEDICINE_TOTAL_PRICE", "MEDICINE_TOTAL_PRICE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[S_TEM_LISTMEDICINE_PAYMENT] WHERE (([WAITING_NO_MEDICINE] = @O"& _ 
                "riginal_WAITING_NO_MEDICINE) AND ((@IsNull_WAITING_NO = 1 AND [WAITING_NO] IS NU"& _ 
                "LL) OR ([WAITING_NO] = @Original_WAITING_NO)) AND ((@IsNull_MEDICINE_ID = 1 AND "& _ 
                "[MEDICINE_ID] IS NULL) OR ([MEDICINE_ID] = @Original_MEDICINE_ID)) AND ((@IsNull"& _ 
                "_MEDICINE_NAME = 1 AND [MEDICINE_NAME] IS NULL) OR ([MEDICINE_NAME] = @Original_"& _ 
                "MEDICINE_NAME)) AND ((@IsNull_MEDICINE_PRICE = 1 AND [MEDICINE_PRICE] IS NULL) O"& _ 
                "R ([MEDICINE_PRICE] = @Original_MEDICINE_PRICE)) AND ((@IsNull_MEDICINE_QTY = 1 "& _ 
                "AND [MEDICINE_QTY] IS NULL) OR ([MEDICINE_QTY] = @Original_MEDICINE_QTY)) AND (("& _ 
                "@IsNull_MEDICINE_TOTAL_PRICE = 1 AND [MEDICINE_TOTAL_PRICE] IS NULL) OR ([MEDICI"& _ 
                "NE_TOTAL_PRICE] = @Original_MEDICINE_TOTAL_PRICE)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WAITING_NO_MEDICINE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "WAITING_NO_MEDICINE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_WAITING_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WAITING_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WAITING_NO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "WAITING_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MEDICINE_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MEDICINE_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MEDICINE_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "MEDICINE_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MEDICINE_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MEDICINE_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MEDICINE_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MEDICINE_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MEDICINE_PRICE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MEDICINE_PRICE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MEDICINE_PRICE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MEDICINE_PRICE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MEDICINE_QTY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MEDICINE_QTY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MEDICINE_QTY", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "MEDICINE_QTY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MEDICINE_TOTAL_PRICE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MEDICINE_TOTAL_PRICE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MEDICINE_TOTAL_PRICE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MEDICINE_TOTAL_PRICE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[S_TEM_LISTMEDICINE_PAYMENT] ([WAITING_NO], [MEDICINE_ID], [MED"& _ 
                "ICINE_NAME], [MEDICINE_PRICE], [MEDICINE_QTY], [MEDICINE_TOTAL_PRICE]) VALUES (@"& _ 
                "WAITING_NO, @MEDICINE_ID, @MEDICINE_NAME, @MEDICINE_PRICE, @MEDICINE_QTY, @MEDIC"& _ 
                "INE_TOTAL_PRICE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT WAITING_NO_MEDICINE, WAITING_NO, MEDICINE_ID, MEDICINE"& _ 
                "_NAME, MEDICINE_PRICE, MEDICINE_QTY, MEDICINE_TOTAL_PRICE FROM S_TEM_LISTMEDICIN"& _ 
                "E_PAYMENT WHERE (WAITING_NO_MEDICINE = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WAITING_NO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "WAITING_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MEDICINE_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "MEDICINE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MEDICINE_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MEDICINE_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MEDICINE_PRICE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MEDICINE_PRICE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MEDICINE_QTY", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "MEDICINE_QTY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MEDICINE_TOTAL_PRICE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MEDICINE_TOTAL_PRICE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[S_TEM_LISTMEDICINE_PAYMENT] SET [WAITING_NO] = @WAITING_NO, [MEDICI"& _ 
                "NE_ID] = @MEDICINE_ID, [MEDICINE_NAME] = @MEDICINE_NAME, [MEDICINE_PRICE] = @MED"& _ 
                "ICINE_PRICE, [MEDICINE_QTY] = @MEDICINE_QTY, [MEDICINE_TOTAL_PRICE] = @MEDICINE_"& _ 
                "TOTAL_PRICE WHERE (([WAITING_NO_MEDICINE] = @Original_WAITING_NO_MEDICINE) AND ("& _ 
                "(@IsNull_WAITING_NO = 1 AND [WAITING_NO] IS NULL) OR ([WAITING_NO] = @Original_W"& _ 
                "AITING_NO)) AND ((@IsNull_MEDICINE_ID = 1 AND [MEDICINE_ID] IS NULL) OR ([MEDICI"& _ 
                "NE_ID] = @Original_MEDICINE_ID)) AND ((@IsNull_MEDICINE_NAME = 1 AND [MEDICINE_N"& _ 
                "AME] IS NULL) OR ([MEDICINE_NAME] = @Original_MEDICINE_NAME)) AND ((@IsNull_MEDI"& _ 
                "CINE_PRICE = 1 AND [MEDICINE_PRICE] IS NULL) OR ([MEDICINE_PRICE] = @Original_ME"& _ 
                "DICINE_PRICE)) AND ((@IsNull_MEDICINE_QTY = 1 AND [MEDICINE_QTY] IS NULL) OR ([M"& _ 
                "EDICINE_QTY] = @Original_MEDICINE_QTY)) AND ((@IsNull_MEDICINE_TOTAL_PRICE = 1 A"& _ 
                "ND [MEDICINE_TOTAL_PRICE] IS NULL) OR ([MEDICINE_TOTAL_PRICE] = @Original_MEDICI"& _ 
                "NE_TOTAL_PRICE)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT WAITING_NO_MEDICINE, WAITING_NO, MEDICINE_ID, MEDICIN"& _ 
                "E_NAME, MEDICINE_PRICE, MEDICINE_QTY, MEDICINE_TOTAL_PRICE FROM S_TEM_LISTMEDICI"& _ 
                "NE_PAYMENT WHERE (WAITING_NO_MEDICINE = @WAITING_NO_MEDICINE)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WAITING_NO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "WAITING_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MEDICINE_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "MEDICINE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MEDICINE_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MEDICINE_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MEDICINE_PRICE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MEDICINE_PRICE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MEDICINE_QTY", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "MEDICINE_QTY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MEDICINE_TOTAL_PRICE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MEDICINE_TOTAL_PRICE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WAITING_NO_MEDICINE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "WAITING_NO_MEDICINE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_WAITING_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WAITING_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WAITING_NO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "WAITING_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MEDICINE_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MEDICINE_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MEDICINE_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "MEDICINE_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MEDICINE_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MEDICINE_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MEDICINE_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MEDICINE_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MEDICINE_PRICE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MEDICINE_PRICE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MEDICINE_PRICE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MEDICINE_PRICE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MEDICINE_QTY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MEDICINE_QTY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MEDICINE_QTY", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "MEDICINE_QTY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MEDICINE_TOTAL_PRICE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MEDICINE_TOTAL_PRICE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MEDICINE_TOTAL_PRICE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MEDICINE_TOTAL_PRICE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WAITING_NO_MEDICINE", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "WAITING_NO_MEDICINE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.TakeoHospitalInventory.My.MySettings.Default.TakeoDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(4) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT WAITING_NO_MEDICINE, WAITING_NO, MEDICINE_ID, MEDICINE_NAME, MEDICINE_PRIC"& _ 
                "E, MEDICINE_QTY, MEDICINE_TOTAL_PRICE FROM dbo.S_TEM_LISTMEDICINE_PAYMENT"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT COUNT(*) FROM S_TEM_LISTMEDICINE_PAYMENT WHERE MEDICINE_ID=@MEDICINE_ID AN"& _ 
                "D WAITING_NO=@WAITING_NO"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MEDICINE_ID", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "MEDICINE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WAITING_NO", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "WAITING_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "DELETE FROM [dbo].[S_TEM_LISTMEDICINE_PAYMENT] WHERE ([WAITING_NO_MEDICINE] = @Or"& _ 
                "iginal_WAITING_NO_MEDICINE)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WAITING_NO_MEDICINE", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "WAITING_NO_MEDICINE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT WAITING_NO_MEDICINE, WAITING_NO, MEDICINE_ID, MEDICINE_NAME, MEDICINE_PRIC"& _ 
                "E, MEDICINE_QTY, MEDICINE_TOTAL_PRICE FROM dbo.S_TEM_LISTMEDICINE_PAYMENT"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE"& _ 
                " WAITING_NO=@WAITING_NO"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WAITING_NO", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "WAITING_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "INSERT INTO [dbo].[S_TEM_LISTMEDICINE_PAYMENT] ([WAITING_NO], [MEDICINE_ID], [MED"& _ 
                "ICINE_NAME], [MEDICINE_PRICE], [MEDICINE_QTY], [MEDICINE_TOTAL_PRICE]) VALUES (@"& _ 
                "WAITING_NO, @MEDICINE_ID, @MEDICINE_NAME, @MEDICINE_PRICE, @MEDICINE_QTY, @MEDIC"& _ 
                "INE_TOTAL_PRICE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT WAITING_NO_MEDICINE, WAITING_NO, MEDICINE_ID, MEDICINE"& _ 
                "_NAME, MEDICINE_PRICE, MEDICINE_QTY, MEDICINE_TOTAL_PRICE FROM S_TEM_LISTMEDICIN"& _ 
                "E_PAYMENT WHERE (WAITING_NO_MEDICINE = SCOPE_IDENTITY())"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WAITING_NO", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "WAITING_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MEDICINE_ID", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "MEDICINE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MEDICINE_NAME", Global.System.Data.SqlDbType.NVarChar, 100, Global.System.Data.ParameterDirection.Input, 0, 0, "MEDICINE_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MEDICINE_PRICE", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 2, "MEDICINE_PRICE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MEDICINE_QTY", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "MEDICINE_QTY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MEDICINE_TOTAL_PRICE", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 2, "MEDICINE_TOTAL_PRICE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DS_KSPAYMENT.S_TEM_LISTMEDICINE_PAYMENTDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DS_KSPAYMENT.S_TEM_LISTMEDICINE_PAYMENTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DS_KSPAYMENT.S_TEM_LISTMEDICINE_PAYMENTDataTable = New DS_KSPAYMENT.S_TEM_LISTMEDICINE_PAYMENTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As DS_KSPAYMENT.S_TEM_LISTMEDICINE_PAYMENTDataTable, ByVal WAITING_NO As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (WAITING_NO.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(WAITING_NO.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectMedicineByWaitingNo(ByVal WAITING_NO As Global.System.Nullable(Of Decimal)) As DS_KSPAYMENT.S_TEM_LISTMEDICINE_PAYMENTDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (WAITING_NO.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(WAITING_NO.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DS_KSPAYMENT.S_TEM_LISTMEDICINE_PAYMENTDataTable = New DS_KSPAYMENT.S_TEM_LISTMEDICINE_PAYMENTDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DS_KSPAYMENT.S_TEM_LISTMEDICINE_PAYMENTDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DS_KSPAYMENT) As Integer
            Return Me.Adapter.Update(dataSet, "S_TEM_LISTMEDICINE_PAYMENT")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_WAITING_NO_MEDICINE As Decimal, ByVal Original_WAITING_NO As Global.System.Nullable(Of Decimal), ByVal Original_MEDICINE_ID As Global.System.Nullable(Of Decimal), ByVal Original_MEDICINE_NAME As String, ByVal Original_MEDICINE_PRICE As Global.System.Nullable(Of Decimal), ByVal Original_MEDICINE_QTY As Global.System.Nullable(Of Decimal), ByVal Original_MEDICINE_TOTAL_PRICE As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_WAITING_NO_MEDICINE,Decimal)
            If (Original_WAITING_NO.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_WAITING_NO.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_MEDICINE_ID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_MEDICINE_ID.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_MEDICINE_NAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_MEDICINE_NAME,String)
            End If
            If (Original_MEDICINE_PRICE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_MEDICINE_PRICE.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_MEDICINE_QTY.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_MEDICINE_QTY.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_MEDICINE_TOTAL_PRICE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_MEDICINE_TOTAL_PRICE.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal WAITING_NO As Global.System.Nullable(Of Decimal), ByVal MEDICINE_ID As Global.System.Nullable(Of Decimal), ByVal MEDICINE_NAME As String, ByVal MEDICINE_PRICE As Global.System.Nullable(Of Decimal), ByVal MEDICINE_QTY As Global.System.Nullable(Of Decimal), ByVal MEDICINE_TOTAL_PRICE As Global.System.Nullable(Of Decimal)) As Integer
            If (WAITING_NO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(WAITING_NO.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (MEDICINE_ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(MEDICINE_ID.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (MEDICINE_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(MEDICINE_NAME,String)
            End If
            If (MEDICINE_PRICE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(MEDICINE_PRICE.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (MEDICINE_QTY.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(MEDICINE_QTY.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (MEDICINE_TOTAL_PRICE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(MEDICINE_TOTAL_PRICE.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal WAITING_NO As Global.System.Nullable(Of Decimal), ByVal MEDICINE_ID As Global.System.Nullable(Of Decimal), ByVal MEDICINE_NAME As String, ByVal MEDICINE_PRICE As Global.System.Nullable(Of Decimal), ByVal MEDICINE_QTY As Global.System.Nullable(Of Decimal), ByVal MEDICINE_TOTAL_PRICE As Global.System.Nullable(Of Decimal), ByVal Original_WAITING_NO_MEDICINE As Decimal, ByVal Original_WAITING_NO As Global.System.Nullable(Of Decimal), ByVal Original_MEDICINE_ID As Global.System.Nullable(Of Decimal), ByVal Original_MEDICINE_NAME As String, ByVal Original_MEDICINE_PRICE As Global.System.Nullable(Of Decimal), ByVal Original_MEDICINE_QTY As Global.System.Nullable(Of Decimal), ByVal Original_MEDICINE_TOTAL_PRICE As Global.System.Nullable(Of Decimal), ByVal WAITING_NO_MEDICINE As Decimal) As Integer
            If (WAITING_NO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(WAITING_NO.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (MEDICINE_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(MEDICINE_ID.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (MEDICINE_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(MEDICINE_NAME,String)
            End If
            If (MEDICINE_PRICE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(MEDICINE_PRICE.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (MEDICINE_QTY.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(MEDICINE_QTY.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (MEDICINE_TOTAL_PRICE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(MEDICINE_TOTAL_PRICE.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_WAITING_NO_MEDICINE,Decimal)
            If (Original_WAITING_NO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_WAITING_NO.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_MEDICINE_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_MEDICINE_ID.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_MEDICINE_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_MEDICINE_NAME,String)
            End If
            If (Original_MEDICINE_PRICE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_MEDICINE_PRICE.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_MEDICINE_QTY.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_MEDICINE_QTY.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_MEDICINE_TOTAL_PRICE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_MEDICINE_TOTAL_PRICE.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(WAITING_NO_MEDICINE,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal WAITING_NO As Global.System.Nullable(Of Decimal), ByVal MEDICINE_ID As Global.System.Nullable(Of Decimal), ByVal MEDICINE_NAME As String, ByVal MEDICINE_PRICE As Global.System.Nullable(Of Decimal), ByVal MEDICINE_QTY As Global.System.Nullable(Of Decimal), ByVal MEDICINE_TOTAL_PRICE As Global.System.Nullable(Of Decimal), ByVal Original_WAITING_NO_MEDICINE As Decimal, ByVal Original_WAITING_NO As Global.System.Nullable(Of Decimal), ByVal Original_MEDICINE_ID As Global.System.Nullable(Of Decimal), ByVal Original_MEDICINE_NAME As String, ByVal Original_MEDICINE_PRICE As Global.System.Nullable(Of Decimal), ByVal Original_MEDICINE_QTY As Global.System.Nullable(Of Decimal), ByVal Original_MEDICINE_TOTAL_PRICE As Global.System.Nullable(Of Decimal)) As Integer
            Return Me.Update(WAITING_NO, MEDICINE_ID, MEDICINE_NAME, MEDICINE_PRICE, MEDICINE_QTY, MEDICINE_TOTAL_PRICE, Original_WAITING_NO_MEDICINE, Original_WAITING_NO, Original_MEDICINE_ID, Original_MEDICINE_NAME, Original_MEDICINE_PRICE, Original_MEDICINE_QTY, Original_MEDICINE_TOTAL_PRICE, Original_WAITING_NO_MEDICINE)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function CheckExistingItem(ByVal MEDICINE_ID As Global.System.Nullable(Of Decimal), ByVal WAITING_NO As Global.System.Nullable(Of Decimal)) As Object
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            If (MEDICINE_ID.HasValue = true) Then
                command.Parameters(0).Value = CType(MEDICINE_ID.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (WAITING_NO.HasValue = true) Then
                command.Parameters(1).Value = CType(WAITING_NO.Value,Decimal)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,Object)
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, false)>  _
        Public Overloads Overridable Function DeleteMedicinePay(ByVal Original_WAITING_NO_MEDICINE As Decimal) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(2)
            command.Parameters(0).Value = CType(Original_WAITING_NO_MEDICINE,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, false)>  _
        Public Overloads Overridable Function InsertNewMedicinePay(ByVal WAITING_NO As Global.System.Nullable(Of Decimal), ByVal MEDICINE_ID As Global.System.Nullable(Of Decimal), ByVal MEDICINE_NAME As String, ByVal MEDICINE_PRICE As Global.System.Nullable(Of Decimal), ByVal MEDICINE_QTY As Global.System.Nullable(Of Decimal), ByVal MEDICINE_TOTAL_PRICE As Global.System.Nullable(Of Decimal)) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(4)
            If (WAITING_NO.HasValue = true) Then
                command.Parameters(0).Value = CType(WAITING_NO.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (MEDICINE_ID.HasValue = true) Then
                command.Parameters(1).Value = CType(MEDICINE_ID.Value,Decimal)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (MEDICINE_NAME Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(MEDICINE_NAME,String)
            End If
            If (MEDICINE_PRICE.HasValue = true) Then
                command.Parameters(3).Value = CType(MEDICINE_PRICE.Value,Decimal)
            Else
                command.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (MEDICINE_QTY.HasValue = true) Then
                command.Parameters(4).Value = CType(MEDICINE_QTY.Value,Decimal)
            Else
                command.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (MEDICINE_TOTAL_PRICE.HasValue = true) Then
                command.Parameters(5).Value = CType(MEDICINE_TOTAL_PRICE.Value,Decimal)
            Else
                command.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tblItemTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tblItem"
            tableMapping.ColumnMappings.Add("ItemID", "ItemID")
            tableMapping.ColumnMappings.Add("ItemCode", "ItemCode")
            tableMapping.ColumnMappings.Add("CateID", "CateID")
            tableMapping.ColumnMappings.Add("ItemUnitID", "ItemUnitID")
            tableMapping.ColumnMappings.Add("LabourFacID", "LabourFacID")
            tableMapping.ColumnMappings.Add("ItemName", "ItemName")
            tableMapping.ColumnMappings.Add("ItemDescription", "ItemDescription")
            tableMapping.ColumnMappings.Add("ItemRegisterDate", "ItemRegisterDate")
            tableMapping.ColumnMappings.Add("Barcode", "Barcode")
            tableMapping.ColumnMappings.Add("VendorID", "VendorID")
            tableMapping.ColumnMappings.Add("ContainerID", "ContainerID")
            tableMapping.ColumnMappings.Add("UnitPrice", "UnitPrice")
            tableMapping.ColumnMappings.Add("Picture", "Picture")
            tableMapping.ColumnMappings.Add("DonatorID", "DonatorID")
            tableMapping.ColumnMappings.Add("IsMedicine", "IsMedicine")
            tableMapping.ColumnMappings.Add("CurrencyID", "CurrencyID")
            tableMapping.ColumnMappings.Add("DateExpired", "DateExpired")
            tableMapping.ColumnMappings.Add("CountryID", "CountryID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[tblItem] WHERE (([ItemID] = @Original_ItemID) AND ((@IsNull_It"& _ 
                "emCode = 1 AND [ItemCode] IS NULL) OR ([ItemCode] = @Original_ItemCode)) AND ((@"& _ 
                "IsNull_CateID = 1 AND [CateID] IS NULL) OR ([CateID] = @Original_CateID)) AND (("& _ 
                "@IsNull_ItemUnitID = 1 AND [ItemUnitID] IS NULL) OR ([ItemUnitID] = @Original_It"& _ 
                "emUnitID)) AND ((@IsNull_LabourFacID = 1 AND [LabourFacID] IS NULL) OR ([LabourF"& _ 
                "acID] = @Original_LabourFacID)) AND ((@IsNull_ItemName = 1 AND [ItemName] IS NUL"& _ 
                "L) OR ([ItemName] = @Original_ItemName)) AND ((@IsNull_ItemDescription = 1 AND ["& _ 
                "ItemDescription] IS NULL) OR ([ItemDescription] = @Original_ItemDescription)) AN"& _ 
                "D ((@IsNull_ItemRegisterDate = 1 AND [ItemRegisterDate] IS NULL) OR ([ItemRegist"& _ 
                "erDate] = @Original_ItemRegisterDate)) AND ((@IsNull_Barcode = 1 AND [Barcode] I"& _ 
                "S NULL) OR ([Barcode] = @Original_Barcode)) AND ((@IsNull_VendorID = 1 AND [Vend"& _ 
                "orID] IS NULL) OR ([VendorID] = @Original_VendorID)) AND ((@IsNull_ContainerID ="& _ 
                " 1 AND [ContainerID] IS NULL) OR ([ContainerID] = @Original_ContainerID)) AND (("& _ 
                "@IsNull_UnitPrice = 1 AND [UnitPrice] IS NULL) OR ([UnitPrice] = @Original_UnitP"& _ 
                "rice)) AND ((@IsNull_DonatorID = 1 AND [DonatorID] IS NULL) OR ([DonatorID] = @O"& _ 
                "riginal_DonatorID)) AND ((@IsNull_IsMedicine = 1 AND [IsMedicine] IS NULL) OR (["& _ 
                "IsMedicine] = @Original_IsMedicine)) AND ((@IsNull_CurrencyID = 1 AND [CurrencyI"& _ 
                "D] IS NULL) OR ([CurrencyID] = @Original_CurrencyID)) AND ((@IsNull_DateExpired "& _ 
                "= 1 AND [DateExpired] IS NULL) OR ([DateExpired] = @Original_DateExpired)) AND ("& _ 
                "(@IsNull_CountryID = 1 AND [CountryID] IS NULL) OR ([CountryID] = @Original_Coun"& _ 
                "tryID)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ItemID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ItemCode", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemCode", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ItemCode", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemCode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CateID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CateID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CateID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CateID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ItemUnitID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemUnitID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ItemUnitID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemUnitID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LabourFacID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LabourFacID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LabourFacID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LabourFacID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ItemName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ItemName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ItemDescription", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemDescription", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ItemDescription", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemDescription", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ItemRegisterDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemRegisterDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ItemRegisterDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemRegisterDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Barcode", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Barcode", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Barcode", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Barcode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_VendorID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VendorID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VendorID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VendorID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ContainerID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContainerID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ContainerID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContainerID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UnitPrice", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UnitPrice", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UnitPrice", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "UnitPrice", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DonatorID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DonatorID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DonatorID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DonatorID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IsMedicine", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsMedicine", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IsMedicine", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsMedicine", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CurrencyID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CurrencyID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CurrencyID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "CurrencyID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateExpired", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateExpired", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateExpired", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateExpired", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CountryID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CountryID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CountryID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "CountryID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[tblItem] ([ItemCode], [CateID], [ItemUnitID], [LabourFacID], ["& _ 
                "ItemName], [ItemDescription], [ItemRegisterDate], [Barcode], [VendorID], [Contai"& _ 
                "nerID], [UnitPrice], [Picture], [DonatorID], [IsMedicine], [CurrencyID], [DateEx"& _ 
                "pired], [CountryID]) VALUES (@ItemCode, @CateID, @ItemUnitID, @LabourFacID, @Ite"& _ 
                "mName, @ItemDescription, @ItemRegisterDate, @Barcode, @VendorID, @ContainerID, @"& _ 
                "UnitPrice, @Picture, @DonatorID, @IsMedicine, @CurrencyID, @DateExpired, @Countr"& _ 
                "yID);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ItemID, ItemCode, CateID, ItemUnitID, LabourFacID, ItemName, ItemD"& _ 
                "escription, ItemRegisterDate, Barcode, VendorID, ContainerID, UnitPrice, Picture"& _ 
                ", DonatorID, IsMedicine, CurrencyID, DateExpired, CountryID FROM tblItem WHERE ("& _ 
                "ItemID = SCOPE_IDENTITY()) ORDER BY ItemName"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ItemCode", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemCode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CateID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CateID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ItemUnitID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemUnitID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LabourFacID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LabourFacID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ItemName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ItemDescription", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemDescription", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ItemRegisterDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemRegisterDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Barcode", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Barcode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VendorID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VendorID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ContainerID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContainerID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UnitPrice", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "UnitPrice", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Picture", Global.System.Data.SqlDbType.Image, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Picture", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DonatorID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DonatorID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsMedicine", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsMedicine", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CurrencyID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "CurrencyID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateExpired", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateExpired", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CountryID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "CountryID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[tblItem] SET [ItemCode] = @ItemCode, [CateID] = @CateID, [ItemUnitI"& _ 
                "D] = @ItemUnitID, [LabourFacID] = @LabourFacID, [ItemName] = @ItemName, [ItemDes"& _ 
                "cription] = @ItemDescription, [ItemRegisterDate] = @ItemRegisterDate, [Barcode] "& _ 
                "= @Barcode, [VendorID] = @VendorID, [ContainerID] = @ContainerID, [UnitPrice] = "& _ 
                "@UnitPrice, [Picture] = @Picture, [DonatorID] = @DonatorID, [IsMedicine] = @IsMe"& _ 
                "dicine, [CurrencyID] = @CurrencyID, [DateExpired] = @DateExpired, [CountryID] = "& _ 
                "@CountryID WHERE (([ItemID] = @Original_ItemID) AND ((@IsNull_ItemCode = 1 AND ["& _ 
                "ItemCode] IS NULL) OR ([ItemCode] = @Original_ItemCode)) AND ((@IsNull_CateID = "& _ 
                "1 AND [CateID] IS NULL) OR ([CateID] = @Original_CateID)) AND ((@IsNull_ItemUnit"& _ 
                "ID = 1 AND [ItemUnitID] IS NULL) OR ([ItemUnitID] = @Original_ItemUnitID)) AND ("& _ 
                "(@IsNull_LabourFacID = 1 AND [LabourFacID] IS NULL) OR ([LabourFacID] = @Origina"& _ 
                "l_LabourFacID)) AND ((@IsNull_ItemName = 1 AND [ItemName] IS NULL) OR ([ItemName"& _ 
                "] = @Original_ItemName)) AND ((@IsNull_ItemDescription = 1 AND [ItemDescription]"& _ 
                " IS NULL) OR ([ItemDescription] = @Original_ItemDescription)) AND ((@IsNull_Item"& _ 
                "RegisterDate = 1 AND [ItemRegisterDate] IS NULL) OR ([ItemRegisterDate] = @Origi"& _ 
                "nal_ItemRegisterDate)) AND ((@IsNull_Barcode = 1 AND [Barcode] IS NULL) OR ([Bar"& _ 
                "code] = @Original_Barcode)) AND ((@IsNull_VendorID = 1 AND [VendorID] IS NULL) O"& _ 
                "R ([VendorID] = @Original_VendorID)) AND ((@IsNull_ContainerID = 1 AND [Containe"& _ 
                "rID] IS NULL) OR ([ContainerID] = @Original_ContainerID)) AND ((@IsNull_UnitPric"& _ 
                "e = 1 AND [UnitPrice] IS NULL) OR ([UnitPrice] = @Original_UnitPrice)) AND ((@Is"& _ 
                "Null_DonatorID = 1 AND [DonatorID] IS NULL) OR ([DonatorID] = @Original_DonatorI"& _ 
                "D)) AND ((@IsNull_IsMedicine = 1 AND [IsMedicine] IS NULL) OR ([IsMedicine] = @O"& _ 
                "riginal_IsMedicine)) AND ((@IsNull_CurrencyID = 1 AND [CurrencyID] IS NULL) OR ("& _ 
                "[CurrencyID] = @Original_CurrencyID)) AND ((@IsNull_DateExpired = 1 AND [DateExp"& _ 
                "ired] IS NULL) OR ([DateExpired] = @Original_DateExpired)) AND ((@IsNull_Country"& _ 
                "ID = 1 AND [CountryID] IS NULL) OR ([CountryID] = @Original_CountryID)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELEC"& _ 
                "T ItemID, ItemCode, CateID, ItemUnitID, LabourFacID, ItemName, ItemDescription, "& _ 
                "ItemRegisterDate, Barcode, VendorID, ContainerID, UnitPrice, Picture, DonatorID,"& _ 
                " IsMedicine, CurrencyID, DateExpired, CountryID FROM tblItem WHERE (ItemID = @It"& _ 
                "emID) ORDER BY ItemName"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ItemCode", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemCode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CateID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CateID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ItemUnitID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemUnitID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LabourFacID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LabourFacID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ItemName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ItemDescription", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemDescription", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ItemRegisterDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemRegisterDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Barcode", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Barcode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VendorID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VendorID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ContainerID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContainerID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UnitPrice", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "UnitPrice", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Picture", Global.System.Data.SqlDbType.Image, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Picture", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DonatorID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DonatorID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsMedicine", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsMedicine", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CurrencyID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "CurrencyID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DateExpired", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateExpired", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CountryID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "CountryID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ItemID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ItemCode", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemCode", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ItemCode", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemCode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CateID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CateID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CateID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CateID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ItemUnitID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemUnitID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ItemUnitID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemUnitID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LabourFacID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LabourFacID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LabourFacID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LabourFacID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ItemName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ItemName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ItemDescription", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemDescription", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ItemDescription", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemDescription", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ItemRegisterDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemRegisterDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ItemRegisterDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemRegisterDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Barcode", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Barcode", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Barcode", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Barcode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_VendorID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VendorID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VendorID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VendorID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ContainerID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContainerID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ContainerID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContainerID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UnitPrice", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UnitPrice", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UnitPrice", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "UnitPrice", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DonatorID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DonatorID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DonatorID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DonatorID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IsMedicine", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsMedicine", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IsMedicine", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsMedicine", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CurrencyID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CurrencyID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CurrencyID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "CurrencyID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DateExpired", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateExpired", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DateExpired", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DateExpired", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CountryID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CountryID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CountryID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "CountryID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ItemID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.TakeoHospitalInventory.My.MySettings.Default.TakeoDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ItemID, ItemCode, CateID, ItemUnitID, LabourFacID, ItemName, ItemDescripti"& _ 
                "on, ItemRegisterDate, Barcode, VendorID, ContainerID, UnitPrice, Picture, Donato"& _ 
                "rID, IsMedicine, CurrencyID, DateExpired, CountryID FROM dbo.tblItem ORDER BY It"& _ 
                "emName"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT COUNT(*) FROM tblItem"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE ItemID=@ItemID and ItemName=@ItemName"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ItemID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ItemName", Global.System.Data.SqlDbType.NVarChar, 150, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DS_KSPAYMENT.tblItemDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DS_KSPAYMENT.tblItemDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DS_KSPAYMENT.tblItemDataTable = New DS_KSPAYMENT.tblItemDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DS_KSPAYMENT.tblItemDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DS_KSPAYMENT) As Integer
            Return Me.Adapter.Update(dataSet, "tblItem")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_ItemID As Integer,  _
                    ByVal Original_ItemCode As String,  _
                    ByVal Original_CateID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_ItemUnitID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_LabourFacID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_ItemName As String,  _
                    ByVal Original_ItemDescription As String,  _
                    ByVal Original_ItemRegisterDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_Barcode As String,  _
                    ByVal Original_VendorID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_ContainerID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_UnitPrice As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DonatorID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_IsMedicine As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_CurrencyID As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DateExpired As Global.System.Nullable(Of Date),  _
                    ByVal Original_CountryID As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ItemID,Integer)
            If (Original_ItemCode Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ItemCode,String)
            End If
            If (Original_CateID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_CateID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_ItemUnitID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_ItemUnitID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_LabourFacID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_LabourFacID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_ItemName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_ItemName,String)
            End If
            If (Original_ItemDescription Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_ItemDescription,String)
            End If
            If (Original_ItemRegisterDate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_ItemRegisterDate.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_Barcode Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_Barcode,String)
            End If
            If (Original_VendorID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_VendorID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_ContainerID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_ContainerID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_UnitPrice.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_UnitPrice.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_DonatorID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_DonatorID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_IsMedicine.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_IsMedicine.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_CurrencyID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_CurrencyID.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Original_DateExpired.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_DateExpired.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (Original_CountryID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_CountryID.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal ItemCode As String,  _
                    ByVal CateID As Global.System.Nullable(Of Integer),  _
                    ByVal ItemUnitID As Global.System.Nullable(Of Integer),  _
                    ByVal LabourFacID As Global.System.Nullable(Of Integer),  _
                    ByVal ItemName As String,  _
                    ByVal ItemDescription As String,  _
                    ByVal ItemRegisterDate As Global.System.Nullable(Of Date),  _
                    ByVal Barcode As String,  _
                    ByVal VendorID As Global.System.Nullable(Of Integer),  _
                    ByVal ContainerID As Global.System.Nullable(Of Integer),  _
                    ByVal UnitPrice As Global.System.Nullable(Of Decimal),  _
                    ByVal Picture() As Byte,  _
                    ByVal DonatorID As Global.System.Nullable(Of Integer),  _
                    ByVal IsMedicine As Global.System.Nullable(Of Boolean),  _
                    ByVal CurrencyID As Global.System.Nullable(Of Decimal),  _
                    ByVal DateExpired As Global.System.Nullable(Of Date),  _
                    ByVal CountryID As Global.System.Nullable(Of Decimal)) As Integer
            If (ItemCode Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ItemCode,String)
            End If
            If (CateID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CateID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ItemUnitID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ItemUnitID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (LabourFacID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(LabourFacID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (ItemName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(ItemName,String)
            End If
            If (ItemDescription Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(ItemDescription,String)
            End If
            If (ItemRegisterDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(ItemRegisterDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Barcode Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Barcode,String)
            End If
            If (VendorID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(VendorID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (ContainerID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(ContainerID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (UnitPrice.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(UnitPrice.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Picture Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Picture,Byte())
            End If
            If (DonatorID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(DonatorID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (IsMedicine.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(IsMedicine.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (CurrencyID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(CurrencyID.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (DateExpired.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(DateExpired.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (CountryID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(CountryID.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ItemCode As String,  _
                    ByVal CateID As Global.System.Nullable(Of Integer),  _
                    ByVal ItemUnitID As Global.System.Nullable(Of Integer),  _
                    ByVal LabourFacID As Global.System.Nullable(Of Integer),  _
                    ByVal ItemName As String,  _
                    ByVal ItemDescription As String,  _
                    ByVal ItemRegisterDate As Global.System.Nullable(Of Date),  _
                    ByVal Barcode As String,  _
                    ByVal VendorID As Global.System.Nullable(Of Integer),  _
                    ByVal ContainerID As Global.System.Nullable(Of Integer),  _
                    ByVal UnitPrice As Global.System.Nullable(Of Decimal),  _
                    ByVal Picture() As Byte,  _
                    ByVal DonatorID As Global.System.Nullable(Of Integer),  _
                    ByVal IsMedicine As Global.System.Nullable(Of Boolean),  _
                    ByVal CurrencyID As Global.System.Nullable(Of Decimal),  _
                    ByVal DateExpired As Global.System.Nullable(Of Date),  _
                    ByVal CountryID As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ItemID As Integer,  _
                    ByVal Original_ItemCode As String,  _
                    ByVal Original_CateID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_ItemUnitID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_LabourFacID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_ItemName As String,  _
                    ByVal Original_ItemDescription As String,  _
                    ByVal Original_ItemRegisterDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_Barcode As String,  _
                    ByVal Original_VendorID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_ContainerID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_UnitPrice As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DonatorID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_IsMedicine As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_CurrencyID As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DateExpired As Global.System.Nullable(Of Date),  _
                    ByVal Original_CountryID As Global.System.Nullable(Of Decimal),  _
                    ByVal ItemID As Integer) As Integer
            If (ItemCode Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ItemCode,String)
            End If
            If (CateID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CateID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ItemUnitID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ItemUnitID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (LabourFacID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(LabourFacID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (ItemName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ItemName,String)
            End If
            If (ItemDescription Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(ItemDescription,String)
            End If
            If (ItemRegisterDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(ItemRegisterDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Barcode Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Barcode,String)
            End If
            If (VendorID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(VendorID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (ContainerID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(ContainerID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (UnitPrice.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(UnitPrice.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Picture Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Picture,Byte())
            End If
            If (DonatorID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(DonatorID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (IsMedicine.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(IsMedicine.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (CurrencyID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(CurrencyID.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (DateExpired.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(DateExpired.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (CountryID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(CountryID.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_ItemID,Integer)
            If (Original_ItemCode Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_ItemCode,String)
            End If
            If (Original_CateID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_CateID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (Original_ItemUnitID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_ItemUnitID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (Original_LabourFacID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_LabourFacID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (Original_ItemName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_ItemName,String)
            End If
            If (Original_ItemDescription Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_ItemDescription,String)
            End If
            If (Original_ItemRegisterDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_ItemRegisterDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (Original_Barcode Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_Barcode,String)
            End If
            If (Original_VendorID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_VendorID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (Original_ContainerID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_ContainerID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (Original_UnitPrice.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_UnitPrice.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (Original_DonatorID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_DonatorID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (Original_IsMedicine.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_IsMedicine.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (Original_CurrencyID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_CurrencyID.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            End If
            If (Original_DateExpired.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_DateExpired.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (Original_CountryID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_CountryID.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(50).Value = CType(ItemID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ItemCode As String,  _
                    ByVal CateID As Global.System.Nullable(Of Integer),  _
                    ByVal ItemUnitID As Global.System.Nullable(Of Integer),  _
                    ByVal LabourFacID As Global.System.Nullable(Of Integer),  _
                    ByVal ItemName As String,  _
                    ByVal ItemDescription As String,  _
                    ByVal ItemRegisterDate As Global.System.Nullable(Of Date),  _
                    ByVal Barcode As String,  _
                    ByVal VendorID As Global.System.Nullable(Of Integer),  _
                    ByVal ContainerID As Global.System.Nullable(Of Integer),  _
                    ByVal UnitPrice As Global.System.Nullable(Of Decimal),  _
                    ByVal Picture() As Byte,  _
                    ByVal DonatorID As Global.System.Nullable(Of Integer),  _
                    ByVal IsMedicine As Global.System.Nullable(Of Boolean),  _
                    ByVal CurrencyID As Global.System.Nullable(Of Decimal),  _
                    ByVal DateExpired As Global.System.Nullable(Of Date),  _
                    ByVal CountryID As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_ItemID As Integer,  _
                    ByVal Original_ItemCode As String,  _
                    ByVal Original_CateID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_ItemUnitID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_LabourFacID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_ItemName As String,  _
                    ByVal Original_ItemDescription As String,  _
                    ByVal Original_ItemRegisterDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_Barcode As String,  _
                    ByVal Original_VendorID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_ContainerID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_UnitPrice As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DonatorID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_IsMedicine As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_CurrencyID As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_DateExpired As Global.System.Nullable(Of Date),  _
                    ByVal Original_CountryID As Global.System.Nullable(Of Decimal)) As Integer
            Return Me.Update(ItemCode, CateID, ItemUnitID, LabourFacID, ItemName, ItemDescription, ItemRegisterDate, Barcode, VendorID, ContainerID, UnitPrice, Picture, DonatorID, IsMedicine, CurrencyID, DateExpired, CountryID, Original_ItemID, Original_ItemCode, Original_CateID, Original_ItemUnitID, Original_LabourFacID, Original_ItemName, Original_ItemDescription, Original_ItemRegisterDate, Original_Barcode, Original_VendorID, Original_ContainerID, Original_UnitPrice, Original_DonatorID, Original_IsMedicine, Original_CurrencyID, Original_DateExpired, Original_CountryID, Original_ItemID)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function CheckNameMedicince(ByVal ItemID As Integer, ByVal ItemName As String) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            command.Parameters(0).Value = CType(ItemID,Integer)
            If (ItemName Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(ItemName,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class S_PRESCRIPTIONTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "S_PRESCRIPTION"
            tableMapping.ColumnMappings.Add("PRES_ID", "PRES_ID")
            tableMapping.ColumnMappings.Add("WAITING_ID", "WAITING_ID")
            tableMapping.ColumnMappings.Add("PATIENT_NO", "PATIENT_NO")
            tableMapping.ColumnMappings.Add("MEDICINCE_ID", "MEDICINCE_ID")
            tableMapping.ColumnMappings.Add("MEDICINCE_NAME", "MEDICINCE_NAME")
            tableMapping.ColumnMappings.Add("ORDINANCE", "ORDINANCE")
            tableMapping.ColumnMappings.Add("MEDICINCE_QTY", "MEDICINCE_QTY")
            tableMapping.ColumnMappings.Add("MEDICINCE_PRICE", "MEDICINCE_PRICE")
            tableMapping.ColumnMappings.Add("TOTAL_PRICE", "TOTAL_PRICE")
            tableMapping.ColumnMappings.Add("USAGE", "USAGE")
            tableMapping.ColumnMappings.Add("PRESCRIP_DATE", "PRESCRIP_DATE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[S_PRESCRIPTION] WHERE (([PRES_ID] = @Original_PRES_ID) AND ((@"& _ 
                "IsNull_WAITING_ID = 1 AND [WAITING_ID] IS NULL) OR ([WAITING_ID] = @Original_WAI"& _ 
                "TING_ID)) AND ((@IsNull_PATIENT_NO = 1 AND [PATIENT_NO] IS NULL) OR ([PATIENT_NO"& _ 
                "] = @Original_PATIENT_NO)) AND ((@IsNull_MEDICINCE_ID = 1 AND [MEDICINCE_ID] IS "& _ 
                "NULL) OR ([MEDICINCE_ID] = @Original_MEDICINCE_ID)) AND ((@IsNull_MEDICINCE_NAME"& _ 
                " = 1 AND [MEDICINCE_NAME] IS NULL) OR ([MEDICINCE_NAME] = @Original_MEDICINCE_NA"& _ 
                "ME)) AND ((@IsNull_ORDINANCE = 1 AND [ORDINANCE] IS NULL) OR ([ORDINANCE] = @Ori"& _ 
                "ginal_ORDINANCE)) AND ((@IsNull_MEDICINCE_QTY = 1 AND [MEDICINCE_QTY] IS NULL) O"& _ 
                "R ([MEDICINCE_QTY] = @Original_MEDICINCE_QTY)) AND ((@IsNull_MEDICINCE_PRICE = 1"& _ 
                " AND [MEDICINCE_PRICE] IS NULL) OR ([MEDICINCE_PRICE] = @Original_MEDICINCE_PRIC"& _ 
                "E)) AND ((@IsNull_TOTAL_PRICE = 1 AND [TOTAL_PRICE] IS NULL) OR ([TOTAL_PRICE] ="& _ 
                " @Original_TOTAL_PRICE)) AND ((@IsNull_USAGE = 1 AND [USAGE] IS NULL) OR ([USAGE"& _ 
                "] = @Original_USAGE)) AND ((@IsNull_PRESCRIP_DATE = 1 AND [PRESCRIP_DATE] IS NUL"& _ 
                "L) OR ([PRESCRIP_DATE] = @Original_PRESCRIP_DATE)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRES_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "PRES_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_WAITING_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WAITING_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WAITING_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "WAITING_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PATIENT_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PATIENT_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PATIENT_NO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "PATIENT_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MEDICINCE_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MEDICINCE_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MEDICINCE_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "MEDICINCE_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MEDICINCE_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MEDICINCE_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MEDICINCE_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MEDICINCE_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ORDINANCE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDINANCE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ORDINANCE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDINANCE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MEDICINCE_QTY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MEDICINCE_QTY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MEDICINCE_QTY", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "MEDICINCE_QTY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MEDICINCE_PRICE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MEDICINCE_PRICE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MEDICINCE_PRICE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MEDICINCE_PRICE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TOTAL_PRICE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_PRICE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TOTAL_PRICE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TOTAL_PRICE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_USAGE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USAGE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_USAGE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USAGE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRESCRIP_DATE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESCRIP_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRESCRIP_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESCRIP_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[S_PRESCRIPTION] ([WAITING_ID], [PATIENT_NO], [MEDICINCE_ID], ["& _ 
                "MEDICINCE_NAME], [ORDINANCE], [MEDICINCE_QTY], [MEDICINCE_PRICE], [TOTAL_PRICE],"& _ 
                " [USAGE], [PRESCRIP_DATE]) VALUES (@WAITING_ID, @PATIENT_NO, @MEDICINCE_ID, @MED"& _ 
                "ICINCE_NAME, @ORDINANCE, @MEDICINCE_QTY, @MEDICINCE_PRICE, @TOTAL_PRICE, @USAGE,"& _ 
                " @PRESCRIP_DATE);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PRES_ID, WAITING_ID, PATIENT_NO, MEDICINCE_ID, MEDICIN"& _ 
                "CE_NAME, ORDINANCE, MEDICINCE_QTY, MEDICINCE_PRICE, TOTAL_PRICE, USAGE, PRESCRIP"& _ 
                "_DATE FROM S_PRESCRIPTION WHERE (PRES_ID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WAITING_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "WAITING_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PATIENT_NO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "PATIENT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MEDICINCE_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "MEDICINCE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MEDICINCE_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MEDICINCE_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDINANCE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDINANCE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MEDICINCE_QTY", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "MEDICINCE_QTY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MEDICINCE_PRICE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MEDICINCE_PRICE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_PRICE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TOTAL_PRICE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USAGE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USAGE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRESCRIP_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESCRIP_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[S_PRESCRIPTION] SET [WAITING_ID] = @WAITING_ID, [PATIENT_NO] = @PAT"& _ 
                "IENT_NO, [MEDICINCE_ID] = @MEDICINCE_ID, [MEDICINCE_NAME] = @MEDICINCE_NAME, [OR"& _ 
                "DINANCE] = @ORDINANCE, [MEDICINCE_QTY] = @MEDICINCE_QTY, [MEDICINCE_PRICE] = @ME"& _ 
                "DICINCE_PRICE, [TOTAL_PRICE] = @TOTAL_PRICE, [USAGE] = @USAGE, [PRESCRIP_DATE] ="& _ 
                " @PRESCRIP_DATE WHERE (([PRES_ID] = @Original_PRES_ID) AND ((@IsNull_WAITING_ID "& _ 
                "= 1 AND [WAITING_ID] IS NULL) OR ([WAITING_ID] = @Original_WAITING_ID)) AND ((@I"& _ 
                "sNull_PATIENT_NO = 1 AND [PATIENT_NO] IS NULL) OR ([PATIENT_NO] = @Original_PATI"& _ 
                "ENT_NO)) AND ((@IsNull_MEDICINCE_ID = 1 AND [MEDICINCE_ID] IS NULL) OR ([MEDICIN"& _ 
                "CE_ID] = @Original_MEDICINCE_ID)) AND ((@IsNull_MEDICINCE_NAME = 1 AND [MEDICINC"& _ 
                "E_NAME] IS NULL) OR ([MEDICINCE_NAME] = @Original_MEDICINCE_NAME)) AND ((@IsNull"& _ 
                "_ORDINANCE = 1 AND [ORDINANCE] IS NULL) OR ([ORDINANCE] = @Original_ORDINANCE)) "& _ 
                "AND ((@IsNull_MEDICINCE_QTY = 1 AND [MEDICINCE_QTY] IS NULL) OR ([MEDICINCE_QTY]"& _ 
                " = @Original_MEDICINCE_QTY)) AND ((@IsNull_MEDICINCE_PRICE = 1 AND [MEDICINCE_PR"& _ 
                "ICE] IS NULL) OR ([MEDICINCE_PRICE] = @Original_MEDICINCE_PRICE)) AND ((@IsNull_"& _ 
                "TOTAL_PRICE = 1 AND [TOTAL_PRICE] IS NULL) OR ([TOTAL_PRICE] = @Original_TOTAL_P"& _ 
                "RICE)) AND ((@IsNull_USAGE = 1 AND [USAGE] IS NULL) OR ([USAGE] = @Original_USAG"& _ 
                "E)) AND ((@IsNull_PRESCRIP_DATE = 1 AND [PRESCRIP_DATE] IS NULL) OR ([PRESCRIP_D"& _ 
                "ATE] = @Original_PRESCRIP_DATE)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT PRES_ID, WAITING_ID, PATIENT_NO, MEDI"& _ 
                "CINCE_ID, MEDICINCE_NAME, ORDINANCE, MEDICINCE_QTY, MEDICINCE_PRICE, TOTAL_PRICE"& _ 
                ", USAGE, PRESCRIP_DATE FROM S_PRESCRIPTION WHERE (PRES_ID = @PRES_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WAITING_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "WAITING_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PATIENT_NO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "PATIENT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MEDICINCE_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "MEDICINCE_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MEDICINCE_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MEDICINCE_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDINANCE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDINANCE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MEDICINCE_QTY", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "MEDICINCE_QTY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MEDICINCE_PRICE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MEDICINCE_PRICE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TOTAL_PRICE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TOTAL_PRICE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@USAGE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USAGE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRESCRIP_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESCRIP_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRES_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "PRES_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_WAITING_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WAITING_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WAITING_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "WAITING_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PATIENT_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PATIENT_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PATIENT_NO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "PATIENT_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MEDICINCE_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MEDICINCE_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MEDICINCE_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "MEDICINCE_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MEDICINCE_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MEDICINCE_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MEDICINCE_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MEDICINCE_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ORDINANCE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDINANCE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ORDINANCE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ORDINANCE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MEDICINCE_QTY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MEDICINCE_QTY", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MEDICINCE_QTY", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "MEDICINCE_QTY", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MEDICINCE_PRICE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MEDICINCE_PRICE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MEDICINCE_PRICE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "MEDICINCE_PRICE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TOTAL_PRICE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TOTAL_PRICE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TOTAL_PRICE", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 2, "TOTAL_PRICE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_USAGE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USAGE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_USAGE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "USAGE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PRESCRIP_DATE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESCRIP_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PRESCRIP_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PRESCRIP_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRES_ID", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "PRES_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.TakeoHospitalInventory.My.MySettings.Default.TakeoDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PRES_ID, WAITING_ID, PATIENT_NO, MEDICINCE_ID, MEDICINCE_NAME, ORDINANCE, "& _ 
                "MEDICINCE_QTY, MEDICINCE_PRICE, TOTAL_PRICE, USAGE, PRESCRIP_DATE FROM dbo.S_PRE"& _ 
                "SCRIPTION"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DS_KSPAYMENT.S_PRESCRIPTIONDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DS_KSPAYMENT.S_PRESCRIPTIONDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DS_KSPAYMENT.S_PRESCRIPTIONDataTable = New DS_KSPAYMENT.S_PRESCRIPTIONDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DS_KSPAYMENT.S_PRESCRIPTIONDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DS_KSPAYMENT) As Integer
            Return Me.Adapter.Update(dataSet, "S_PRESCRIPTION")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PRES_ID As Decimal, ByVal Original_WAITING_ID As Global.System.Nullable(Of Decimal), ByVal Original_PATIENT_NO As Global.System.Nullable(Of Decimal), ByVal Original_MEDICINCE_ID As Global.System.Nullable(Of Decimal), ByVal Original_MEDICINCE_NAME As String, ByVal Original_ORDINANCE As String, ByVal Original_MEDICINCE_QTY As Global.System.Nullable(Of Decimal), ByVal Original_MEDICINCE_PRICE As Global.System.Nullable(Of Decimal), ByVal Original_TOTAL_PRICE As Global.System.Nullable(Of Decimal), ByVal Original_USAGE As String, ByVal Original_PRESCRIP_DATE As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PRES_ID,Decimal)
            If (Original_WAITING_ID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_WAITING_ID.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_PATIENT_NO.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_PATIENT_NO.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_MEDICINCE_ID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_MEDICINCE_ID.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_MEDICINCE_NAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_MEDICINCE_NAME,String)
            End If
            If (Original_ORDINANCE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_ORDINANCE,String)
            End If
            If (Original_MEDICINCE_QTY.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_MEDICINCE_QTY.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_MEDICINCE_PRICE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_MEDICINCE_PRICE.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_TOTAL_PRICE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_TOTAL_PRICE.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_USAGE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_USAGE,String)
            End If
            If (Original_PRESCRIP_DATE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_PRESCRIP_DATE.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal WAITING_ID As Global.System.Nullable(Of Decimal), ByVal PATIENT_NO As Global.System.Nullable(Of Decimal), ByVal MEDICINCE_ID As Global.System.Nullable(Of Decimal), ByVal MEDICINCE_NAME As String, ByVal ORDINANCE As String, ByVal MEDICINCE_QTY As Global.System.Nullable(Of Decimal), ByVal MEDICINCE_PRICE As Global.System.Nullable(Of Decimal), ByVal TOTAL_PRICE As Global.System.Nullable(Of Decimal), ByVal USAGE As String, ByVal PRESCRIP_DATE As Global.System.Nullable(Of Date)) As Integer
            If (WAITING_ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(WAITING_ID.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (PATIENT_NO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(PATIENT_NO.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (MEDICINCE_ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(MEDICINCE_ID.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (MEDICINCE_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(MEDICINCE_NAME,String)
            End If
            If (ORDINANCE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(ORDINANCE,String)
            End If
            If (MEDICINCE_QTY.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(MEDICINCE_QTY.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (MEDICINCE_PRICE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(MEDICINCE_PRICE.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (TOTAL_PRICE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(TOTAL_PRICE.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (USAGE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(USAGE,String)
            End If
            If (PRESCRIP_DATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(PRESCRIP_DATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal WAITING_ID As Global.System.Nullable(Of Decimal),  _
                    ByVal PATIENT_NO As Global.System.Nullable(Of Decimal),  _
                    ByVal MEDICINCE_ID As Global.System.Nullable(Of Decimal),  _
                    ByVal MEDICINCE_NAME As String,  _
                    ByVal ORDINANCE As String,  _
                    ByVal MEDICINCE_QTY As Global.System.Nullable(Of Decimal),  _
                    ByVal MEDICINCE_PRICE As Global.System.Nullable(Of Decimal),  _
                    ByVal TOTAL_PRICE As Global.System.Nullable(Of Decimal),  _
                    ByVal USAGE As String,  _
                    ByVal PRESCRIP_DATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_PRES_ID As Decimal,  _
                    ByVal Original_WAITING_ID As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PATIENT_NO As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MEDICINCE_ID As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MEDICINCE_NAME As String,  _
                    ByVal Original_ORDINANCE As String,  _
                    ByVal Original_MEDICINCE_QTY As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MEDICINCE_PRICE As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_TOTAL_PRICE As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_USAGE As String,  _
                    ByVal Original_PRESCRIP_DATE As Global.System.Nullable(Of Date),  _
                    ByVal PRES_ID As Decimal) As Integer
            If (WAITING_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(WAITING_ID.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (PATIENT_NO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PATIENT_NO.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (MEDICINCE_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(MEDICINCE_ID.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (MEDICINCE_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(MEDICINCE_NAME,String)
            End If
            If (ORDINANCE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ORDINANCE,String)
            End If
            If (MEDICINCE_QTY.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(MEDICINCE_QTY.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (MEDICINCE_PRICE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(MEDICINCE_PRICE.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (TOTAL_PRICE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(TOTAL_PRICE.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (USAGE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(USAGE,String)
            End If
            If (PRESCRIP_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(PRESCRIP_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_PRES_ID,Decimal)
            If (Original_WAITING_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_WAITING_ID.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_PATIENT_NO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_PATIENT_NO.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_MEDICINCE_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_MEDICINCE_ID.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_MEDICINCE_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_MEDICINCE_NAME,String)
            End If
            If (Original_ORDINANCE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_ORDINANCE,String)
            End If
            If (Original_MEDICINCE_QTY.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_MEDICINCE_QTY.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_MEDICINCE_PRICE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_MEDICINCE_PRICE.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_TOTAL_PRICE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_TOTAL_PRICE.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_USAGE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_USAGE,String)
            End If
            If (Original_PRESCRIP_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_PRESCRIP_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(31).Value = CType(PRES_ID,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal WAITING_ID As Global.System.Nullable(Of Decimal),  _
                    ByVal PATIENT_NO As Global.System.Nullable(Of Decimal),  _
                    ByVal MEDICINCE_ID As Global.System.Nullable(Of Decimal),  _
                    ByVal MEDICINCE_NAME As String,  _
                    ByVal ORDINANCE As String,  _
                    ByVal MEDICINCE_QTY As Global.System.Nullable(Of Decimal),  _
                    ByVal MEDICINCE_PRICE As Global.System.Nullable(Of Decimal),  _
                    ByVal TOTAL_PRICE As Global.System.Nullable(Of Decimal),  _
                    ByVal USAGE As String,  _
                    ByVal PRESCRIP_DATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_PRES_ID As Decimal,  _
                    ByVal Original_WAITING_ID As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_PATIENT_NO As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MEDICINCE_ID As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MEDICINCE_NAME As String,  _
                    ByVal Original_ORDINANCE As String,  _
                    ByVal Original_MEDICINCE_QTY As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_MEDICINCE_PRICE As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_TOTAL_PRICE As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_USAGE As String,  _
                    ByVal Original_PRESCRIP_DATE As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(WAITING_ID, PATIENT_NO, MEDICINCE_ID, MEDICINCE_NAME, ORDINANCE, MEDICINCE_QTY, MEDICINCE_PRICE, TOTAL_PRICE, USAGE, PRESCRIP_DATE, Original_PRES_ID, Original_WAITING_ID, Original_PATIENT_NO, Original_MEDICINCE_ID, Original_MEDICINCE_NAME, Original_ORDINANCE, Original_MEDICINCE_QTY, Original_MEDICINCE_PRICE, Original_TOTAL_PRICE, Original_USAGE, Original_PRESCRIP_DATE, Original_PRES_ID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class S_COUNT_MEDICINE_AND_GLASSESTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "S_COUNT_MEDICINE_AND_GLASSES"
            tableMapping.ColumnMappings.Add("INVOICE_ID", "INVOICE_ID")
            tableMapping.ColumnMappings.Add("INVOICE_DATE", "INVOICE_DATE")
            tableMapping.ColumnMappings.Add("PATIENT_NO", "PATIENT_NO")
            tableMapping.ColumnMappings.Add("PATIENT_NAME_ENG", "PATIENT_NAME_ENG")
            tableMapping.ColumnMappings.Add("PATIENT_NAME_KH", "PATIENT_NAME_KH")
            tableMapping.ColumnMappings.Add("PATIENT_SEX", "PATIENT_SEX")
            tableMapping.ColumnMappings.Add("PATIENT_AGE", "PATIENT_AGE")
            tableMapping.ColumnMappings.Add("IS_GLASSES", "IS_GLASSES")
            tableMapping.ColumnMappings.Add("MEDICINCE_NAME", "MEDICINCE_NAME")
            tableMapping.ColumnMappings.Add("MEDICINCE_QTY", "MEDICINCE_QTY")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.TakeoHospitalInventory.My.MySettings.Default.TakeoDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT INVOICE_ID, INVOICE_DATE, PATIENT_NO, PATIENT_NAME_ENG, PATIENT_NAME_KH, P"& _ 
                "ATIENT_SEX, PATIENT_AGE, IS_GLASSES, MEDICINCE_NAME, MEDICINCE_QTY FROM dbo.S_CO"& _ 
                "UNT_MEDICINE_AND_GLASSES"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT INVOICE_ID, INVOICE_DATE, PATIENT_NO, PATIENT_NAME_ENG, PATIENT_NAME_KH, P"& _ 
                "ATIENT_SEX, PATIENT_AGE, IS_GLASSES, MEDICINCE_NAME, MEDICINCE_QTY FROM dbo.S_CO"& _ 
                "UNT_MEDICINE_AND_GLASSES"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"INVOICE_DATE BETWEEN @DFrom AND @DTo"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DFrom", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DTo", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "INVOICE_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DS_KSPAYMENT.S_COUNT_MEDICINE_AND_GLASSESDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DS_KSPAYMENT.S_COUNT_MEDICINE_AND_GLASSESDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DS_KSPAYMENT.S_COUNT_MEDICINE_AND_GLASSESDataTable = New DS_KSPAYMENT.S_COUNT_MEDICINE_AND_GLASSESDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As DS_KSPAYMENT.S_COUNT_MEDICINE_AND_GLASSESDataTable, ByVal DFrom As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectCountMedicince(ByVal DFrom As Global.System.Nullable(Of Date), ByVal DTo As Global.System.Nullable(Of Date)) As DS_KSPAYMENT.S_COUNT_MEDICINE_AND_GLASSESDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (DFrom.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(DFrom.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (DTo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DTo.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DS_KSPAYMENT.S_COUNT_MEDICINE_AND_GLASSESDataTable = New DS_KSPAYMENT.S_COUNT_MEDICINE_AND_GLASSESDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class S_COUNT_GLASSESSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "S_COUNT_GLASSESS"
            tableMapping.ColumnMappings.Add("INVOICE_ID", "INVOICE_ID")
            tableMapping.ColumnMappings.Add("WAITING_ID", "WAITING_ID")
            tableMapping.ColumnMappings.Add("INVOICE_DATE", "INVOICE_DATE")
            tableMapping.ColumnMappings.Add("PATIENT_NO", "PATIENT_NO")
            tableMapping.ColumnMappings.Add("PATIENT_NAME_ENG", "PATIENT_NAME_ENG")
            tableMapping.ColumnMappings.Add("PATIENT_NAME_KH", "PATIENT_NAME_KH")
            tableMapping.ColumnMappings.Add("PATIENT_SEX", "PATIENT_SEX")
            tableMapping.ColumnMappings.Add("PATIENT_AGE", "PATIENT_AGE")
            tableMapping.ColumnMappings.Add("DIAGNOSIS", "DIAGNOSIS")
            tableMapping.ColumnMappings.Add("IS_ON_EYE", "IS_ON_EYE")
            tableMapping.ColumnMappings.Add("IS_GLASSES", "IS_GLASSES")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.TakeoHospitalInventory.My.MySettings.Default.TakeoDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT INVOICE_ID, WAITING_ID, INVOICE_DATE, PATIENT_NO, PATIENT_NAME_ENG, PATIEN"& _ 
                "T_NAME_KH, PATIENT_SEX, PATIENT_AGE, DIAGNOSIS, IS_ON_EYE, IS_GLASSES FROM dbo.S"& _ 
                "_COUNT_GLASSESS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DS_KSPAYMENT.S_COUNT_GLASSESSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DS_KSPAYMENT.S_COUNT_GLASSESSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DS_KSPAYMENT.S_COUNT_GLASSESSDataTable = New DS_KSPAYMENT.S_COUNT_GLASSESSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class V_EYE_PRESCRIPTIONTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "V_EYE_PRESCRIPTION"
            tableMapping.ColumnMappings.Add("WAIT_ID", "WAIT_ID")
            tableMapping.ColumnMappings.Add("DATE_WAITING", "DATE_WAITING")
            tableMapping.ColumnMappings.Add("PATIENT_NO", "PATIENT_NO")
            tableMapping.ColumnMappings.Add("NameEng", "NameEng")
            tableMapping.ColumnMappings.Add("NameKhmer", "NameKhmer")
            tableMapping.ColumnMappings.Add("Age", "Age")
            tableMapping.ColumnMappings.Add("Sex", "Sex")
            tableMapping.ColumnMappings.Add("DIAGNOSIS", "DIAGNOSIS")
            tableMapping.ColumnMappings.Add("RE", "RE")
            tableMapping.ColumnMappings.Add("LE", "LE")
            tableMapping.ColumnMappings.Add("RRE", "RRE")
            tableMapping.ColumnMappings.Add("RREF", "RREF")
            tableMapping.ColumnMappings.Add("MEDICINCE_ID", "MEDICINCE_ID")
            tableMapping.ColumnMappings.Add("MEDICINCE_NAME", "MEDICINCE_NAME")
            tableMapping.ColumnMappings.Add("ORDINANCE", "ORDINANCE")
            tableMapping.ColumnMappings.Add("MEDICINCE_QTY", "MEDICINCE_QTY")
            tableMapping.ColumnMappings.Add("MEDICINCE_PRICE", "MEDICINCE_PRICE")
            tableMapping.ColumnMappings.Add("TOTAL_PRICE", "TOTAL_PRICE")
            tableMapping.ColumnMappings.Add("USAGE", "USAGE")
            tableMapping.ColumnMappings.Add("PRESCRIP_DATE", "PRESCRIP_DATE")
            tableMapping.ColumnMappings.Add("OPHTHAMOLOGIST", "OPHTHAMOLOGIST")
            tableMapping.ColumnMappings.Add("LLE", "LLE")
            tableMapping.ColumnMappings.Add("IS_ON_EYE", "IS_ON_EYE")
            tableMapping.ColumnMappings.Add("IOPRE", "IOPRE")
            tableMapping.ColumnMappings.Add("IOPLE", "IOPLE")
            tableMapping.ColumnMappings.Add("RPH", "RPH")
            tableMapping.ColumnMappings.Add("LPH", "LPH")
            tableMapping.ColumnMappings.Add("LREF", "LREF")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.TakeoHospitalInventory.My.MySettings.Default.TakeoDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        WAIT_ID, DATE_WAITING, PATIENT_NO, NameEng, NameKhmer, Age, Sex, DI"& _ 
                "AGNOSIS, RE, LE, RRE, RREF, MEDICINCE_ID, MEDICINCE_NAME, ORDINANCE, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"         "& _ 
                "                MEDICINCE_QTY, MEDICINCE_PRICE, TOTAL_PRICE, USAGE, PRESCRIP_DAT"& _ 
                "E, OPHTHAMOLOGIST, LLE, IS_ON_EYE, IOPRE, IOPLE, RPH, LPH, LREF"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM           "& _ 
                " V_EYE_PRESCRIPTION"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        Age, DATE_WAITING, DIAGNOSIS, IOPLE, IOPRE, IS_ON_EYE, LE, LLE, MED"& _ 
                "ICINCE_ID, MEDICINCE_NAME, MEDICINCE_PRICE, MEDICINCE_QTY, NameEng, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"          "& _ 
                "               NameKhmer, OPHTHAMOLOGIST, ORDINANCE, PATIENT_NO, PRESCRIP_DATE, "& _ 
                "RE, RRE, RREF, Sex, TOTAL_PRICE, USAGE, WAIT_ID, RPH, LPH, LREF"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM           "& _ 
                " V_EYE_PRESCRIPTION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (WAIT_ID = @WAIT_ID)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WAIT_ID", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "WAIT_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DS_KSPAYMENT.V_EYE_PRESCRIPTIONDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DS_KSPAYMENT.V_EYE_PRESCRIPTIONDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DS_KSPAYMENT.V_EYE_PRESCRIPTIONDataTable = New DS_KSPAYMENT.V_EYE_PRESCRIPTIONDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As DS_KSPAYMENT.V_EYE_PRESCRIPTIONDataTable, ByVal WAIT_ID As Decimal) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(WAIT_ID,Decimal)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function SelectPrescriptionWaitingID(ByVal WAIT_ID As Decimal) As DS_KSPAYMENT.V_EYE_PRESCRIPTIONDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(WAIT_ID,Decimal)
            Dim dataTable As DS_KSPAYMENT.V_EYE_PRESCRIPTIONDataTable = New DS_KSPAYMENT.V_EYE_PRESCRIPTIONDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _s_TEM_LISTPAYMENTTableAdapter As S_TEM_LISTPAYMENTTableAdapter
        
        Private _s_EXCHANGE_RATETableAdapter As S_EXCHANGE_RATETableAdapter
        
        Private _s_INVOICE_KSTableAdapter As S_INVOICE_KSTableAdapter
        
        Private _s_INVOICE_DETAILTableAdapter As S_INVOICE_DETAILTableAdapter
        
        Private _s_TEM_LISTMEDICINE_PAYMENTTableAdapter As S_TEM_LISTMEDICINE_PAYMENTTableAdapter
        
        Private _tblItemTableAdapter As tblItemTableAdapter
        
        Private _s_PRESCRIPTIONTableAdapter As S_PRESCRIPTIONTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property S_TEM_LISTPAYMENTTableAdapter() As S_TEM_LISTPAYMENTTableAdapter
            Get
                Return Me._s_TEM_LISTPAYMENTTableAdapter
            End Get
            Set
                Me._s_TEM_LISTPAYMENTTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property S_EXCHANGE_RATETableAdapter() As S_EXCHANGE_RATETableAdapter
            Get
                Return Me._s_EXCHANGE_RATETableAdapter
            End Get
            Set
                Me._s_EXCHANGE_RATETableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property S_INVOICE_KSTableAdapter() As S_INVOICE_KSTableAdapter
            Get
                Return Me._s_INVOICE_KSTableAdapter
            End Get
            Set
                Me._s_INVOICE_KSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property S_INVOICE_DETAILTableAdapter() As S_INVOICE_DETAILTableAdapter
            Get
                Return Me._s_INVOICE_DETAILTableAdapter
            End Get
            Set
                Me._s_INVOICE_DETAILTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property S_TEM_LISTMEDICINE_PAYMENTTableAdapter() As S_TEM_LISTMEDICINE_PAYMENTTableAdapter
            Get
                Return Me._s_TEM_LISTMEDICINE_PAYMENTTableAdapter
            End Get
            Set
                Me._s_TEM_LISTMEDICINE_PAYMENTTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tblItemTableAdapter() As tblItemTableAdapter
            Get
                Return Me._tblItemTableAdapter
            End Get
            Set
                Me._tblItemTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property S_PRESCRIPTIONTableAdapter() As S_PRESCRIPTIONTableAdapter
            Get
                Return Me._s_PRESCRIPTIONTableAdapter
            End Get
            Set
                Me._s_PRESCRIPTIONTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._s_TEM_LISTPAYMENTTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._s_TEM_LISTPAYMENTTableAdapter.Connection) Is Nothing)) Then
                    Return Me._s_TEM_LISTPAYMENTTableAdapter.Connection
                End If
                If ((Not (Me._s_EXCHANGE_RATETableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._s_EXCHANGE_RATETableAdapter.Connection) Is Nothing)) Then
                    Return Me._s_EXCHANGE_RATETableAdapter.Connection
                End If
                If ((Not (Me._s_INVOICE_KSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._s_INVOICE_KSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._s_INVOICE_KSTableAdapter.Connection
                End If
                If ((Not (Me._s_INVOICE_DETAILTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._s_INVOICE_DETAILTableAdapter.Connection) Is Nothing)) Then
                    Return Me._s_INVOICE_DETAILTableAdapter.Connection
                End If
                If ((Not (Me._s_TEM_LISTMEDICINE_PAYMENTTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._s_TEM_LISTMEDICINE_PAYMENTTableAdapter.Connection) Is Nothing)) Then
                    Return Me._s_TEM_LISTMEDICINE_PAYMENTTableAdapter.Connection
                End If
                If ((Not (Me._tblItemTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tblItemTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tblItemTableAdapter.Connection
                End If
                If ((Not (Me._s_PRESCRIPTIONTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._s_PRESCRIPTIONTableAdapter.Connection) Is Nothing)) Then
                    Return Me._s_PRESCRIPTIONTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._s_TEM_LISTPAYMENTTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._s_EXCHANGE_RATETableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._s_INVOICE_KSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._s_INVOICE_DETAILTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._s_TEM_LISTMEDICINE_PAYMENTTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tblItemTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._s_PRESCRIPTIONTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As DS_KSPAYMENT, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._s_INVOICE_KSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.S_INVOICE_KS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._s_INVOICE_KSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._s_PRESCRIPTIONTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.S_PRESCRIPTION.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._s_PRESCRIPTIONTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tblItemTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tblItem.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tblItemTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._s_EXCHANGE_RATETableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.S_EXCHANGE_RATE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._s_EXCHANGE_RATETableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._s_TEM_LISTPAYMENTTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.S_TEM_LISTPAYMENT.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._s_TEM_LISTPAYMENTTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._s_INVOICE_DETAILTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.S_INVOICE_DETAIL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._s_INVOICE_DETAILTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._s_TEM_LISTMEDICINE_PAYMENTTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.S_TEM_LISTMEDICINE_PAYMENT.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._s_TEM_LISTMEDICINE_PAYMENTTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As DS_KSPAYMENT, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._s_INVOICE_KSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.S_INVOICE_KS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._s_INVOICE_KSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._s_PRESCRIPTIONTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.S_PRESCRIPTION.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._s_PRESCRIPTIONTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tblItemTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tblItem.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tblItemTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._s_EXCHANGE_RATETableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.S_EXCHANGE_RATE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._s_EXCHANGE_RATETableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._s_TEM_LISTPAYMENTTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.S_TEM_LISTPAYMENT.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._s_TEM_LISTPAYMENTTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._s_INVOICE_DETAILTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.S_INVOICE_DETAIL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._s_INVOICE_DETAILTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._s_TEM_LISTMEDICINE_PAYMENTTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.S_TEM_LISTMEDICINE_PAYMENT.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._s_TEM_LISTMEDICINE_PAYMENTTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As DS_KSPAYMENT, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._s_TEM_LISTMEDICINE_PAYMENTTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.S_TEM_LISTMEDICINE_PAYMENT.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._s_TEM_LISTMEDICINE_PAYMENTTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._s_INVOICE_DETAILTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.S_INVOICE_DETAIL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._s_INVOICE_DETAILTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._s_TEM_LISTPAYMENTTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.S_TEM_LISTPAYMENT.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._s_TEM_LISTPAYMENTTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._s_EXCHANGE_RATETableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.S_EXCHANGE_RATE.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._s_EXCHANGE_RATETableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tblItemTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tblItem.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tblItemTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._s_PRESCRIPTIONTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.S_PRESCRIPTION.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._s_PRESCRIPTIONTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._s_INVOICE_KSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.S_INVOICE_KS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._s_INVOICE_KSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As DS_KSPAYMENT) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._s_TEM_LISTPAYMENTTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._s_TEM_LISTPAYMENTTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._s_EXCHANGE_RATETableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._s_EXCHANGE_RATETableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._s_INVOICE_KSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._s_INVOICE_KSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._s_INVOICE_DETAILTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._s_INVOICE_DETAILTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._s_TEM_LISTMEDICINE_PAYMENTTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._s_TEM_LISTMEDICINE_PAYMENTTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tblItemTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tblItemTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._s_PRESCRIPTIONTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._s_PRESCRIPTIONTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._s_TEM_LISTPAYMENTTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._s_TEM_LISTPAYMENTTableAdapter, Me._s_TEM_LISTPAYMENTTableAdapter.Connection)
                    Me._s_TEM_LISTPAYMENTTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._s_TEM_LISTPAYMENTTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._s_TEM_LISTPAYMENTTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._s_TEM_LISTPAYMENTTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._s_TEM_LISTPAYMENTTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._s_EXCHANGE_RATETableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._s_EXCHANGE_RATETableAdapter, Me._s_EXCHANGE_RATETableAdapter.Connection)
                    Me._s_EXCHANGE_RATETableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._s_EXCHANGE_RATETableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._s_EXCHANGE_RATETableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._s_EXCHANGE_RATETableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._s_EXCHANGE_RATETableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._s_INVOICE_KSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._s_INVOICE_KSTableAdapter, Me._s_INVOICE_KSTableAdapter.Connection)
                    Me._s_INVOICE_KSTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._s_INVOICE_KSTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._s_INVOICE_KSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._s_INVOICE_KSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._s_INVOICE_KSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._s_INVOICE_DETAILTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._s_INVOICE_DETAILTableAdapter, Me._s_INVOICE_DETAILTableAdapter.Connection)
                    Me._s_INVOICE_DETAILTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._s_INVOICE_DETAILTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._s_INVOICE_DETAILTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._s_INVOICE_DETAILTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._s_INVOICE_DETAILTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._s_TEM_LISTMEDICINE_PAYMENTTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._s_TEM_LISTMEDICINE_PAYMENTTableAdapter, Me._s_TEM_LISTMEDICINE_PAYMENTTableAdapter.Connection)
                    Me._s_TEM_LISTMEDICINE_PAYMENTTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._s_TEM_LISTMEDICINE_PAYMENTTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._s_TEM_LISTMEDICINE_PAYMENTTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._s_TEM_LISTMEDICINE_PAYMENTTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._s_TEM_LISTMEDICINE_PAYMENTTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tblItemTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tblItemTableAdapter, Me._tblItemTableAdapter.Connection)
                    Me._tblItemTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tblItemTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tblItemTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tblItemTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tblItemTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._s_PRESCRIPTIONTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._s_PRESCRIPTIONTableAdapter, Me._s_PRESCRIPTIONTableAdapter.Connection)
                    Me._s_PRESCRIPTIONTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._s_PRESCRIPTIONTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._s_PRESCRIPTIONTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._s_PRESCRIPTIONTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._s_PRESCRIPTIONTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._s_TEM_LISTPAYMENTTableAdapter) Is Nothing) Then
                    Me._s_TEM_LISTPAYMENTTableAdapter.Connection = CType(revertConnections(Me._s_TEM_LISTPAYMENTTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._s_TEM_LISTPAYMENTTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._s_EXCHANGE_RATETableAdapter) Is Nothing) Then
                    Me._s_EXCHANGE_RATETableAdapter.Connection = CType(revertConnections(Me._s_EXCHANGE_RATETableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._s_EXCHANGE_RATETableAdapter.Transaction = Nothing
                End If
                If (Not (Me._s_INVOICE_KSTableAdapter) Is Nothing) Then
                    Me._s_INVOICE_KSTableAdapter.Connection = CType(revertConnections(Me._s_INVOICE_KSTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._s_INVOICE_KSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._s_INVOICE_DETAILTableAdapter) Is Nothing) Then
                    Me._s_INVOICE_DETAILTableAdapter.Connection = CType(revertConnections(Me._s_INVOICE_DETAILTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._s_INVOICE_DETAILTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._s_TEM_LISTMEDICINE_PAYMENTTableAdapter) Is Nothing) Then
                    Me._s_TEM_LISTMEDICINE_PAYMENTTableAdapter.Connection = CType(revertConnections(Me._s_TEM_LISTMEDICINE_PAYMENTTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._s_TEM_LISTMEDICINE_PAYMENTTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tblItemTableAdapter) Is Nothing) Then
                    Me._tblItemTableAdapter.Connection = CType(revertConnections(Me._tblItemTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tblItemTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._s_PRESCRIPTIONTableAdapter) Is Nothing) Then
                    Me._s_PRESCRIPTIONTableAdapter.Connection = CType(revertConnections(Me._s_PRESCRIPTIONTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._s_PRESCRIPTIONTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
